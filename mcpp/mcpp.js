// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 369160;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([72,87,1,0,0,0,0,0,255,255,255,255,0,0,0,0,248,59,0,0,224,59,0,0,216,59,0,0,88,59,0,0,56,59,0,0,8,59,0,0,240,58,0,0,200,58,0,0,192,58,0,0,168,58,0,0,160,58,0,0,144,58,0,0,104,27,0,0,0,0,0,0,152,73,0,0,144,73,0,0,0,73,0,0,176,72,0,0,136,72,0,0,64,72,0,0,0,72,0,0,200,71,0,0,160,71,0,0,40,71,0,0,0,71,0,0,136,70,0,0,24,70,0,0,192,69,0,0,112,69,0,0,32,69,0,0,216,68,0,0,152,68,0,0,88,68,0,0,248,67,0,0,184,67,0,0,80,67,0,0,240,66,0,0,136,66,0,0,96,66,0,0,56,66,0,0,248,65,0,0,216,65,0,0,152,65,0,0,48,65,0,0,232,64,0,0,64,64,0,0,8,64,0,0,224,63,0,0,144,63,0,0,72,63,0,0,8,63,0,0,208,62,0,0,144,62,0,0,72,62,0,0,16,62,0,0,184,61,0,0,104,61,0,0,24,61,0,0,224,60,0,0,160,60,0,0,24,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,32,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,96,0,96,0,8,0,16,0,8,0,0,0,8,0,8,0,16,0,8,0,8,0,8,0,8,0,8,0,8,0,4,0,8,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,8,0,8,0,8,0,8,0,8,0,8,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,0,0,8,0,8,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,8,0,8,0,8,0,0,0,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,72,0,64,0,64,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,65,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,66,0,68,0,68,0,68,0,68,0,68,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,32,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,96,0,96,0,8,16,16,16,8,16,0,18,8,16,8,16,16,16,8,22,8,16,8,16,8,16,8,16,8,16,4,16,8,16,2,16,2,16,2,16,2,16,2,16,2,16,2,16,2,16,2,16,2,16,8,16,8,16,8,16,8,16,8,16,8,16,0,16,1,16,1,20,1,16,1,24,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,8,16,0,16,8,16,8,16,1,16,0,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,8,16,8,16,8,16,8,16,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,32,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,96,0,96,0,8,0,16,0,8,0,0,0,8,0,8,0,16,0,8,0,8,0,8,0,8,0,8,0,8,0,4,0,8,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,8,0,8,0,8,0,8,0,8,0,8,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,0,0,8,0,8,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,8,0,8,0,8,0,0,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,65,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,127,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,32,0,32,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,96,0,96,0,8,0,16,0,8,0,0,0,8,0,8,0,16,0,8,0,8,0,8,0,8,0,8,0,8,0,4,0,8,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,8,0,8,0,8,0,8,0,8,0,8,0,0,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,8,10,0,10,8,10,8,10,1,10,0,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,8,10,8,10,8,10,8,10,0,0,0,74,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,66,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,78,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,79,0,76,0,76,0,64,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,4,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,32,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,64,0,0,0,4,0,0,0,4,0,0,0,128,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,16,0,0,0,8,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,74,0,0,176,76,0,0,80,74,0,0,0,0,0,0,160,81,0,0,72,81,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,29,0,0,144,29,0,0,64,29,0,0,8,29,0,0,136,28,0,0,64,28,0,0,8,28,0,0,224,27,0,0,136,27,0,0,96,27,0,0,40,27,0,0,208,26,0,0,168,26,0,0,128,26,0,0,48,26,0,0,16,87,0,0,240,86,0,0,176,86,0,0,32,86,0,0,200,85,0,0,120,85,0,0,24,85,0,0,248,84,0,0,184,84,0,0,144,84,0,0,128,83,0,0,48,83,0,0,192,82,0,0,64,82,0,0,0,0,0,0,1,2,120,112,112,112,112,105,105,105,97,97,89,89,81,81,81,81,73,73,65,57,49,41,33,25,25,11,19,0,0,0,48,160,5,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,75,0,0,96,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,75,0,0,48,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,75,0,0,224,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,11,0,0,0,0,0,0,64,67,0,0,23,0,0,0,48,64,0,0,34,0,0,0,168,61,0,0,20,0,0,0,64,59,0,0,22,0,0,0,80,58,0,0,5,0,0,0,248,57,0,0,6,0,0,0,72,57,0,0,19,0,0,0,232,56,0,0,24,0,0,0,112,56,0,0,34,0,0,0,248,55,0,0,21,0,0,0,160,55,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,38,0,0,32,34,0,0,32,34,0,0,80,45,0,0,88,49,0,0,48,54,0,0,40,160,5,0,40,160,5,0,216,30,0,0,192,27,0,0,128,86,0,0,40,160,5,0,136,82,0,0,120,80,0,0,160,78,0,0,48,77,0,0,240,75,0,0,40,160,5,0,24,75,0,0,136,73,0,0,200,70,0,0,72,67,0,0,56,64,0,0,176,61,0,0,72,59,0,0,88,58,0,0,0,58,0,0,80,57,0,0,240,56,0,0,40,160,5,0,120,56,0,0,24,56,0,0,168,55,0,0,40,55,0,0,184,54,0,0,56,54,0,0,40,160,5,0,40,160,5,0,208,53,0,0,128,53,0,0,16,53,0,0,40,160,5,0,40,160,5,0,40,160,5,0,152,52,0,0,40,52,0,0,40,160,5,0,40,160,5,0,160,37,0,0,80,37,0,0,32,37,0,0,184,36,0,0,56,36,0,0,168,35,0,0,80,35,0,0,224,34,0,0,40,34,0,0,0,0,0,0,208,32,0,0,1,0,0,0,120,32,0,0,2,0,0,0,72,32,0,0,4,0,0,0,240,31,0,0,8,0,0,0,152,31,0,0,16,0,0,0,16,31,0,0,32,0,0,0,208,30,0,0,64,0,0,0,120,30,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,104,32,0,0,255,0,0,0,32,0,0,0,8,32,0,0,255,0,0,0,2,0,0,0,184,31,0,0,31,0,0,0,64,0,0,0,216,33,0,0,255,0,0,0,128,0,0,0,136,33,0,0,255,0,0,0,4,0,0,0,88,31,0,0,255,3,0,0,8,0,0,0,40,33,0,0,255,3,0,0,16,0,0,0,224,32,0,0,255,3,0,0,0,1,0,0,0,31,0,0,255,3,0,0,0,2,0,0,168,30,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,110,32,35,97,115,109,32,98,108,111,99,107,32,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,46,48,115,37,108,100,0,0,0,69,110,100,32,111,102,32,37,115,32,119,105,116,104,105,110,32,109,97,99,114,111,32,99,97,108,108,32,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,108,100,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,110,101,115,116,105,110,103,32,111,102,32,112,97,114,101,110,115,0,0,0,0,0,60,0,0,0,0,0,0,0,101,110,100,97,115,109,0,0,69,110,100,32,111,102,32,37,115,32,119,105,116,104,105,110,32,35,105,102,32,40,35,105,102,100,101,102,41,32,115,101,99,116,105,111,110,32,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,108,100,0,0,0,0,0,0,0,62,62,0,0,0,0,0,0,97,115,109,0,0,0,0,0,69,110,100,32,111,102,32,37,115,32,119,105,116,104,32,37,46,48,108,100,37,115,0,0,60,60,0,0,0,0,0,0,35,112,114,101,112,114,111,99,101,115,115,101,100,10,0,0,70,105,108,101,32,114,101,97,100,32,101,114,114,111,114,0,45,0,0,0,0,0,0,0,80,114,101,112,114,111,99,101,115,115,105,110,103,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,0,0,76,111,103,105,99,97,108,32,115,111,117,114,99,101,32,108,105,110,101,32,108,111,110,103,101,114,32,116,104,97,110,32,37,46,48,115,37,108,100,32,98,121,116,101,115,0,0,0,43,0,0,0,0,0,0,0,97,115,115,101,114,116,0,0,99,111,109,112,97,116,0,0,67,111,110,118,101,114,116,101,100,32,91,67,82,43,76,70,93,32,116,111,32,91,76,70,93,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,84,111,111,32,108,111,110,103,32,108,111,103,105,99,97,108,32,108,105,110,101,0,0,0,47,0,0,0,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,37,115,0,0,0,47,42,32,0,0,0,0,0,105,102,110,100,101,102,0,0,101,117,99,0,0,0,0,0,84,111,111,32,108,111,110,103,32,115,111,117,114,99,101,32,108,105,110,101,0,0,0,0,42,0,0,0,0,0,0,0,77,111,114,101,0,0,0,0,9,42,47,10,0,0,0,0,10,35,108,105,110,101,32,37,108,100,32,40,37,115,41,0,33,0,0,0,0,0,0,0,35,108,105,110,101,0,0,0,76,105,110,101,32,110,117,109,98,101,114,32,37,46,48,115,34,37,108,100,34,32,103,111,116,32,98,101,121,111,110,100,32,114,97,110,103,101,0,0,126,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,35,100,101,102,105,110,101,32,0,0,0,0,0,0,0,0,84,111,111,32,108,111,110,103,32,99,111,109,109,101,110,116,44,32,100,105,115,99,97,114,100,101,100,32,117,112,32,116,111,32,104,101,114,101,0,0,117,110,97,114,121,32,45,0,111,112,32,37,115,44,32,112,114,101,99,32,37,100,44,32,115,116,97,99,107,101,100,32,111,112,32,37,115,44,32,112,114,101,99,32,37,100,44,32,115,107,105,112,32,37,100,10,0,0,0,0,0,0,0,0,84,104,105,115,32,105,115,32,110,111,116,32,97,32,112,114,101,112,114,111,99,101,115,115,101,100,32,115,111,117,114,99,101,0,0,0,0,0,0,0,34,47,42,34,32,119,105,116,104,105,110,32,99,111,109,109,101,110,116,0,0,0,0,0,117,110,97,114,121,32,43,0,47,42,32,67,117,114,114,101,110,116,108,121,32,100,101,102,105,110,101,100,32,109,97,99,114,111,115,46,32,42,47,10,0,0,0,0,0,0,0,0,47,42,0,0,0,0,0,0,40,0,0,0,0,0,0,0,47,42,0,0,0,0,0,0,77,97,99,114,111,32,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,46,48,115,37,108,100,32,115,119,97,108,108,111,119,101,100,32,100,105,114,101,99,116,105,118,101,45,108,105,107,101,32,108,105,110,101,0,0,0,0,0,118,97,108,0,0,0,0,0,84,104,105,115,32,112,114,101,112,114,111,99,101,115,115,101,100,32,102,105,108,101,32,105,115,32,99,111,114,114,117,112,116,101,100,0,0,0,0,0,84,111,111,32,108,111,110,103,32,108,105,110,101,32,115,112,108,105,99,101,100,32,98,121,32,99,111,109,109,101,110,116,115,0,0,0,0,0,0,0,101,110,100,32,111,102,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,0,0,78,111,32,97,114,103,117,109,101,110,116,0,0,0,0,0,115,116,100,0,0,0,0,0,73,108,108,101,103,97,108,32,99,111,110,116,114,111,108,32,99,104,97,114,97,99,116,101,114,32,37,46,48,115,48,120,37,108,120,44,32,115,107,105,112,112,101,100,32,116,104,101,32,99,104,97,114,97,99,116,101,114,0,0,0,0,0,0,67,97,110,39,116,32,117,115,101,32,116,104,101,32,111,112,101,114,97,116,111,114,32,34,37,115,34,0,0,0,0,0,109,101,109,111,114,121,0,0,67,111,110,118,101,114,116,101,100,32,37,46,48,115,48,120,37,48,50,108,120,32,116,111,32,97,32,115,112,97,99,101,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,0,0,0,0,0,0,0,0,44,32,115,107,105,112,112,101,100,32,116,104,101,32,108,105,110,101,0,0,0,0,0,0,103,101,116,99,0,0,0,0,101,117,99,106,112,0,0,0,80,97,114,115,101,100,32,34,47,47,34,32,97,115,32,99,111,109,109,101,110,116,0,0,105,102,100,101,102,0,0,0,115,105,103,110,101,100,0,0,76,101,115,115,0,0,0,0,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,40,114,101,113,117,105,114,101,100,32,115,105,122,101,32,105,115,32,37,46,48,115,48,120,37,108,120,32,98,121,116,101,115,41,0,0,0,0,0,0,0,0,102,108,111,97,116,0,0,0,73,110,32,101,118,97,108,32,108,111,111,112,32,115,107,105,112,32,61,32,37,100,44,32,98,105,110,111,112,32,61,32,37,100,44,32,108,105,110,101,32,105,115,58,32,37,115,10,0,0,0,0,0,0,0,0,105,102,0,0,0,0,0,0,32,32,32,32,102,114,111,109,32,37,115,58,32,37,108,100,58,32,32,32,32,0,0,0,105,110,116,0,0,0,0,0,69,120,99,101,115,115,105,118,101,32,116,111,107,101,110,32,115,101,113,117,101,110,99,101,32,34,37,115,34,0,0,0,109,99,112,112,46,101,114,114,0,0,0,0,0,0,0,0,109,97,99,114,111,95,99,97,108,108,0,0,0,0,0,0,60,115,116,100,105,110,62,0,115,104,111,114,116,0,0,0,47,42,105,32,37,99,42,47,10,0,0,0,0,0,0,0,79,112,101,114,97,116,111,114,32,34,37,115,34,32,105,110,32,105,110,99,111,114,114,101,99,116,32,99,111,110,116,101,120,116,0,0,0,0,0,0,101,120,112,97,110,100,0,0,32,32,32,32,102,114,111,109,32,37,115,58,32,37,108,100,58,32,32,32,32,37,115,0,99,104,97,114,0,0,0,0,47,42,37,115,42,47,0,0,116,111,107,101,110,0,0,0,115,105,122,101,111,102,32,45,45,32,116,121,112,101,99,111,100,101,58,48,120,37,120,32,116,112,45,62,116,111,107,101,110,95,110,97,109,101,58,34,37,115,34,32,116,112,45,62,116,121,112,101,58,48,120,37,120,10,0,0,0,0,0,0,47,42,37,115,32,37,108,100,42,47,0,0,0,0,0,0,112,97,116,104,0,0,0,0,32,32,32,32,37,115,0,0,108,111,110,103,32,100,111,117,98,108,101,0,0,0,0,0,78,111,32,97,114,103,117,109,101,110,116,0,0,0,0,0,69,110,100,32,111,102,32,102,114,97,109,101,119,111,114,107,32,112,97,116,104,32,108,105,115,116,46,10,0,0,0,0,32,32,32,32,0,0,0,0,100,111,117,98,108,101,0,0,78,111,116,32,97,32,102,105,108,101,32,110,97,109,101,32,34,37,115,34,0,0,0,0,70,114,97,109,101,119,111,114,107,32,112,97,116,104,115,32,97,114,101,32,97,115,32,102,111,108,108,111,119,115,32,45,45,10,0,0,0,0,0,0,107,114,0,0,0,0,0,0,37,115,58,37,108,100,58,32,37,115,58,32,0,0,0,0,108,111,110,103,32,108,111,110,103,0,0,0,0,0,0,0,78,111,116,32,97,32,108,105,110,101,32,110,117,109,98,101,114,32,34,37,115,34,0,0,69,110,100,32,111,102,32,105,110,99,108,117,100,101,32,112,97,116,104,32,108,105,115,116,46,10,0,0,0,0,0,0,116,111,107,101,110,0,0,0,108,111,110,103,0,0,0,0,78,111,32,108,105,110,101,32,110,117,109,98,101,114,0,0,66,117,102,102,101,114,32,111,118,101,114,102,108,111,119,32,115,99,97,110,110,105,110,103,32,116,111,107,101,110,32,34,37,115,34,0,0,0,0,0,32,32,32,32,37,115,10,0,99,0,0,0,0,0,0,0,83,69,80,0,0,0,0,0,105,102,0,0,0,0,0,0,115,105,122,101,111,102,58,32,73,108,108,101,103,97,108,32,116,121,112,101,32,99,111,109,98,105,110,97,116,105,111,110,32,119,105,116,104,32,34,37,115,34,37,46,48,108,100,37,115,0,0,0,0,0,0,0,76,105,110,101,32,110,117,109,98,101,114,32,34,37,115,34,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,111,102,32,91,49,44,37,108,100,93,0,0,0,0,0,99,111,108,108,101,99,116,95,97,114,103,115,32,101,110,116,114,121,0,0,0,0,0,0,73,110,99,108,117,100,101,32,112,97,116,104,115,32,97,114,101,32,97,115,32,102,111,108,108,111,119,115,32,45,45,10,0,0,0,0,0,0,0,0,83,80,69,0,0,0,0,0,115,105,122,101,111,102,58,32,85,110,107,110,111,119,110,32,116,121,112,101,32,34,37,115,34,37,46,48,108,100,37,115,0,0,0,0,0,0,0,0,76,105,110,101,32,110,117,109,98,101,114,32,34,37,115,34,32,105,115,110,39,116,32,97,32,100,101,99,105,109,97,108,32,100,105,103,105,116,115,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,0,0,46,47,0,0,0,0,0,0,79,80,69,0,0,0,0,0,115,105,122,101,111,102,58,32,83,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,78,111,32,105,100,101,110,116,105,102,105,101,114,0,0,0,67,97,110,39,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,32,34,37,115,34,46,10,0,0,0,45,45,0,0,0,0,0,0,87,67,72,82,0,0,0,0,115,105,122,112,45,62,98,105,116,115,58,48,120,37,120,32,115,105,122,112,45,62,115,105,122,101,58,48,120,37,120,32,115,105,122,112,45,62,112,115,105,122,101,58,48,120,37,120,32,101,118,46,118,97,108,58,48,120,37,108,120,10,0,0,78,111,116,32,97,110,32,105,100,101,110,116,105,102,105,101,114,32,34,37,115,34,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,101,120,112,114,101,115,115,105,111,110,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,32,45,45,0,0,0,0,0,67,72,82,0,0,0,0,0,115,105,122,101,111,102,58,32,78,111,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,34,44,34,32,111,114,32,34,41,34,32,105,110,32,112,97,114,97,109,101,116,101,114,32,108,105,115,116,32,34,40,37,115,34,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,0,0,0,0,0,0,0,0,87,83,84,82,0,0,0,0,85,110,100,101,102,105,110,101,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,37,115,32,37,46,48,108,100,39,37,115,39,0,0,0,68,117,112,108,105,99,97,116,101,32,112,97,114,97,109,101,116,101,114,32,110,97,109,101,32,34,37,115,34,0,0,0,32,40,105,110,32,115,107,105,112,112,101,100,32,98,108,111,99,107,41,0,0,0,0,0,83,84,82,0,0,0,0,0,48,49,50,51,52,53,54,55,0,0,0,0,0,0,0,0,69,109,112,116,121,32,112,97,114,97,109,101,116,101,114,0,35,105,109,112,111,114,116,0,78,85,77,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,0,0,0,0,0,0,0,34,46,46,46,34,32,105,115,110,39,116,32,116,104,101,32,108,97,115,116,32,112,97,114,97,109,101,116,101,114,0,0,105,109,112,111,114,116,0,0,111,108,100,112,114,101,112,0,78,65,77,0,0,0,0,0,10,0,0,0,0,0,0,0,37,115,37,108,100,32,98,105,116,115,32,99,97,110,39,116,32,114,101,112,114,101,115,101,110,116,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,39,37,115,39,0,73,108,108,101,103,97,108,32,112,97,114,97,109,101,116,101,114,32,34,37,115,34,0,0,37,115,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,98,121,32,83,116,97,110,100,97,114,100,37,46,48,108,100,37,115,0,0,0,0,45,45,32,0,0,0,0,0,95,95,70,73,76,69,95,95,0,0,0,0,0,0,0,0,85,67,78,32,99,97,110,110,111,116,32,115,112,101,99,105,102,121,32,116,104,101,32,118,97,108,117,101,32,37,46,48,115,34,37,48,56,108,120,34,0,0,0,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,77,97,99,114,111,32,34,37,115,34,32,105,115,32,101,120,112,97,110,100,101,100,32,116,111,32,34,115,105,122,101,111,102,34,0,0,0,0,0,0,85,110,107,110,111,119,110,32,35,100,105,114,101,99,116,105,118,101,32,34,37,115,34,37,46,48,108,100,37,115,0,0,101,110,103,108,105,115,104,0,100,117,109,112,32,111,102,32,112,101,110,100,105,110,103,32,105,110,112,117,116,32,116,101,120,116,0,0,0,0,0,0,34,37,115,34,0,0,0,0,77,117,108,116,105,45,99,104,97,114,97,99,116,101,114,32,111,114,32,109,117,108,116,105,45,98,121,116,101,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,32,105,115,110,39,116,32,112,111,114,116,97,98,108,101,0,0,0,0,0,0,0,108,105,110,101,0,0,0,0,78,111,116,32,97,32,102,111,114,109,97,108,32,112,97,114,97,109,101,116,101,114,32,34,37,115,34,0,0,0,0,0,115,117,98,115,116,105,116,117,116,101,95,112,114,101,32,109,97,99,114,111,108,105,110,101,0,0,0,0,0,0,0,0,35,112,114,97,103,109,97,32,0,0,0,0,0,0,0,0,60,67,83,69,80,62,0,0,37,108,100,0,0,0,0,0,77,117,108,116,105,45,99,104,97,114,97,99,116,101,114,32,119,105,100,101,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,32,105,115,110,39,116,32,112,111,114,116,97,98,108,101,0,0,0,0,0,0,0,0,86,97,114,105,97,98,108,101].concat([32,97,114,103,117,109,101,110,116,32,109,97,99,114,111,32,105,115,32,100,101,102,105,110,101,100,0,0,0,0,0,0,95,95,115,101,116,108,111,99,97,108,101,0,0,0,0,0,60,84,83,69,80,62,0,0,76,105,110,101,32,110,117,109,98,101,114,32,37,46,48,115,34,37,108,100,34,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,73,110,116,101,103,101,114,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,111,102,32,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,78,111,32,116,111,107,101,110,32,97,102,116,101,114,32,35,35,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,101,110,100,95,100,101,98,117,103,0,0,0,0,0,0,0,60,94,37,99,62,0,0,0,83,116,114,105,110,103,32,108,105,116,101,114,97,108,32,108,111,110,103,101,114,32,116,104,97,110,32,37,46,48,115,37,108,100,32,98,121,116,101,115,32,37,115,0,0,0,0,0,87,105,100,101,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,111,102,32,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,0,0,0,34,37,115,34,32,119,105,116,104,111,117,116,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,34,46,46,46,34,0,0,0,0,0,0,0,0,32,111,110,116,111,32,118,97,108,117,101,32,115,116,97,99,107,91,37,100,93,10,0,0,100,101,98,117,103,0,0,0,60,83,82,67,62,0,0,0,78,111,116,32,97,32,118,97,108,105,100,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,32,37,115,0,0,0,73,110,116,101,103,101,114,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,35,35,32,97,102,116,101,114,32,35,35,0,0,0,0,0,118,97,114,32,102,115,32,61,32,114,101,113,117,105,114,101,40,39,102,115,39,41,59,32,70,83,46,109,107,100,105,114,40,39,47,102,115,39,41,59,32,70,83,46,109,111,117,110,116,40,78,79,68,69,70,83,44,32,123,32,114,111,111,116,58,32,39,46,39,32,125,44,32,39,47,102,115,39,41,59,0,0,0,0,0,0,0,0,112,111,112,95,109,97,99,114,111,0,0,0,0,0,0,0,60,83,82,67,37,100,62,0,99,104,101,99,107,105,110,103,32,103,101,110,101,114,97,116,101,100,32,116,111,107,101,110,0,0,0,0,0,0,0,0,87,105,100,101,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,78,111,32,116,111,107,101,110,32,98,101,102,111,114,101,32,35,35,0,0,0,0,0,0,112,117,115,104,95,109,97,99,114,111,0,0,0,0,0,0,60,82,84,95,69,78,68,62,0,0,0,0,0,0,0,0,78,111,116,32,97,32,118,97,108,105,100,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,116,111,107,101,110,32,34,37,115,34,0,0,0,0,67,97,110,39,116,32,117,115,101,32,116,104,101,32,99,104,97,114,97,99,116,101,114,32,37,46,48,115,48,120,37,48,50,108,120,0,0,0,0,0,78,111,32,115,112,97,99,101,32,98,101,116,119,101,101,110,32,109,97,99,114,111,32,110,97,109,101,32,34,37,115,34,32,97,110,100,32,114,101,112,108,45,116,101,120,116,0,0,119,97,114,110,105,110,103,0,35,0,0,0,0,0,0,0,32,40,101,120,112,97,110,100,105,110,103,32,97,114,103,91,37,100,93,41,0,0,0,0,101,118,97,108,95,110,117,109,32,114,101,116,117,114,110,115,32,0,0,0,0,0,0,0,77,97,99,114,111,32,119,105,116,104,32,109,117,108,116,105,112,108,101,32,35,35,32,111,112,101,114,97,116,111,114,115,32,105,115,110,39,116,32,112,111,114,116,97,98,108,101,0,112,114,101,112,114,111,99,101,115,115,101,100,0,0,0,0,111,108,100,0,0,0,0,0,35,35,0,0,0,0,0,0,82,101,115,99,97,110,110,105,110,103,32,109,97,99,114,111,32,34,37,115,34,32,109,111,114,101,32,116,104,97,110,32,37,108,100,32,116,105,109,101,115,32,97,116,32,34,37,115,34,0,0,0,0,0,0,0,67,97,110,39,116,32,117,115,101,32,97,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,32,37,115,0,0,0,77,97,99,114,111,32,119,105,116,104,32,109,105,120,105,110,103,32,111,102,32,35,35,32,97,110,100,32,35,32,111,112,101,114,97,116,111,114,115,32,105,115,110,39,116,32,112,111,114,116,97,98,108,101,0,0,35,112,114,97,103,109,97,32,77,67,80,80,32,112,114,101,112,114,111,99,101,115,115,101,100,10,0,0,0,0,0,0,60,77,65,71,73,67,62,0,114,101,115,99,97,110,32,101,120,105,116,0,0,0,0,0,101,118,97,108,95,99,104,97,114,32,114,101,116,117,114,110,115,32,0,0,0,0,0,0,34,37,115,34,32,115,104,111,117,108,100,110,39,116,32,98,101,32,117,110,100,101,102,105,110,101,100,0,0,0,0,0,115,105,122,101,111,102,0,0,112,114,101,112,114,111,99,101,115,115,0,0,0,0,0,0,60,65,82,71,95,69,78,68,62,0,0,0,0,0,0,0,101,110,0,0,0,0,0,0,82,101,112,108,97,99,101,109,101,110,116,32,116,101,120,116,32,34,37,115,34,32,111,102,32,109,97,99,114,111,32,37,46,48,108,100,34,37,115,34,32,105,110,118,111,108,118,101,100,32,115,117,98,115,101,113,117,101,110,116,32,116,101,120,116,0,0,0,0,0,0,0,67,97,110,39,116,32,117,115,101,32,97,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,0,0,0,0,0,0,0,101,110,100,97,115,109,0,0,34,37,115,34,32,119,97,115,110,39,116,32,100,101,102,105,110,101,100,0,0,0,0,0,114,101,112,108,97,99,101,95,112,114,101,32,101,120,105,116,0,0,0,0,0,0,0,0,112,117,116,95,100,101,102,105,110,101,115,0,0,0,0,0,60,65,82,71,95,69,78,68,37,100,45,37,100,62,0,0,114,101,115,99,97,110,32,101,110,116,114,121,0,0,0,0,44,32,101,118,97,108,117,97,116,101,100,32,116,111,32,48,0,0,0,0,0,0,0,0,47,42,42,47,0,0,0,0,77,67,80,80,0,0,0,0,60,77,65,67,37,100,58,65,82,71,37,100,62,0,0,0,114,101,115,99,97,110,95,108,101,118,101,108,45,45,37,100,32,40,37,115,41,32,0,0,85,110,100,101,102,105,110,101,100,32,115,121,109,98,111,108,32,34,37,115,34,37,46,48,108,100,37,115,0,0,0,0,35,0,0,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,105,110,112,117,116,32,102,105,108,101,32,34,37,115,34,46,10,0,0,0,0,111,110,99,101,0,0,0,0,60,77,65,67,95,69,78,68,62,0,0,0,0,0,0,0,114,101,112,108,97,99,101,32,101,120,105,116,0,0,0,0,115,105,122,101,111,102,0,0,35,35,0,0,0,0,0,0,112,117,115,104,105,110,103,32,0,0,0,0,0,0,0,0,78,111,32,115,117,98,45,100,105,114,101,99,116,105,118,101,0,0,0,0,0,0,0,0,60,77,65,67,95,69,78,68,37,100,62,0,0,0,0,0,115,117,98,115,116,105,116,117,116,101,32,101,120,105,116,0,102,97,108,115,101,0,0,0,47,42,109,37,115,42,47,10,0,0,0,0,0,0,0,0,35,108,105,110,101,32,0,0,60,77,65,67,37,100,62,0,115,117,98,115,116,105,116,117,116,101,32,101,110,116,114,121,0,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,47,42,32,67,117,114,114,101,110,116,108,121,32,100,101,102,105,110,101,100,32,109,97,99,114,111,115,46,32,42,47,10,0,0,0,0,0,0,0,0,37,115,37,108,100,0,0,0,60,37,100,62,0,0,0,0,112,114,101,115,99,97,110,32,101,120,105,116,0,0,0,0,66,97,100,32,100,101,102,105,110,101,100,32,115,121,110,116,97,120,58,32,37,115,0,0,32,9,47,42,32,37,115,58,37,108,100,9,42,47,0,0,35,108,105,110,101,32,37,108,100,0,0,0,0,0,0,0,32,61,62,32,0,0,0,0,112,114,101,115,99,97,110,32,101,110,116,114,121,0,0,0,47,42,37,115,42,47,0,0,32,42,47,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,110,101,115,116,105,110,103,32,111,102,32,35,105,110,99,108,117,100,101,0,0,0,112,111,115,116,115,116,100,0,32,40,37,115,41,0,0,0,40,37,115,41,0,0,0,0,100,101,102,105,110,101,100,0,40,41,0,0,0,0,0,0,78,111,116,32,97,32,104,101,97,100,101,114,32,110,97,109,101,32,34,37,115,34,0,0,119,97,114,110,105,110,103,0,60,97,114,103,62,0,0,0,119,97,114,110,105,110,103,58,32,45,37,99,37,115,32,111,112,116,105,111,110,32,105,115,32,105,103,110,111,114,101,100,10,0,0,0,0,0,0,0,32,40,105,110,32,110,111,110,45,101,118,97,108,117,97,116,101,100,32,115,117,98,45,101,120,112,114,101,115,115,105,111,110,41,0,0,0,0,0,0,40,37,115,41,0,0,0,0,77,97,99,114,111,32,34,37,115,34,32,105,115,32,101,120,112,97,110,100,101,100,32,116,111,32,34,100,101,102,105,110,101,100,34,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,105,110,99,108,117,100,101,32,102,105,108,101,32,34,37,115,34,0,0,0,0,101,114,114,111,114,0,0,0,108,97,116,105,110,0,0,0,101,110,97,98,108,101,100,32,114,101,45,101,120,112,97,110,115,105,111,110,0,0,0,0,34,37,115,34,32,111,102,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,115,110,39,116,32,112,111,114,116,97,98,108,101,37,46,48,108,100,37,115,0,0,0,40,37,115,37,115,41,0,0,97,115,109,0,0,0,0,0,82,101,99,117,114,115,105,118,101,32,109,97,99,114,111,32,100,101,102,105,110,105,116,105,111,110,32,111,102,32,34,37,115,34,0,0,0,0,0,0,78,111,32,104,101,97,100,101,114,32,110,97,109,101,0,0,102,97,116,97,108,32,101,114,114,111,114,0,0,0,0,0,79,108,100,32,115,116,121,108,101,32,112,114,101,100,101,102,105,110,101,100,32,109,97,99,114,111,32,34,37,115,34,32,105,115,32,117,115,101,100,0,66,117,103,58,32,73,108,108,101,103,97,108,32,111,112,101,114,97,116,111,114,32,34,37,115,34,32,105,110,32,101,118,97,108,95,115,105,103,110,101,100,40,41,0,0,0,0,0,84,111,111,32,108,111,110,103,32,100,101,112,101,110,100,101,110,99,121,32,108,105,110,101,58,32,37,115,0,0,0,0,97,102,116,101,114,32,117,110,103,101,116,0,0,0,0,0,84,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,109,97,99,114,111,115,32,105,110,32,116,114,97,99,105,110,103,32,37,115,0,0,0,0,32,111,102,32,40,117,110,115,105,103,110,101,100,41,32,108,111,110,103,0,0,0,0,0,47,42,32,0,0,0,0,0,114,0,0,0,0,0,0,0,32,92,10,32,0,0,0,0,66,117,103,58,32,84,111,111,32,109,117,99,104,32,112,117,115,104,98,97,99,107,0,0,47,42,37,115,42,47,0,0,82,101,115,117,108,116,32,111,102,32,34,37,115,34,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,37,46,48,108,100,37,115,0,0,0,37,115,35,100,101,102,105,110,101,32,37,115,0,0,0,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,99,111,110,115,116,97,110,116,115,32,115,116,97,99,107,101,100,32,97,116,32,37,115,0,0,0,0,0,0,0,66,117,103,58,32,117,110,103,101,116,95,99,104,40,41,32,106,117,115,116,32,97,102,116,101,114,32,115,99,97,110,95,116,111,107,101,110,40,41,0,114,101,112,108,97,99,101,32,101,110,116,114,121,0,0,0,66,117,103,58,32,73,108,108,101,103,97,108,32,111,112,101,114,97,116,111,114,32,34,37,115,34,32,105,110,32,101,118,97,108,95,117,110,115,105,103,110,101,100,40,41,0,0,0,37,115,32,34,37,115,34,32,100,101,102,105,110,101,100,32,97,115,58,32,0,0,0,0,84,111,111,32,108,111,110,103,32,100,101,112,101,110,100,101,110,99,121,32,108,105,110,101,0,0,0,0,0,0,0,0,37,46,48,115,37,108,100,32,100,105,103,114,97,112,104,40,115,41,32,99,111,110,118,101,114,116,101,100,0,0,0,0,117,116,102,0,0,0,0,0,83,104,105,102,116,32,99,111,117,110,116,32,37,46,48,115,34,37,108,100,34,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,98,105,116,32,99,111,117,110,116,32,111,102,32,108,111,110,103,37,115,0,0,0,0,0,0,0,0,47,42,117,110,100,101,102,32,37,108,100,42,47,47,42,37,115,42,47,10,0,0,0,0,10,10,0,0,0,0,0,0,37,58,60,0,0,0,0,0,117,116,102,56,0,0,0,0,73,108,108,101,103,97,108,32,115,104,105,102,116,32,99,111,117,110,116,32,37,46,48,115,34,37,108,100,34,37,115,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,109,97,99,114,111,115,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,0,76,65,78,71,0,0,0,0,37,46,48,115,37,108,100,32,116,114,105,103,114,97,112,104,40,115,41,32,99,111,110,118,101,114,116,101,100,0,0,0,106,105,115,0,0,0,0,0,60,0,0,0,0,0,0,0,44,32,118,50,32,61,32,0,66,117,103,58,32,73,108,108,101,103,97,108,32,109,97,99,114,111,32,105,110,115,116,97,108,108,97,116,105,111,110,32,111,102,32,34,37,115,34,0,76,67,95,67,84,89,80,69,0,0,0,0,0,0,0,0,112,111,115,116,0,0,0,0,61,40,47,41,39,60,33,62,45,0,35,91,92,93,94,123,124,125,126,0,0,0,0,0,105,115,111,50,48,50,50,106,112,49,0,0,0,0,0,0,33,0,0,0,0,0,0,0,44,32,118,49,32,61,32,0,34,37,115,34,32,105,115,32,100,101,102,105,110,101,100,32,97,115,32,109,97,99,114,111,0,0,0,0,0,0,0,0,76,67,95,65,76,76,0,0,114,0,0,0,0,0,0,0,105,115,111,50,48,50,50,106,112,0,0,0,0,0,0,0,47,42,37,115,37,115,58,37,100,45,37,100,0,0,0,0,117,110,97,114,121,0,0,0,47,42,109,37,115,32,37,108,100,58,37,100,45,37,108,100,58,37,100,42,47,10,0,0,100,101,102,105,110,101,100,0,119,0,0,0,0,0,0,0,103,101,116,32,101,110,116,114,97,110,99,101,0,0,0,0,105,115,111,56,56,53,57,0,101,117,99,116,119,0,0,0,47,42,62,42,47,0,0,0,98,105,110,97,114,121,0,0,32,32,32,32,112,114,101,118,105,111,117,115,108,121,32,109,97,99,114,111,0,0,0,0,32,40,105,110,32,115,107,105,112,112,101,100,32,98,108,111,99,107,41,0,0,0,0,0,114,101,112,108,97,99,101,95,112,114,101,32,101,110,116,114,121,0,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,45,85,32,111,112,116,105,111,110,115,46,10,0,0,0,78,85,76,76,0,0,0,0,99,110,98,105,103,53,0,0,47,42,37,115,62,42,47,0,37,115,32,111,112,32,37,115,0,0,0,0,0,0,0,0,84,104,101,32,109,97,99,114,111,32,105,115,32,114,101,100,101,102,105,110,101,100,0,0,110,111,45,109,109,120,0,0,103,101,116,95,99,104,40,37,115,41,32,39,37,99,39,32,108,105,110,101,32,37,108,100,44,32,98,112,116,114,32,61,32,37,100,44,32,98,117,102,102,101,114,0,0,0,0,0,98,105,103,53,0,0,0,0,42,47,0,0,0,0,0,0,78,101,103,97,116,105,118,101,32,118,97,108,117,101,32,34,37,106,100,34,32,105,115,32,99,111,110,118,101,114,116,101,100,32,116,111,32,112,111,115,105,116,105,118,101,32,34,37,106,117,34,37,37,115,0,0,34,37,115,34,32,115,104,111,117,108,100,110,39,116,32,98,101,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,120,111,114,95,101,113,0,0,98,105,103,102,105,118,101,0,32,37,108,100,58,37,100,45,37,108,100,58,37,100,0,0,37,115,68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,37,46,48,108,100,37,115,0,0,0,0,0,0,0,95,95,86,65,95,65,82,71,83,95,95,0,0,0,0,0,95,95,77,77,88,95,95,0,120,111,114,0,0,0,0,0,77,105,115,112,108,97,99,101,100,32,99,111,110,115,116,97,110,116,32,34,37,115,34,0,99,104,116,0,0,0,0,0,47,42,60,37,115,0,0,0,117,110,0,0,0,0,0,0,100,101,102,105,110,101,100,0,95,80,114,97,103,109,97,32,111,112,101,114,97,116,111,114,32,102,111,117,110,100,32,105,110,32,100,105,114,101,99,116,105,118,101,32,108,105,110,101,0,0,0,0,0,0,0,0,109,109,120,0,0,0,0,0,111,114,95,101,113,0,0,0,99,104,105,110,101,115,101,116,114,97,100,105,116,105,111,110,97,108,0,0,0,0,0,0,101,120,112,97,110,100,95,115,116,100,32,101,120,105,116,0,37,115,40,37,115,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,41,32,48,120,37,48,49,54,106,120,0,34,37,115,34,32,115,104,111,117,108,100,110,39,116,32,98,101,32,114,101,100,101,102,105,110,101,100,0,0,0,0,0,51,50,0,0,0,0,0,0,111,114,0,0,0,0,0,0,109,115,107,97,110,106,105,0,77,97,99,114,111,32,34,37,115,34,32,110,101,101,100,115,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,65,108,114,101,97,100,121,32,115,101,101,110,32,35,101,108,115,101,32,97,116,32,108,105,110,101,32,37,46,48,115,37,108,100,0,0,0,0,0,0,112,112,99,54,52,0,0,0,110,111,116,95,101,113,0,0,115,104,105,102,116,106,105,115,0,0,0,0,0,0,0,0,69,109,112,116,121,32,97,114,103,117,109,101,110,116,32,105,110,32,109,97,99,114,111,32,99,97,108,108,32,34,37,115,34,0,0,0,0,0,0,0,118,97,108,117,101,91,37,100,93,46,118,97,108,32,61,32,0,0,0,0,0,0,0,0,78,111,116,32,105,110,32,97,32,35,105,102,32,40,35,105,102,100,101,102,41,32,115,101,99,116,105,111,110,0,0,0,112,112,99,0,0,0,0,0,47,42,101,110,100,105,102,32,37,108,100,42,47,10,0,0,119,97,114,110,105,110,103,58,32,45,43,32,111,112,116,105,111,110,32,105,115,32,105,103,110,111,114,101,100,10,0,0,110,111,116,0,0,0,0,0,115,106,105,115,0,0,0,0,32,91,37,50,100,93,32,37,50,100,32,37,48,52,111,32,32,32,32,37,100,32,37,115,10,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,120,56,54,95,54,52,0,0,47,42,101,108,115,101,32,37,108,100,58,37,99,42,47,10,0,0,0,0,0,0,0,0,99,111,109,112,108,0,0,0,106,112,110,0,0,0,0,0,73,110,100,101,120,32,111,112,32,112,114,101,99,32,115,107,105,112,32,110,97,109,101,32,45,45,32,111,112,32,115,116,97,99,107,32,97,116,32,37,115,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,95,95,77,67,80,80,0,0,46,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,32,32,32,32,109,97,99,114,111,0,0,0,0,0,0,0,32,86,46,0,0,0,0,0,71,67,67,0,0,0,0,0,85,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58,32,37,115,37,46,48,108,100,37,46,48,115,0,0,0,99,111,109,112,105,108,101,100,32,98,121,32,0,0,0,0,105,51,56,54,0,0,0,0,99,111,109,112,105,108,101,114,45,105,110,100,101,112,101,110,100,101,110,116,45,98,117,105,108,100,32,0,0,0,0,0,108,105,110,101,32,37,108,100,58,32,37,115,0,0,0,0,41,32,0,0,0,0,0,0,98,105,116,111,114,0,0,0,106,97,112,97,110,101,115,101,0,0,0,0,0,0,0,0,50,48,48,56,47,49,49,0,65,115,121,109,109,101,116,114,121,32,111,102,32,109,97,99,114,111,32,105,110,102,32,102,111,117,110,100,58,32,115,116,97,114,116,32,37,100,44,32,101,110,100,32,37,100,32,97,116,32,108,105,110,101,58,37,100,10,0,0,0,0,0,0,76,76,32,115,117,102,102,105,120,32,105,115,32,117,115,101,100,32,105,110,32,111,116,104,101,114,32,116,104,97,110,32,67,57,57,32,109,111,100,101,32,34,37,115,34,37,46,48,108,100,37,115,0,0,0,0,32,40,0,0,0,0,0,0,50,46,55,46,50,0,0,0,95,95,65,80,80,76,69,95,95,0,0,0,0,0,0,0,77,67,80,80,32,86,46,0,73,110,99,111,114,114,101,99,116,32,111,112,116,105,111,110,32,45,37,99,37,115,10,0,10,70,111,114,32,102,117,114,116,104,101,114,32,100,101,116,97,105,108,115,32,115,101,101,32,109,99,112,112,45,109,97,110,117,97,108,46,104,116,109,108,46,10,0,0,0,0,0,73,108,108,101,103,97,108,32,35,100,105,114,101,99,116,105,118,101,32,34,37,115,37,46,48,108,100,37,115,34,0,0,66,117,102,102,101,114,32,111,118,101,114,102,108,111,119,32,101,120,112,97,110,100,105,110,103,32,109,97,99,114,111,32,34,37,115,34,32,97,116,32,37,46,48,108,100,34,37,115,34,0,0,0,0,0,0,0,45,107,32,32,32,32,32,32,32,32,32,32,75,101,101,112,32,119,104,105,116,101,32,115,112,97,99,101,115,32,111,102,32,105,110,112,117,116,32,108,105,110,101,115,32,97,115,32,116,104,101,121,32,97,114,101,46,10,0,0,0,0,0,0,45,97,32,32,32,32,32,32,32,32,32,32,80,114,111,99,101,115,115,32,34,97,115,115,101,109,98,108,101,114,34,32,115,111,117,114,99,101,46,10,0,0,0,0,0,0,0,0,54,52,0,0,0,0,0,0,10,79,112,116,105,111,110,115,32,97,118,97,105,108,97,98,108,101,32,119,105,116,104,32,45,64,115,116,100,32,40,100,101,102,97,117,108,116,41,44,32,45,64,107,114,32,111,114,32,45,64,111,108,100,112,114,101,112,32,111,112,116,105,111,110,115,58,10,0,0,0,0,70,65,76,83,69,0,0,0,45,75,32,32,32,32,32,32,32,32,32,32,79,117,116,112,117,116,32,109,97,99,114,111,32,97,110,110,111,116,97,116,105,111,110,115,32,101,109,98,101,100,100,105,110,103,32,105,110,32,99,111,109,109,101,110,116,115,46,10,0,0,0,0,98,105,116,97,110,100,0,0,101,117,99,107,114,0,0,0,45,51,32,32,32,32,32,32,32,32,32,32,69,110,97,98,108,101,32,116,114,105,103,114,97,112,104,115,46,10,0,0,67,111,110,115,116,97,110,116,32,34,37,115,34,37,46,48,108,100,37,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,111,102,32,40,117,110,115,105,103,110,101,100,41,32,108,111,110,103,0,45,64,99,111,109,112,97,116,32,32,32,32,69,120,112,97,110,100,32,114,101,99,117,114,115,105,118,101,32,109,97,99,114,111,32,109,111,114,101,32,116,104,97,110,32,83,116,97,110,100,97,114,100,46,10,0,10,79,112,116,105,111,110,115,32,97,118,97,105,108,97,98,108,101,32,119,105,116,104,32,111,110,108,121,32,45,64,115,116,100,32,40,100,101,102,97,117,108,116,41,32,111,112,116,105,111,110,58,10,0,0,0,95,95,117,110,105,120,95,95,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,67,43,43,32,119,105,116,104,32,45,86,49,57,57,57,48,49,76,32,115,112,101,99,105,102,105,101,115,32,67,57,57,32,99,111,109,112,97,116,105,98,108,101,32,115,112,101,99,115,46,10,0,32,32,32,32,32,32,32,32,32,32,32,32,67,32,119,105,116,104,32,45,86,49,57,57,57,48,49,76,32,115,112,101,99,105,102,105,101,115,32,67,57,57,32,115,112,101,99,115,46,10,0,0,0,0,0,0,45,86,32,60,110,62,32,32,32,32,32,32,82,101,100,101,102,105,110,101,32,95,95,83,84,68,67,95,86,69,82,83,73,79,78,95,95,32,111,114,32,95,95,99,112,108,117,115,112,108,117,115,32,116,111,32,60,110,62,46,10,0,0,0,45,83,32,60,110,62,32,32,32,32,32,32,82,101,100,101,102,105,110,101,32,95,95,83,84,68,67,95,95,32,116,111,32,60,110,62,44,32,117,110,100,101,102,105,110,101,32,111,108,100,32,115,116,121,108,101,32,109,97,99,114,111,115,46,10,0,0,0,0,0,0,0,45,104,32,60,110,62,32,32,32,32,32,32,82,101,45,100,101,102,105,110,101,32,116,104,101,32,112,114,101,45,100,101,102,105,110,101,100,32,109,97,99,114,111,32,95,95,83,84,68,67,95,72,79,83,84,69,68,95,95,32,97,115,32,60,110,62,46,10,0,0,0,0,70,0,0,0,0,0,0,0,45,50,32,32,32,32,32,32,32,32,32,32,69,110,97,98,108,101,32,100,105,103,114,97,112,104,115,46,10,0,0,0,84,82,85,69,0,0,0,0,45,43,32,32,32,32,32,32,32,32,32,32,80,114,111,99,101,115,115,32,67,43,43,32,115,111,117,114,99,101,46,10,0,0,0,0,0,0,0,0,97,110,100,95,101,113,0,0,119,97,110,115,117,110,103,0,10,79,112,116,105,111,110,115,32,97,118,97,105,108,97,98,108,101,32,119,105,116,104,32,45,64,115,116,100,32,40,100,101,102,97,117,108,116,41,32,111,114,32,45,64,112,111,115,116,115,116,100,32,111,112,116,105,111,110,115,58,10,0,0,65,115,121,109,109,101,116,114,121,32,111,102,32,97,114,103,32,105,110,102,32,102,111,117,110,100,58,32,115,116,97,114,116,32,37,100,44,32,101,110,100,32,37,100,32,97,116,32,108,105,110,101,58,37,100,10,0,0,0,0,0,0,0,0,67,111,110,115,116,97,110,116,32,34,37,115,34,37,46,48,108,100,37,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,45,122,32,32,32,32,32,32,32,32,32,32,68,111,110,39,116,32,111,117,116,112,117,116,32,116,104,101,32,105,110,99,108,117,100,101,100,32,102,105,108,101,44,32,111,110,108,121,32,100,101,102,105,110,105,110,103,32,109,97,99,114,111,115,46,10,0,0,0,0,0,0,45,87,32,60,108,101,118,101,108,62,32,32,83,101,116,32,119,97,114,110,105,110,103,32,108,101,118,101,108,32,116,111,32,60,108,101,118,101,108,62,32,40,79,82,32,111,102,32,123,48,44,49,44,50,44,52,44,56,44,49,54,125,44,32,100,101,102,97,117,108,116,58,49,41,46,10,0,0,0,0,95,95,117,110,105,120,0,0,40,112,114,101,100,101,102,105,110,101,100,41,0,0,0,0,45,118,32,32,32,32,32,32,32,32,32,32,83,104,111,119,32,118,101,114,115,105,111,110,32,97,110,100,32,105,110,99,108,117,100,101,32,100,105,114,101,99,116,111,114,105,101,115,32,111,102,32,109,99,112,112,46,10,0,0,0,0,0,0,45,85,32,60,109,97,99,114,111,62,32,32,85,110,100,101,102,105,110,101,32,60,109,97,99,114,111,62,46,10,0,0,45,81,32,32,32,32,32,32,32,32,32,32,79,117,116,112,117,116,32,100,105,97,103,110,111,115,116,105,99,115,32,116,111,32,34,109,99,112,112,46,101,114,114,34,32,40,100,101,102,97,117,108,116,58,115,116,100,101,114,114,41,46,10,0,45,80,32,32,32,32,32,32,32,32,32,32,68,111,110,39,116,32,111,117,116,112,117,116,32,35,108,105,110,101,32,108,105,110,101,115,46,10,0,0,45,111,32,60,102,105,108,101,62,32,32,32,79,117,116,112,117,116,32,116,111,32,60,102,105,108,101,62,46,10,0,0,84,0,0,0,0,0,0,0,45,78,32,32,32,32,32,32,32,32,32,32,68,111,110,39,116,32,112,114,101,100,101,102,105,110,101,32,97,110,121,32,110,111,110,45,115,116,97,110,100,97,114,100,32,109,97,99,114,111,115,46,10,0,0,0,35,105,102,32,40,35,101,108,105,102,44,32,35,105,102,100,101,102,44,32,35,105,102,110,100,101,102,41,32,101,118,97,108,117,97,116,101,32,116,111,32,37,115,46,10,0,0,0,45,109,54,52,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,116,97,114,103,101,116,32,67,80,85,32,102,114,111,109,32,105,51,56,54,44,32,112,112,99,32,116,111,32,120,56,54,95,54,52,44,32,112,112,99,54,52,44,32,114,101,115,112,101,99,116,105,118,101,108,121,46,10,0,0,0,97,110,100,0,0,0,0,0,107,115,120,49,48,48,49,0,45,109,51,50,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,116,97,114,103,101,116,32,67,80,85,32,102,114,111,109,32,120,56,54,95,54,52,44,32,112,112,99,54,52,32,116,111,32,105,51,56,54,44,32,112,112,99,44,32,114,101,115,112,101,99,116,105,118,101,108,121,46,10,0,0,0,78,111,116,32,97,110,32,105,110,116,101,103,101,114,32,34,37,115,34,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,79,117,116,112,117,116,32,115,111,117,114,99,101,32,102,105,108,101,32,100,101,112,101,110,100,101,110,99,121,32,108,105,110,101,32,102,111,114,32,109,97,107,101,102,105,108,101,46,10,0,0,0,45,77,44,32,45,77,77,44,32,45,77,68,44,32,45,77,77,68,44,32,45,77,80,44,32,45,77,81,32,116,97,114,103,101,116,44,32,45,77,84,32,116,97,114,103,101,116,44,32,45,77,70,32,102,105,108,101,10,0,0,0,0,0,0,49,0,0,0,0,0,0,0,83,116,97,99,107,32,97,102,116,101,114,32,101,118,97,108,117,97,116,105,111,110,10,0,45,106,32,32,32,32,32,32,32,32,32,32,68,111,110,39,116,32,111,117,116,112,117,116,32,116,104,101,32,115,111,117,114,99,101,32,108,105,110,101,32,105,110,32,100,105,97,103,110,111,115,116,105,99,115,46,10,0,0,0,0,0,0,0,45,73,45,32,32,32,32,32,32,32,32,32,85,110,115,101,116,32,115,121,115,116,101,109,32,111,114,32,115,105,116,101,32,115,112,101,99,105,102,105,99,32,105,110,99,108,117,100,101,32,100,105,114,101,99,116,111,114,105,101,115,46,10,0,45,73,32,60,100,105,114,101,99,116,111,114,121,62,32,32,32,32,32,32,65,100,100,32,60,100,105,114,101,99,116,111,114,121,62,32,116,111,32,116,104,101,32,35,105,110,99,108,117,100,101,32,115,101,97,114,99,104,32,108,105,115,116,46,10,0,0,0,0,0,0,0,45,70,32,60,102,114,97,109,101,119,111,114,107,62,32,32,32,32,32,32,65,100,100,32,60,102,114,97,109,101,119,111,114,107,62,32,116,111,32,116,111,112,32,111,102,32,102,114,97,109,101,119,111,114,107,32,100,105,114,101,99,116,111,114,121,32,108,105,115,116,46,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,101,117,99,95,106,112,44,32,103,98,50,51,49,50,44,32,107,115,99,53,54,48,49,44,32,98,105,103,53,44,32,115,106,105,115,44,32,105,115,111,50,48,50,50,95,106,112,44,32,117,116,102,56,46,10,0,0,0,0,0,81,0,0,0,0,0,0,0,45,101,32,60,101,110,99,111,100,105,110,103,62,32,32,32,67,104,97,110,103,101,32,116,104,101,32,100,101,102,97,117,108,116,32,109,117,108,116,105,45,98,121,116,101,32,99,104,97,114,97,99,116,101,114,32,101,110,99,111,100,105,110,103,32,116,111,32,111,110,101,32,111,102,58,10,0,0,0,0,112,114,97,103,109,97,0,0,45,68,32,60,109,97,99,114,111,40,97,114,103,115,41,62,91,61,60,114,101,112,108,97,99,101,62,93,32,32,32,32,68,101,102,105,110,101,32,60,109,97,99,114,111,40,97,114,103,115,41,62,32,97,115,32,60,114,101,112,108,97,99,101,62,46,10,0,0,0,0,0,81,117,111,116,97,116,105,111,110,32,108,111,110,103,101,114,32,116,104,97,110,32,37,46,48,115,37,108,100,32,98,121,116,101,115,0,0,0,0,0,45,68,32,60,109,97,99,114,111,62,91,61,60,118,97,108,117,101,62,93,32,32,32,32,68,101,102,105,110,101,32,60,109,97,99,114,111,62,32,97,115,32,60,118,97,108,117,101,62,32,40,100,101,102,97,117,108,116,58,49,41,46,10,0,107,115,99,53,54,48,49,0,111,112,32,61,32,37,115,44,32,111,112,100,111,112,101,32,61,32,37,48,52,111,44,32,98,105,110,111,112,32,61,32,37,100,44,32,115,107,105,112,32,61,32,37,100,10,0,0,45,67,32,32,32,32,32,32,32,32,32,32,79,117,116,112,117,116,32,97,108,115,111,32,99,111,109,109,101,110,116,115,46,10,0,0,0,0,0,0,32,32,32,32,45,64,111,108,100,112,114,101,112,44,32,45,64,111,108,100,32,32,32,32,39,111,108,100,95,112,114,101,112,114,111,99,101,115,115,111,114,39,32,109,111,100,101,32,40,105,46,101,46,32,39,82,101,105,115,101,114,32,109,111,100,101,108,39,32,99,112,112,41,46,10,0,0,0,0,0,117,110,105,120,0,0,0,0,83,116,97,99,107,32,98,101,102,111,114,101,32,101,118,97,108,117,97,116,105,111,110,32,111,102,32,37,115,10,0,0,32,32,32,32,45,64,107,114,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,75,38,82,32,49,115,116,32,109,111,100,101,46,10,0,0,32,32,32,32,45,64,112,111,115,116,115,116,100,44,32,45,64,112,111,115,116,32,32,32,115,112,101,99,105,97,108,32,39,112,111,115,116,45,83,116,97,110,100,97,114,100,39,32,109,111,100,101,46,10,0,0,32,32,32,32,45,64,115,116,100,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,116,97,110,100,97,114,100,32,99,111,110,102,111,114,109,105,110,103,32,109,111,100,101,46,32,40,100,101,102,97,117,108,116,41,10,0,0,0,0,45,64,77,79,68,69,32,32,32,32,32,32,83,112,101,99,105,102,121,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,109,111,100,101,46,32,77,79,68,69,32,115,104,111,117,108,100,32,98,101,32,111,110,101,32,111,102,32,116,104,101,115,101,32,52,58,10,0,10,67,111,109,109,111,110,108,121,32,117,115,101,100,32,111,112,116,105,111,110,115,58,10,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,32,32,32,32,60,105,110,102,105,108,101,62,32,100,101,102,97,117,108,116,115,32,116,111,32,115,116,100,105,110,32,97,110,100,32,60,111,117,116,102,105,108,101,62,32,100,101,102,97,117,108,116,115,32,116,111,32,115,116,100,111,117,116,46,10,0,0,0,0,0,0,0,101,114,114,111,114,0,0,0,32,91,45,60,111,112,116,115,62,32,91,45,60,111,112,116,115,62,93,93,32,91,60,105,110,102,105,108,101,62,32,91,45,60,111,112,116,115,62,93,32,91,60,111,117,116,102,105,108,101,62,93,32,91,45,60,111,112,116,115,62,93,93,10,0,0,0,0,0,0,0,0,72,101,97,100,101,114,45,110,97,109,101,32,101,110,99,108,111,115,101,100,32,98,121,32,60,44,32,62,32,105,115,32,97,110,32,111,98,115,111,108,101,115,99,101,110,116,32,102,101,97,116,117,114,101,32,37,115,0,0,0,0,0,0,0,107,111,114,0,0,0,0,0,109,99,112,112,0,0,0,0,85,115,97,103,101,58,32,32,0,0,0,0,0,0,0,0,66,117,103,58,32,84,111,111,32,108,111,110,103,32,111,112,116,105,111,110,32,108,105,115,116,0,0,0,0,0,0,0,79,112,101,114,97,110,100,32,111,102,32,95,80,114,97,103,109,97,40,41,32,105,115,32,110,111,116,32,97,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,0,0,0,77,105,115,112,108,97,99,101,100,32,34,58,34,44,32,112,114,101,118,105,111,117,115,32,111,112,101,114,97,116,111,114,32,105,115,32,34,37,115,34,0,0,0,0,0,0,0,0,50,51,43,64,58,101,58,104,58,106,107,110,58,111,58,118,122,67,68,58,73,58,75,77,58,78,80,81,83,58,85,58,86,58,87,58,0,0,0,0,70,58,45,58,0,0,0,0,109,58,0,0,0,0,0,0,109,97,99,114,111,98,117,102,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,119,97,114,110,105,110,103,32,108,101,118,101,108,32,111,112,116,105,111,110,32,34,37,115,34,10,0,0,0,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,111,112,116,105,111,110,115,32,97,114,101,32,115,112,101,99,105,102,105,101,100,46,10,0,0,0,0,77,68,0,0,0,0,0,0,68,105,115,97,98,108,101,100,32,45,75,32,111,112,116,105,111,110,46,10,0,0,0,0,95,95,112,111,119,101,114,112,99,54,52,95,95,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,104,101,97,100,101,114,32,110,97,109,101,32,37,115,37,46,48,108,100,37,115,0,0,0,0,0,0,107,111,114,101,97,110,0,0,95,95,112,112,99,54,52,95,95,0,0,0,0,0,0,0,95,95,112,111,119,101,114,112,99,95,95,0,0,0,0,0,95,95,112,112,99,95,95,0,105,109,112,111,114,116,0,0,77,105,115,115,105,110,103,32,34,41,34,0,0,0,0,0,95,95,97,109,100,54,52,95,95,0,0,0,0,0,0,0,95,95,120,56,54,95,54,52,95,95,0,0,0,0,0,0,95,95,105,51,56,54,95,95,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,95,95,84,73,77,69,95,95,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,34,37,46,56,115,34,0,0,105,110,99,108,117,100,101,0,95,95,68,65,84,69,95,95,0,0,0,0,0,0,0,0,44,32,99,97,116,101,110,97,116,101,100,32,116,111,32,116,104,101,32,110,101,120,116,32,108,105,110,101,0,0,0,0,101,117,99,99,110,0,0,0,34,37,46,51,115,32,37,99,37,99,32,37,46,52,115,34,0,0,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,110,97,109,101,115,32,105,110,32,97,114,103,117,109,101,110,116,115,32,116,114,97,99,105,110,103,32,37,115,0,0,95,95,70,73,76,69,95,95,0,0,0,0,0,0,0,0,45,49,50,51,52,53,54,55,56,57,48,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,110,101,115,116,105,110,103,32,111,102,32,35,105,102,32,40,35,105,102,100,101,102,41,32,115,101,99,116,105,111,110,115,37,115,0,0,0,0,69,120,99,101,115,115,105,118,101,32,34,41,34,0,0,0,95,95,76,73,78,69,95,95,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,37,99,37,115,32,40,32,37,99,37,99,32,41,0,0,0,95,80,114,97,103,109,97,0,95,95,83,84,68,67,95,86,69,82,83,73,79,78,95,95,0,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,95,95,99,112,108,117,115,112,108,117,115,0,0,0,0,0,37,99,37,99,0,0,0,0,37,108,100,76,0,0,0,0,84,111,111,32,108,111,110,103,32,113,117,111,116,97,116,105,111,110,0,0,0,0,0,0,117,110,100,101,102,0,0,0,99,110,103,98,0,0,0,0,69,120,99,101,115,115,105,118,101,32,102,105,108,101,32,97,114,103,117,109,101,110,116,32,34,37,115,34,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,97,99,114,111,32,99,97,108,108,32,34,37,115,34,0,0,0,0,73,78,67,76,85,68,69,0,67,80,76,85,83,95,73,78,67,76,85,68,69,0,0,0,84,111,111,32,108,111,110,103,32,116,111,107,101,110,32,37,115,0,0,0,0,0,0,0,32,97,116,32,37,115,10,0,47,117,115,114,47,105,110,99,108,117,100,101,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,105,110,99,108,117,100,101,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,100,105,114,101,99,116,111,114,121,32,34,37,115,34,32,105,115,32,105,103,110,111,114,101,100,10,0,0,0,0,78,111,114,109,97,108,105,122,101,100,32,116,104,101,32,112,97,116,104,32,34,37,115,34,32,116,111,32,34,37,115,34,10,0,0,0,0,0,0,0,47,46,46,47,0,0,0,0,45,0,0,0,0,0,0,0,47,46,47,0,0,0,0,0,68,101,114,101,102,101,114,101,110,99,101,100,32,34,37,115,37,115,34,32,116,111,32,34,37,115,34,10,0,0,0,0,73,108,108,101,103,97,108,32,99,111,110,116,114,111,108,32,99,104,97,114,97,99,116,101,114,32,37,46,48,115,48,108,120,37,48,50,120,32,105,110,32,113,117,111,116,97,116,105,111,110,0,0,0,0,0,0,100,101,102,105,110,101,0,0,103,98,50,51,49,50,0,0,66,117,103,58,32,87,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,111,32,110,111,114,109,95,112,97,116,104,40,41,0,0,0,0,0,0,37,115,32,116,104,97,110,32,110,101,99,101,115,115,97,114,121,32,37,108,100,32,97,114,103,117,109,101,110,116,40,115,41,32,105,110,32,109,97,99,114,111,32,99,97,108,108,32,34,37,115,34,0,0,0,0,95,95,83,84,68,67,95,95,0,0,0,0,0,0,0,0,32,49,10,0,0,0,0,0,70,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,0,0,0,0,0,0,0,0,118,97,108,112,91,45,49,93,46,118,97,108,32,61,61,32,0,0,0,0,0,0,0,0,34,37,115,34,32,119,97,115,110,39,116,32,100,101,102,105,110,101,100,10,0,0,0,0,77,97,99,114,111,32,34,37,115,34,32,105,115,32,101,120,112,97,110,100,101,100,32,116,111,32,48,32,116,111,107,101,110,0,0,0,0,0,0,0,84,111,111,32,108,111,110,103,32,104,101,97,100,101,114,32,110,97,109,101,32,34,37,115,37,46,48,108,100,37,115,34,0,0,0,0,0,0,0,0,69,120,99,101,115,115,105,118,101,32,116,111,107,101,110,32,115,101,113,117,101,110,99,101,32,34,37,115,34,0,0,0,95,95,83,84,68,67,95,72,79,83,84,69,68,95,95,0,79,110,99,101,32,105,110,99,108,117,100,101,100,32,34,37,115,34,10,0,0,0,0,0,35,105,110,99,108,117,100,101])
.concat([32,34,37,115,34,10,0,0,73,108,108,101,103,97,108,32,109,117,108,116,105,45,98,121,116,101,32,99,104,97,114,97,99,116,101,114,32,115,101,113,117,101,110,99,101,32,34,37,115,34,32,105,110,32,113,117,111,116,97,116,105,111,110,0,84,111,111,32,108,111,110,103,32,101,110,99,111,100,105,110,103,32,110,97,109,101,58,32,37,115,37,46,48,108,100,37,46,48,115,0,0,0,0,0,101,110,100,105,102,0,0,0,99,104,115,0,0,0,0,0,35,105,110,99,108,117,100,101,32,110,101,115,116,32,114,101,97,99,104,101,100,32,97,116,32,116,104,101,32,109,97,120,105,109,117,109,32,111,102,32,115,121,115,116,101,109,58,32,37,100,44,32,114,101,116,117,114,110,101,100,32,101,114,114,110,111,58,32,37,100,10,0,97,114,103,91,37,100,93,0,114,0,0,0,0,0,0,0,83,101,97,114,99,104,105,110,103,32,37,115,37,115,37,115,10,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,115,116,97,99,107,105,110,103,32,37,115,44,32,0,0,0,84,111,111,32,108,111,110,103,32,102,114,97,109,101,119,111,114,107,32,112,97,116,104,0,37,115,37,99,37,115,0,0,37,115,37,115,37,99,0,0,101,120,112,97,110,100,95,112,114,101,115,116,100,32,101,120,105,116,0,0,0,0,0,0,80,114,105,118,97,116,101,72,101,97,100,101,114,115,0,0,39,36,39,32,105,110,32,105,100,101,110,116,105,102,105,101,114,32,34,37,115,34,0,0,78,111,116,32,105,110,32,97,32,35,105,102,32,40,35,105,102,100,101,102,41,32,115,101,99,116,105,111,110,32,105,110,32,97,32,115,111,117,114,99,101,32,102,105,108,101,0,0,72,101,97,100,101,114,115,0,73,100,101,110,116,105,102,105,101,114,32,108,111,110,103,101,114,32,116,104,97,110,32,37,46,48,115,37,108,100,32,99,104,97,114,97,99,116,101,114,115,32,34,37,115,34,0,0,46,102,114,97,109,101,119,111,114,107,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,45,68,32,111,112,116,105,111,110,115,46,10,0,0,0,84,111,111,32,108,111,110,103,32,105,100,101,110,116,105,102,105,101,114,32,116,114,117,110,99,97,116,101,100,32,116,111,32,34,37,115,34,0,0,0,70,114,97,109,101,119,111,114,107,115,47,0,0,0,0,0,92,110,0,0,0,0,0,0,40,110,111,110,101,41,0,0,69,109,112,116,121,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,0,0,0,0,0,0,101,108,115,101,0,0,0,0,102,105,108,101,110,97,109,101,58,32,37,115,10,0,0,0,99,104,105,110,101,115,101,115,105,109,112,108,105,102,105,101,100,0,0,0,0,0,0,0,84,111,111,32,108,111,110,103,32,112,112,45,110,117,109,98,101,114,32,116,111,107,101,110,32,34,37,115,34,0,0,0,41,0,0,0,0,0,0,0,100,117,109,112,32,111,102,32,37,100,32,97,99,116,117,97,108,32,97,114,103,117,109,101,110,116,115,32,37,115,10,0,78,111,110,45,101,120,105,115,116,101,110,116,32,100,105,114,101,99,116,111,114,121,32,34,37,115,34,32,105,115,32,105,103,110,111,114,101,100,10,0,84,111,111,32,108,111,110,103,32,110,117,109,98,101,114,32,116,111,107,101,110,32,34,37,115,34,0,0,0,0,0,0,58,0,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,70,114,97,109,101,119,111,114,107,32,100,105,114,101,99,116,111,114,105,101,115,46,0,73,108,108,101,103,97,108,32,100,105,103,105,116,32,105,110,32,111,99,116,97,108,32,110,117,109,98,101,114,32,34,37,115,34,0,0,0,0,0,0,63,0,0,0,0,0,0,0,37,100,32,101,114,114,111,114,37,115,32,105,110,32,112,114,101,112,114,111,99,101,115,115,111,114,46,10,0,0,0,0,47,65,112,112,108,105,99,97,116,105,111,110,115,47,88,99,111,100,101,46,97,112,112,47,67,111,110,116,101,110,116,115,47,68,101,118,101,108,111,112,101,114,47,80,108,97,116,102,111,114,109,115,47,77,97,99,79,83,88,46,112,108,97,116,102,111,114,109,47,68,101,118,101,108,111,112,101,114,47,83,68,75,115,47,77,97,99,79,83,88,49,48,46,57,46,115,100,107,47,83,121,115,116,101,109,47,76,105,98,114,97,114,121,47,70,114,97,109,101,119,111,114,107,115,0,0,0,0,85,67,78,32,99,97,110,110,111,116,32,115,112,101,99,105,102,121,32,116,104,101,32,118,97,108,117,101,32,37,46,48,115,34,37,48,56,108,120,34,0,0,0,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,37,46,48,115,37,108,100,32,111,112,101,114,97,116,111,114,115,32,97,110,100,32,112,97,114,101,110,115,32,115,116,97,99,107,101,100,32,97,116,32,37,115,0,0,0,0,124,124,0,0,0,0,0,0,32,34,37,115,34,0,0,0,73,108,108,101,103,97,108,32,85,67,78,32,115,101,113,117,101,110,99,101,0,0,0,0,38,38,0,0,0,0,0,0,37,115,37,115,0,0,0,0,66,117,103,58,32,80,117,110,99,116,117,97,116,111,114,32,105,115,32,109,105,115,45,105,109,112,108,101,109,101,110,116,101,100,32,37,46,48,115,48,108,120,37,120,0,0,0,0,124,0,0,0,0,0,0,0,78,111,116,32,97,110,32,105,100,101,110,116,105,102,105,101,114,32,34,37,115,34,0,0,94,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,97,114,103,117,109,101,110,116,32,34,37,115,34,0,0,0,69,110,100,32,111,102,32,37,115,32,119,105,116,104,32,117,110,116,101,114,109,105,110,97,116,101,100,32,35,97,115,109,32,98,108,111,99,107,32,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,108,100,0,0,0,0,0,0,38,0,0,0,0,0,0,0,66,97,100,32,37,115,32,115,121,110,116,97,120,0,0,0,77,111,100,101,32,105,115,32,114,101,100,101,102,105,110,101,100,32,116,111,58,32,37,115,10,0,0,0,0,0,0,0,92,44,32,100,101,108,101,116,101,100,32,116,104,101,32,92,0,0,0,0,0,0,0,0,33,61,0,0,0,0,0,0,34,37,115,34,32,104,97,115,32,110,111,116,32,98,101,101,110,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,99,111,109,109,101,110,116,44,32,116,101,114,109,105,110,97,116,101,100,32,116,104,101,32,99,111,109,109,101,110,116,0,0,0,0,61,61,0,0,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,37,115,37,46,48,108,100,37,115,0,0,0,0,0,0,0,34,37,115,34,32,104,97,115,32,110,111,116,32,98,101,101,110,32,112,117,115,104,101,100,0,0,0,0,0,0,0,0,101,108,105,102,0,0,0,0,117,106,105,115,0,0,0,0,110,111,32,110,101,119,108,105,110,101,44,32,115,117,112,112,108,101,109,101,110,116,101,100,32,110,101,119,108,105,110,101,0,0,0,0,0,0,0,0,62,61,0,0,0,0,0,0,99,111,108,108,101,99,116,95,97,114,103,115,32,101,120,105,116,0,0,0,0,0,0,0,34,37,115,34,32,105,115,32,97,108,114,101,97,100,121,32,112,117,115,104,101,100,0,0,105,110,112,117,116,0,0,0,62,0,0,0,0,0,0,0,87,105,116,104,111,117,116,32,35,97,115,109,0,0,0,0,102,105,108,101,0,0,0,0,60,61,0,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,34,109,99,112,112,46,101,114,114,34,10,0,0,60,115,116,100,105,110,62,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;
  Module["_testSetjmp"] = _testSetjmp;var _setjmp=undefined;
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  Module["_strlen"] = _strlen;
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }
  function _stpcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[((pdest+i)|0)]=HEAP8[((psrc+i)|0)];
        i ++;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest + i - 1;
    }
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  Module["_strcpy"] = _strcpy;
  Module["_memcmp"] = _memcmp;
  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }
  Module["_tolower"] = _tolower;
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  Module["_llvm_uadd_with_overflow_i64"] = _llvm_uadd_with_overflow_i64;
  function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  var _llvm_va_start=undefined;
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStream(stream);
      return Number(stream && stream.error);
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return ((asm["setTempRet0"]((tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)),ret>>>0)|0);
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }var _atol=_atoi;
  Module["_strncasecmp"] = _strncasecmp; 
  Module["_strcasecmp"] = _strcasecmp;
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  Module["_strcat"] = _strcat;
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode
        HEAP32[(((buf)+(16))>>2)]=stat.nlink
        HEAP32[(((buf)+(20))>>2)]=stat.uid
        HEAP32[(((buf)+(24))>>2)]=stat.gid
        HEAP32[(((buf)+(28))>>2)]=stat.rdev
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size
        HEAP32[(((buf)+(40))>>2)]=4096
        HEAP32[(((buf)+(44))>>2)]=stat.blocks
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000)
        HEAP32[(((buf)+(52))>>2)]=0
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000)
        HEAP32[(((buf)+(60))>>2)]=0
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000)
        HEAP32[(((buf)+(68))>>2)]=0
        HEAP32[(((buf)+(72))>>2)]=stat.ino
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      path = Pointer_stringify(path);
      var str;
      try {
        str = FS.readlink(path);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      str = str.slice(0, Math.max(0, bufsize - 1));
      writeStringToMemory(str, buf, true);
      return str.length;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);
  function _mktime(tmPtr) {
      _tzset();
      var year = HEAP32[(((tmPtr)+(20))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(16))>>2)],
                               HEAP32[(((tmPtr)+(12))>>2)],
                               HEAP32[(((tmPtr)+(8))>>2)],
                               HEAP32[(((tmPtr)+(4))>>2)],
                               HEAP32[((tmPtr)>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(24))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      return timestamp;
    }function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[(((buf)+(index))|0)]=chr.charCodeAt(0)
      });
      HEAP8[(((buf)+(25))|0)]=0
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }
  function _emscripten_asm_const(code) {
      Runtime.getAsmConst(code, 0)();
    }
  function _abort() {
      Module['abort']();
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
var Math_min = Math.min;
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stdin=env._stdin|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;
  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _strncmp=env._strncmp;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _pread=env._pread;
  var _tzset=env._tzset;
  var _snprintf=env._snprintf;
  var _lseek=env._lseek;
  var _fgetc=env._fgetc;
  var _fclose=env._fclose;
  var _abort=env._abort;
  var _fprintf=env._fprintf;
  var _close=env._close;
  var _fgets=env._fgets;
  var _stpcpy=env._stpcpy;
  var _fflush=env._fflush;
  var _fopen=env._fopen;
  var _strchr=env._strchr;
  var _fputc=env._fputc;
  var _emscripten_asm_const=env._emscripten_asm_const;
  var ___buildEnvironment=env.___buildEnvironment;
  var _sysconf=env._sysconf;
  var _mktime=env._mktime;
  var ___setErrNo=env.___setErrNo;
  var _open=env._open;
  var _fseek=env._fseek;
  var _send=env._send;
  var _isxdigit=env._isxdigit;
  var _fputs=env._fputs;
  var _ftell=env._ftell;
  var _sprintf=env._sprintf;
  var _strrchr=env._strrchr;
  var _ferror=env._ferror;
  var _localtime=env._localtime;
  var _strtol=env._strtol;
  var _stat=env._stat;
  var _fread=env._fread;
  var _longjmp=env._longjmp;
  var _strcspn=env._strcspn;
  var _read=env._read;
  var _getcwd=env._getcwd;
  var __reallyNegative=env.__reallyNegative;
  var _time=env._time;
  var __formatString=env.__formatString;
  var _localtime_r=env._localtime_r;
  var _getenv=env._getenv;
  var _atoi=env._atoi;
  var _readlink=env._readlink;
  var _vfprintf=env._vfprintf;
  var _asctime_r=env._asctime_r;
  var _strstr=env._strstr;
  var _llvm_va_end=env._llvm_va_end;
  var _recv=env._recv;
  var _pwrite=env._pwrite;
  var _putchar=env._putchar;
  var _ctime=env._ctime;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _asctime=env._asctime;
  var _isspace=env._isspace;
  var _iscntrl=env._iscntrl;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var _write=env._write;
  var _sbrk=env._sbrk;
  var __parseInt=env.__parseInt;
  var _fwrite=env._fwrite;
  var _isupper=env._isupper;
  var _strcmp=env._strcmp;
  var _memchr=env._memchr;
  var tempFloat = 0.0;
// EMSCRIPTEN_START_FUNCS
function _eval_if() {
 var $1 = 0, $ucn8_i_i = 0, $cp_i_i = 0, $value = 0, $opstack = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $9 = 0, $13 = 0, $14 = 0, $parens_0_ph = 0, $binop_0_ph = 0, $skip_cur_0_ph = 0, $valp_0_ph = 0, $opp_0_ph = 0, $15 = 0, $binop_0 = 0, $valp_0 = 0, $26 = 0, $29 = 0, $31 = 0, $37 = 0, $$etemp$1 = 0, $39 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $56 = 0, $c_0_i = 0, $63 = 0, $65 = 0, $$etemp$4 = 0, $81 = 0, $89 = 0, $$etemp$8 = 0, $$etemp$12 = 0, $105 = 0, $109 = 0, $123 = 0, $126 = 0, $typecode_056_i_i = 0, $130 = 0, $132 = 0, $136 = 0, $142 = 0, $148 = 0, $154 = 0, $163 = 0, $170 = 0, $171 = 0, $tp_0_i_i_i = 0, $182 = 0, $183 = 0, $215 = 0, $220 = 0, $_0_i_i_i = 0, $231 = 0, $typecode_1_i_i = 0, $_ph_i_i = 0, $typecode_236_ph_i_i = 0, $__i_i = 0, $239 = 0, $sizp_0_i_i = 0, $242 = 0, $243 = 0, $253 = 0, $$etemp$15 = 0, $263 = 0, $265 = 0, $267 = 0, $270 = 0, $272 = 0, $282 = 0, $287 = 0, $288 = 0, $292 = 0, $_not2_i_i = 0, $295 = 0, $bits_0_i_i = 0, $306$0 = 0, $308$0 = 0, $308$1 = 0, $bits_1_i_i = 0, $cl_0_i_i$0 = 0, $cl_0_i_i$1 = 0, $i_0_i_i = 0, $erange_0_i_i = 0, $value_0_i_i$0 = 0, $value_0_i_i$1 = 0, $erange_long_0_i_i = 0, $314 = 0, $325$0 = 0, $325$1 = 0, $328$0 = 0, $328$1 = 0, $bits_2_i_i = 0, $cl_1_i_i$0 = 0, $cl_1_i_i$1 = 0, $335$0 = 0, $337$0 = 0, $337$1 = 0, $erange_1_i_i = 0, $$etemp$24$1 = 0, $$etemp$25$1 = 0, $erange_2_i_i = 0, $value_1_i_i$0 = 0, $value_1_i_i$1 = 0, $erange_long_1_i_i = 0, $$etemp$26 = 0, $356 = 0, $357 = 0, $381 = 0, $387 = 0, $389 = 0, $397 = 0, $404 = 0, $$etemp$29 = 0, $ev_idx14_val_i$0 = 0, $ev_idx14_val_i$1 = 0, $420 = 0, $$etemp$34 = 0, $ev_idx_val_i$0 = 0, $ev_idx_val_i$1 = 0, $434 = 0, $_0_i_ph = 0, $_0_i = 0, $op_0 = 0, $450 = 0, $452 = 0, $$etemp$39 = 0, $ev_idx_val$0 = 0, $ev_idx_val$1 = 0, $469 = 0, $$etemp$44 = 0, $476$1 = 0, $477 = 0, $483 = 0, $484 = 0, $495 = 0, $496 = 0, $497 = 0, $parens_1 = 0, $skip_cur_1 = 0, $valp_1 = 0, $opp_1 = 0, $508 = 0, $509 = 0, $511 = 0, $514 = 0, $_pre_phi = 0, $528 = 0, $529 = 0, $parens_2 = 0, $prec_0_off0 = 0, $537 = 0, $538 = 0, $546 = 0, $548 = 0, $skip_cur_2 = 0, $554 = 0, $559 = 0, $_idx = 0, $_idx_val$0 = 0, $_idx_val$1 = 0, $583 = 0, $594 = 0, $596 = 0, $597 = 0, $601 = 0, $609 = 0, $611 = 0, $opp_2 = 0, $617 = 0, $628 = 0, $629 = 0, $630 = 0, $632 = 0, $633 = 0, $637 = 0, $v2_0_i$0 = 0, $v2_0_i$1 = 0, $sign2_0_i = 0, $638 = 0, $639 = 0, $640$0 = 0, $640$1 = 0, $642 = 0, $649 = 0, $651 = 0, $653 = 0, $_idx69_i = 0, $_idx69_val_i$0 = 0, $_idx69_val_i$1 = 0, $656 = 0, $659 = 0, $_idx_i = 0, $_idx_val_i$0 = 0, $_idx_val_i$1 = 0, $662 = 0, $671 = 0, $$etemp$73$1 = 0, $$etemp$74$1 = 0, $678 = 0, $685$0 = 0, $685$1 = 0, $sign1_0_i = 0, $695 = 0, $696 = 0, $697 = 0, $$etemp$76$1 = 0, $$etemp$77$1 = 0, $724 = 0, $739 = 0, $740 = 0, $741 = 0, $746 = 0, $747 = 0, $752 = 0, $753 = 0, $770 = 0, $771 = 0, $773 = 0, $__i_i101 = 0, $783 = 0, $796$1 = 0, $$etemp$89$1 = 0, $799 = 0, $801 = 0, $820 = 0, $837 = 0, $$etemp$90$1 = 0, $854 = 0, $856 = 0, $900 = 0, $901 = 0, $903 = 0, $907 = 0, $$etemp$98$1 = 0, $$etemp$99$1 = 0, $913 = 0, $950 = 0, $951 = 0, $952 = 0, $$etemp$105$1 = 0, $954 = 0, $960$0 = 0, $960$1 = 0, $961 = 0, $962 = 0, $$etemp$106$1 = 0, $968 = 0, $969 = 0, $$etemp$107$1 = 0, $1010 = 0, $1011 = 0, $1013 = 0, $1015 = 0, $v1_0_i$0 = 0, $v1_0_i$1 = 0, $1016 = 0, $storemerge_i = 0, $1022 = 0, $1023 = 0, $_0_i105 = 0, $1028 = 0, $parens_3 = 0, $valp_2 = 0, $opp_3 = 0, $_0$0 = 0, $_0$1 = 0, $336$0 = 0, $338$0 = 0, $338$1 = 0, $_pre152_i_i$0 = 0, $_pre152_i_i$1 = 0, $767$0 = 0, $767$1 = 0, $780$0 = 0, $812$0 = 0, $814$0 = 0, $816$0 = 0, $816$1 = 0, $833$0 = 0, $833$1 = 0, $850$0 = 0, $866$0 = 0, $915$0 = 0, $915$1 = 0, $943$0 = 0, $943$1 = 0, $946$0 = 0, $949$0 = 0, $956$0 = 0, $958$0 = 0, $967$0 = 0, $967$1 = 0, $974$0 = 0, $976$0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10640 | 0;
 $1 = sp | 0;
 $ucn8_i_i = sp + 104 | 0;
 $cp_i_i = sp + 112 | 0;
 $value = sp + 120 | 0;
 $opstack = sp + 8328 | 0;
 $2 = $value | 0;
 $3 = $opstack | 0;
 HEAP8[$opstack | 0] = 28;
 HEAP8[$opstack + 1 | 0] = 19;
 HEAP8[$opstack + 2 | 0] = 0;
 HEAP32[23336] = 0;
 $7 = $value + 8192 | 0;
 $8 = $value;
 $9 = HEAP32[2] | 0;
 $13 = sp + 8 | 0;
 $14 = $opstack + 2304 | 0;
 $opp_0_ph = $3;
 $valp_0_ph = $2;
 $skip_cur_0_ph = 0;
 $binop_0_ph = 0;
 $parens_0_ph = 0;
 L1 : while (1) {
  $15 = $opp_0_ph + 2 | 0;
  $valp_0 = $valp_0_ph;
  $binop_0 = $binop_0_ph;
  while (1) {
   if ((HEAP32[89594] & 32 | 0) != 0) {
    $26 = HEAP32[HEAP32[89668] >> 2] | 0;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 8032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP8[$15] | 0, HEAP32[tempVarArgs + 8 >> 2] = $binop_0, HEAP32[tempVarArgs + 16 >> 2] = $26, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
   }
   $29 = HEAP8[$15] | 0;
   HEAP32[23336] = $29 << 24 >> 24;
   $31 = $29 << 24 >> 24 == 0;
   if ($31) {
    $37 = 1;
   } else {
    $37 = (HEAP32[4] & 8 | 0) != 0;
   }
   HEAP32[90040] = 1;
   $$etemp$1 = 360152;
   HEAP32[$$etemp$1 >> 2] = 0;
   HEAP32[$$etemp$1 + 4 >> 2] = 0;
   HEAP32[89684] = $31 & 1;
   $39 = _skip_ws() | 0;
   L11 : do {
    if (($39 | 0) == 10) {
     _unget_ch();
     $_0_i_ph = 0;
     label = 140;
    } else {
     $44 = _get_unexpandable($39, $37 & 1) | 0;
     $45 = HEAP32[592] | 0;
     $46 = ($45 | 0) != 0;
     if ($46 & (HEAP32[89616] | 0) == -1) {
      break L1;
     }
     L15 : do {
      switch ($44 | 0) {
      case 69:
      case 70:
       {
        $282 = HEAP32[682] | 0;
        if (($282 | 0) == 9) {
         label = 86;
         break L1;
        }
        $287 = (HEAP8[22344] | 0) == 76;
        $288 = $287 & 1;
        HEAP32[$cp_i_i >> 2] = 22345;
        $292 = ((HEAP32[692] | 0) >>> 8 & 16) + 16 | 0;
        $_not2_i_i = $287 ^ 1;
        if (($282 | 0) != 3 | $_not2_i_i) {
         $bits_0_i_i = 8;
         $295 = 22345;
        } else {
         HEAP32[$cp_i_i >> 2] = 22346;
         $bits_0_i_i = $292;
         $295 = 22346;
        }
        do {
         if ((HEAP16[(HEAP32[91636] | 0) + (HEAPU8[$295] << 1) >> 1] & HEAP32[89598] | 0) == 0) {
          HEAP32[$ucn8_i_i >> 2] = 0;
          $308$0 = _eval_one($cp_i_i, $288, $292, $ucn8_i_i) | 0;
          $308$1 = tempRet0;
          if (!(($308$0 | 0) == (-1 | 0) & ($308$1 | 0) == (-1 | 0))) {
           $cl_0_i_i$1 = $308$1;
           $cl_0_i_i$0 = $308$0;
           $bits_1_i_i = $bits_0_i_i;
           label = 93;
           break;
          }
          HEAP32[90040] = -1;
         } else {
          $306$0 = _mb_eval($cp_i_i) | 0;
          $cl_0_i_i$1 = tempRet0;
          $cl_0_i_i$0 = $306$0;
          $bits_1_i_i = $292;
          label = 93;
         }
        } while (0);
        do {
         if ((label | 0) == 93) {
          label = 0;
          $erange_long_0_i_i = 0;
          $value_0_i_i$1 = $cl_0_i_i$1;
          $value_0_i_i$0 = $cl_0_i_i$0;
          $erange_0_i_i = 0;
          $i_0_i_i = 0;
          L27 : while (1) {
           $314 = HEAP8[HEAP32[$cp_i_i >> 2] | 0] | 0;
           if (($314 << 24 >> 24 | 0) == 39 | ($314 << 24 >> 24 | 0) == 0) {
            label = 106;
            break;
           }
           if ((HEAP16[(HEAP32[91636] | 0) + (($314 & 255) << 1) >> 1] & HEAP32[89598] | 0) == 0) {
            HEAP32[$ucn8_i_i >> 2] = 0;
            $328$0 = _eval_one($cp_i_i, $288, $292, $ucn8_i_i) | 0;
            $328$1 = tempRet0;
            if (($328$0 | 0) == (-1 | 0) & ($328$1 | 0) == (-1 | 0)) {
             label = 98;
             break;
            }
            $cl_1_i_i$1 = $328$1;
            $cl_1_i_i$0 = $328$0;
            $bits_2_i_i = (HEAP32[$ucn8_i_i >> 2] | 0) == 1 ? 32 : $bits_1_i_i;
            label = 100;
           } else {
            $325$0 = _mb_eval($cp_i_i) | 0;
            $325$1 = tempRet0;
            if (($325$0 | 0) == 0 & ($325$1 | 0) == 0) {
             $erange_long_1_i_i = $erange_long_0_i_i;
             $value_1_i_i$1 = $value_0_i_i$1;
             $value_1_i_i$0 = $value_0_i_i$0;
             $erange_2_i_i = $erange_0_i_i;
            } else {
             $cl_1_i_i$1 = $325$1;
             $cl_1_i_i$0 = $325$0;
             $bits_2_i_i = $292;
             label = 100;
            }
           }
           do {
            if ((label | 0) == 100) {
             label = 0;
             $335$0 = $bits_2_i_i;
             $336$0 = _bitshift64Shl($value_0_i_i$0 | 0, $value_0_i_i$1 | 0, $335$0 | 0) | 0;
             $337$0 = $336$0 | $cl_1_i_i$0;
             $337$1 = tempRet0 | $cl_1_i_i$1;
             $338$0 = _bitshift64Lshr($337$0 | 0, $337$1 | 0, $335$0 | 0) | 0;
             $338$1 = tempRet0;
             if ($338$1 >>> 0 < $value_0_i_i$1 >>> 0 | $338$1 >>> 0 == $value_0_i_i$1 >>> 0 & $338$0 >>> 0 < $value_0_i_i$0 >>> 0) {
              if ((HEAP32[23336] | 0) == 0) {
               label = 126;
               break L27;
              } else {
               $erange_1_i_i = 1;
              }
             } else {
              $erange_1_i_i = $erange_0_i_i;
             }
             $$etemp$24$1 = 0;
             if (!((HEAP32[23328] | 0) == 0 & (HEAP32[682] | 0) == 3 & ($337$1 >>> 0 > $$etemp$24$1 >>> 0 | $337$1 >>> 0 == $$etemp$24$1 >>> 0 & $337$0 >>> 0 > -1 >>> 0))) {
              $$etemp$25$1 = 0;
              if (!((HEAP32[592] | 0) == 0 & ($337$1 >>> 0 > $$etemp$25$1 >>> 0 | $337$1 >>> 0 == $$etemp$25$1 >>> 0 & $337$0 >>> 0 > 2147483647 >>> 0))) {
               $erange_long_1_i_i = $erange_long_0_i_i;
               $value_1_i_i$1 = $337$1;
               $value_1_i_i$0 = $337$0;
               $erange_2_i_i = $erange_1_i_i;
               break;
              }
             }
             $erange_long_1_i_i = 1;
             $value_1_i_i$1 = $337$1;
             $value_1_i_i$0 = $337$0;
             $erange_2_i_i = $erange_1_i_i;
            }
           } while (0);
           $erange_long_0_i_i = $erange_long_1_i_i;
           $value_0_i_i$1 = $value_1_i_i$1;
           $value_0_i_i$0 = $value_1_i_i$0;
           $erange_0_i_i = $erange_2_i_i;
           $i_0_i_i = $i_0_i_i + 1 | 0;
          }
          if ((label | 0) == 98) {
           label = 0;
           HEAP32[90040] = -1;
           break;
          } else if ((label | 0) == 106) {
           label = 0;
           HEAP32[90040] = ($value_0_i_i$1 >>> 31 | 0 << 1) ^ 1;
           $$etemp$26 = 360152;
           HEAP32[$$etemp$26 >> 2] = $value_0_i_i$0;
           HEAP32[$$etemp$26 + 4 >> 2] = $value_0_i_i$1;
           $356 = HEAP32[23336] | 0;
           $357 = ($356 | 0) != 0;
           do {
            if (($erange_0_i_i | 0) != 0 & $357) {
             if ((HEAP32[4] & 8 | 0) == 0) {
              label = 111;
              break;
             }
             if ($287) {
              _cwarn(10920, 22344, 0, 12504);
              break;
             } else {
              _cwarn(10704, 22344, 0, 12504);
              break;
             }
            } else {
             label = 111;
            }
           } while (0);
           do {
            if ((label | 0) == 111) {
             label = 0;
             if (($erange_long_0_i_i | 0) == 0) {
              break;
             }
             if (($356 | 0) == 0) {
              label = 114;
             } else {
              if ((HEAP32[4] & 8 | 0) == 0) {
               label = 114;
              }
             }
             if ((label | 0) == 114) {
              label = 0;
              if ((HEAP32[23328] | $356 | 0) != 0) {
               break;
              }
              if ((HEAP32[4] & 1 | 0) == 0) {
               break;
              }
             }
             $381 = $357 ? 12504 : 0;
             if ($287) {
              _cwarn(10520, 22344, 0, $381);
              break;
             } else {
              _cwarn(10344, 22344, 0, $381);
              break;
             }
            }
           } while (0);
           if (($i_0_i_i | 0) == 0) {
            break;
           }
           $387 = HEAP32[23336] | 0;
           $389 = HEAP32[4] | 0;
           if (($387 | 0) == 0) {
            if (($389 & 4 | 0) == 0) {
             break;
            }
           } else {
            if (($389 & 8 | 0) == 0) {
             break;
            }
           }
           $397 = ($387 | 0) != 0 ? 12504 : 0;
           if ((HEAP32[682] | 0) != 3 | $_not2_i_i) {
            _cwarn(9984, 22344, 0, $397);
            break;
           } else {
            _cwarn(10168, 22344, 0, $397);
            break;
           }
          } else if ((label | 0) == 126) {
           label = 0;
           if ($287) {
            _cerror(10920, 22344, 0, 0);
           } else {
            _cerror(10704, 22344, 0, 0);
           }
           HEAP32[90040] = -1;
           break;
          }
         }
        } while (0);
        $404 = HEAP32[90040] | 0;
        if (($404 | 0) == -1) {
         break L1;
        }
        if ((HEAP32[89594] & 32 | 0) == 0) {
         $_0_i_ph = 1;
         label = 140;
         break L11;
        }
        $$etemp$29 = 360152;
        $ev_idx14_val_i$0 = HEAP32[$$etemp$29 >> 2] | 0;
        $ev_idx14_val_i$1 = HEAP32[$$etemp$29 + 4 >> 2] | 0;
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 11504, HEAP32[tempVarArgs + 8 >> 2] = ($404 | 0) != 0 ? 368672 : 14376, HEAP32[tempVarArgs + 16 >> 2] = $ev_idx14_val_i$0, HEAP32[tempVarArgs + 24 >> 2] = $ev_idx14_val_i$1, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
        $_0_i_ph = 1;
        label = 140;
        break L11;
        break;
       }
      case 65:
       {
        do {
         if ($46) {
          if ((_strcmp(358776, 12408) | 0) != 0) {
           break;
          }
          $55 = _skip_ws() | 0;
          $56 = ($55 | 0) == 40;
          if ($56) {
           $c_0_i = _skip_ws() | 0;
          } else {
           $c_0_i = $55;
          }
          HEAP32[5584] = 22344;
          if ((_scan_token($c_0_i, 22336, $9) | 0) != 65) {
           label = 21;
           break L1;
          }
          $63 = _look_id(358776) | 0;
          do {
           if ($37) {
            $65 = ($63 | 0) != 0;
            $$etemp$4 = 360152;
            HEAP32[$$etemp$4 >> 2] = $65 & 1;
            HEAP32[$$etemp$4 + 4 >> 2] = 0;
            if ((HEAP32[89594] & 8 | 0) == 0 | (HEAP32[23336] | 0) != 0 | $65 ^ 1) {
             break;
            }
            FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 12328, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $63 + 25, tempVarArgs) | 0) | 0;
            STACKTOP = tempVarArgs;
           }
          } while (0);
          if (!$56) {
           $_0_i_ph = 1;
           label = 140;
           break L11;
          }
          if ((_skip_ws() | 0) == 41) {
           $_0_i_ph = 1;
           label = 140;
           break L11;
          } else {
           label = 21;
           break L1;
          }
         }
        } while (0);
        do {
         if ((HEAP32[91372] | 0) == 0) {
          if (($45 | 0) != 0) {
           break;
          }
          if ((_strcmp(358776, 12016) | 0) != 0) {
           break;
          }
          if ((HEAP32[23336] | 0) == 0) {
           $123 = 1;
          } else {
           $123 = (HEAP32[4] | 0) >>> 3 & 1;
          }
          $126 = (_get_unexpandable(_skip_ws() | 0, $123) | 0) != 71;
          if ($126 | (HEAP32[89554] | 0) != 2) {
           label = 80;
           break L1;
          } else {
           $typecode_056_i_i = 0;
          }
          while (1) {
           $130 = _get_unexpandable(_skip_ws() | 0, $123) | 0;
           if (($130 | 0) == 71) {
            $132 = HEAP32[89554] | 0;
            if (($132 | 0) == 7) {
             label = 70;
             break;
            } else if (($132 | 0) == 27) {
             $typecode_1_i_i = $typecode_056_i_i;
             break;
            } else if (($132 | 0) != 2) {
             label = 80;
             break L1;
            }
            $136 = (_get_unexpandable(_skip_ws() | 0, $123) | 0) == 71;
            if (!($136 & (HEAP32[89554] | 0) == 7)) {
             label = 80;
             break L1;
            }
            $142 = (_get_unexpandable(_skip_ws() | 0, $123) | 0) == 71;
            if (!($142 & (HEAP32[89554] | 0) == 27)) {
             label = 80;
             break L1;
            }
            $148 = (_get_unexpandable(_skip_ws() | 0, $123) | 0) != 71;
            if ($148 | (HEAP32[89554] | 0) != 2) {
             label = 80;
             break L1;
            }
            $154 = (_get_unexpandable(_skip_ws() | 0, $123) | 0) != 71;
            if ($154 | (HEAP32[89554] | 0) != 27) {
             label = 80;
             break L1;
            }
            $typecode_056_i_i = $typecode_056_i_i | 2048;
            continue;
           } else if (($130 | 0) != 65) {
            label = 80;
            break L1;
           }
           L121 : do {
            if ((_strcmp(358776, 8664) | 0) == 0) {
             $163 = _skip_ws() | 0;
             if ((HEAP32[23336] | 0) == 0) {
              $170 = 1;
             } else {
              $170 = (HEAP32[4] | 0) >>> 3 & 1;
             }
             $171 = _get_unexpandable($163, $170) | 0;
             do {
              if (($171 | 0) == 65) {
               if ((_strcmp(358776, 8664) | 0) == 0) {
                _memcpy(22344, 8584, 10) | 0;
                $tp_0_i_i_i = 6440;
                label = 54;
                break L121;
               }
               if ((_strcmp(358776, 8488) | 0) != 0) {
                break;
               }
               _memcpy(22344, 8416, 12) | 0;
               $tp_0_i_i_i = 6440;
               label = 54;
               break L121;
              } else if (($171 | 0) == 0) {
               $_0_i_i_i = $typecode_056_i_i;
               break L121;
              }
             } while (0);
             _unget_string(22344, 0) | 0;
             HEAP8[22344] = HEAP8[8664] | 0;
             HEAP8[22345] = HEAP8[8665] | 0;
             HEAP8[22346] = HEAP8[8666] | 0;
             HEAP8[22347] = HEAP8[8667] | 0;
             HEAP8[22348] = HEAP8[8668] | 0;
             $tp_0_i_i_i = 6440;
             label = 54;
            } else {
             $tp_0_i_i_i = 6440;
             label = 54;
            }
           } while (0);
           if ((label | 0) == 54) {
            while (1) {
             label = 0;
             $182 = $tp_0_i_i_i + 4 | 0;
             $183 = HEAP32[$182 >> 2] | 0;
             if (($183 | 0) == 0) {
              label = 56;
              break;
             }
             if ((_strcmp(22344, $183 | 0) | 0) == 0) {
              break;
             } else {
              $tp_0_i_i_i = $tp_0_i_i_i + 12 | 0;
              label = 54;
             }
            }
            do {
             if ((label | 0) == 56) {
              label = 0;
              if ((HEAP32[23336] | 0) == 0) {
               label = 57;
               break L1;
              }
              if ((HEAP32[4] & 8 | 0) == 0) {
               break;
              }
              _cwarn(8936, 22344, 0, 12504);
             }
            } while (0);
            do {
             if ((HEAP32[$tp_0_i_i_i + 8 >> 2] & $typecode_056_i_i | 0) != 0) {
              if ((HEAP32[23336] | 0) == 0) {
               label = 62;
               break L1;
              }
              if ((HEAP32[4] & 8 | 0) == 0) {
               break;
              }
              _cwarn(8760, 22344, 0, 12504);
             }
            } while (0);
            do {
             if ((HEAP32[89594] & 32 | 0) != 0) {
              $215 = HEAP32[$182 >> 2] | 0;
              if (($215 | 0) == 0) {
               break;
              }
              $220 = HEAP32[$tp_0_i_i_i >> 2] | 0;
              FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 8320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $typecode_056_i_i, HEAP32[tempVarArgs + 8 >> 2] = $215, HEAP32[tempVarArgs + 16 >> 2] = $220, tempVarArgs) | 0) | 0;
              STACKTOP = tempVarArgs;
             }
            } while (0);
            $_0_i_i_i = HEAP32[$tp_0_i_i_i >> 2] | $typecode_056_i_i;
           }
           if (($_0_i_i_i | 0) == 0) {
            break L1;
           } else {
            $typecode_056_i_i = $_0_i_i_i;
           }
          }
          if ((label | 0) == 70) {
           label = 0;
           $231 = (_get_unexpandable(_skip_ws() | 0, $123) | 0) == 71;
           if ($231 & (HEAP32[89554] | 0) == 27) {
            $typecode_1_i_i = $typecode_056_i_i | 1024;
           } else {
            label = 80;
            break L1;
           }
          }
          if (($typecode_1_i_i & 2048 | 0) == 0) {
           $__i_i = (($typecode_1_i_i & 224 | 0) == 0 ? -769 : -771) & $typecode_1_i_i;
           $239 = $__i_i & -1793;
           if (($239 | 0) == 0) {
            label = 74;
            break L1;
           } else {
            $typecode_236_ph_i_i = $__i_i;
            $_ph_i_i = $239;
           }
          } else {
           $typecode_236_ph_i_i = 3072;
           $_ph_i_i = 2048;
          }
          $sizp_0_i_i = 2384;
          while (1) {
           $242 = $sizp_0_i_i | 0;
           $243 = HEAP32[$242 >> 2] | 0;
           if (($243 | 0) == 0) {
            break;
           }
           if (($_ph_i_i | 0) == ($243 | 0)) {
            label = 77;
            break;
           } else {
            $sizp_0_i_i = $sizp_0_i_i + 12 | 0;
           }
          }
          if ((label | 0) == 77) {
           label = 0;
           $253 = HEAP32[(($typecode_236_ph_i_i & 1024 | 0) == 0 ? $sizp_0_i_i + 4 | 0 : $sizp_0_i_i + 8 | 0) >> 2] | 0;
           $$etemp$15 = 360152;
           HEAP32[$$etemp$15 >> 2] = $253;
           HEAP32[$$etemp$15 + 4 >> 2] = ($253 | 0) < 0 | 0 ? -1 : 0;
          }
          if ((HEAP32[89594] & 32 | 0) == 0 | ($sizp_0_i_i | 0) == 0) {
           $_0_i_ph = 1;
           label = 140;
           break L11;
          }
          $263 = HEAP32[$sizp_0_i_i + 4 >> 2] | 0;
          $265 = HEAP32[$sizp_0_i_i + 8 >> 2] | 0;
          $267 = HEAP32[90038] | 0;
          FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 9136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$242 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $263, HEAP32[tempVarArgs + 16 >> 2] = $265, HEAP32[tempVarArgs + 24 >> 2] = $267, tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
          $_0_i_ph = 1;
          label = 140;
          break L11;
         } else {
          if ((_strcmp(358776, 12168) | 0) == 0) {
           $$etemp$8 = 360152;
           HEAP32[$$etemp$8 >> 2] = 1;
           HEAP32[$$etemp$8 + 4 >> 2] = 0;
           $_0_i_ph = 1;
           label = 140;
           break L11;
          }
          if ((_strcmp(358776, 12104) | 0) == 0) {
           $$etemp$12 = 360152;
           HEAP32[$$etemp$12 >> 2] = 0;
           HEAP32[$$etemp$12 + 4 >> 2] = 0;
           $_0_i_ph = 1;
           label = 140;
           break L11;
          }
          if ((HEAP32[682] | 0) == 9) {
           break;
          }
          $105 = _id_operator(358776) | 0;
          HEAP32[89554] = $105;
          if (($105 | 0) == 0) {
           break;
          }
          _strcpy(22344, 358776) | 0;
          $109 = HEAP32[89554] | 0;
          if (($109 - 30 | 0) >>> 0 < 6 >>> 0) {
           label = 32;
           break L1;
          } else {
           $_0_i = $109;
           break L15;
          }
         }
        } while (0);
        $270 = HEAP32[23336] | 0;
        $272 = HEAP32[4] | 0;
        if (($270 | 0) == 0) {
         if (($272 & 4 | 0) == 0) {
          $_0_i_ph = 1;
          label = 140;
          break L11;
         }
        } else {
         if (($272 & 8 | 0) == 0) {
          $_0_i_ph = 1;
          label = 140;
          break L11;
         }
        }
        _cwarn(11904, 358776, 0, ($270 | 0) != 0 ? 12504 : 11824);
        $_0_i_ph = 1;
        label = 140;
        break L11;
        break;
       }
      case 67:
      case 68:
       {
        label = 133;
        break L1;
        break;
       }
      case 66:
       {
        _eval_num(22344) | 0;
        $420 = HEAP32[90040] | 0;
        if (($420 | 0) == -1) {
         break L1;
        }
        if ((HEAP32[89594] & 32 | 0) == 0) {
         $_0_i_ph = 1;
         label = 140;
         break L11;
        }
        $$etemp$34 = 360152;
        $ev_idx_val_i$0 = HEAP32[$$etemp$34 >> 2] | 0;
        $ev_idx_val_i$1 = HEAP32[$$etemp$34 + 4 >> 2] | 0;
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 11200, HEAP32[tempVarArgs + 8 >> 2] = ($420 | 0) != 0 ? 368672 : 14376, HEAP32[tempVarArgs + 16 >> 2] = $ev_idx_val_i$0, HEAP32[tempVarArgs + 24 >> 2] = $ev_idx_val_i$1, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
        $_0_i_ph = 1;
        label = 140;
        break L11;
        break;
       }
      case 71:
       {
        $434 = HEAP32[89554] | 0;
        if (($434 - 30 | 0) >>> 0 < 6 >>> 0) {
         label = 138;
         break L1;
        } else {
         $_0_i = $434;
        }
        break;
       }
      case 0:
       {
        $_0_i_ph = 0;
        label = 140;
        break L11;
        break;
       }
      default:
       {
        label = 139;
        break L1;
       }
      }
     } while (0);
     HEAP32[23336] = 0;
     if (($_0_i | 0) == 11) {
      $op_0 = ($binop_0 | 0) == 0 ? 4 : 11;
      break;
     } else if (($_0_i | 0) == 10) {
      $op_0 = ($binop_0 | 0) == 0 ? 3 : 10;
      break;
     } else if (($_0_i | 0) == 29) {
      $_0$1 = 0;
      $_0$0 = 0;
      label = 351;
      break L1;
     } else {
      $op_0 = $_0_i;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 140) {
    label = 0;
    HEAP32[23336] = 0;
    $op_0 = $_0_i_ph;
   }
   if ((HEAP32[89594] & 32 | 0) != 0) {
    $450 = HEAP8[2672 + $op_0 | 0] | 0;
    $452 = HEAP8[$15] | 0;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 18128, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[2552 + ($op_0 << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = $450, HEAP32[tempVarArgs + 16 >> 2] = $binop_0, HEAP32[tempVarArgs + 24 >> 2] = $452, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
   }
   if (($op_0 | 0) != 1) {
    break;
   }
   if (($binop_0 | 0) != 0) {
    label = 149;
    break L1;
   }
   if ($7 >>> 0 <= $valp_0 >>> 0) {
    label = 151;
    break L1;
   }
   if ((HEAP32[89594] & 32 | 0) != 0) {
    $$etemp$39 = 360152;
    $ev_idx_val$0 = HEAP32[$$etemp$39 >> 2] | 0;
    $ev_idx_val$1 = HEAP32[$$etemp$39 + 4 >> 2] | 0;
    $469 = (HEAP32[90040] | 0) != 0 ? 368672 : 14376;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 12032, HEAP32[tempVarArgs + 8 >> 2] = $469, HEAP32[tempVarArgs + 16 >> 2] = $ev_idx_val$0, HEAP32[tempVarArgs + 24 >> 2] = $ev_idx_val$1, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 10632, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $valp_0 - $8 >> 4, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
   }
   $$etemp$44 = 360152;
   $476$1 = HEAP32[$$etemp$44 + 4 >> 2] | 0;
   $477 = $valp_0 | 0;
   HEAP32[$477 >> 2] = HEAP32[$$etemp$44 >> 2];
   HEAP32[$477 + 4 >> 2] = $476$1;
   HEAP32[$valp_0 + 8 >> 2] = HEAP32[90040];
   $valp_0 = $valp_0 + 16 | 0;
   $binop_0 = 1;
  }
  $483 = HEAP8[2672 + $op_0 | 0] | 0;
  $484 = $483 << 24 >> 24;
  if (($binop_0 | 0) != ($484 & 1 | 0)) {
   label = 156;
   break;
  }
  $495 = $484 >>> 1 & 1;
  $496 = ($op_0 | 0) == 27;
  $497 = 2552 + ($op_0 << 2) | 0;
  $opp_1 = $opp_0_ph;
  $valp_1 = $valp_0;
  $skip_cur_1 = $skip_cur_0_ph;
  $parens_1 = $parens_0_ph;
  while (1) {
   if ((HEAP32[89594] & 32 | 0) == 0) {
    $_pre_phi = $opp_1 + 1 | 0;
   } else {
    $508 = HEAP32[2552 + (HEAP8[$opp_1 | 0] << 2) >> 2] | 0;
    $509 = $opp_1 + 1 | 0;
    $511 = HEAP8[$509] | 0;
    $514 = HEAP8[$opp_1 + 2 | 0] | 0;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 7312, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 40 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$497 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $484, HEAP32[tempVarArgs + 16 >> 2] = $508, HEAP32[tempVarArgs + 24 >> 2] = $511, HEAP32[tempVarArgs + 32 >> 2] = $514, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $_pre_phi = $509;
   }
   if ((HEAP8[$_pre_phi] | 0) < $483 << 24 >> 24) {
    break;
   }
   $594 = HEAP8[$opp_1 + 2 | 0] | 0;
   $596 = HEAP8[$opp_1 | 0] | 0;
   $597 = $596 << 24 >> 24;
   if (($597 | 0) == 28) {
    if (($op_0 | 0) == 27) {
     label = 187;
     break L1;
    } else if (($op_0 | 0) == 0) {
     label = 188;
     break L1;
    } else {
     $opp_3 = $opp_1;
     $valp_2 = $valp_1;
     $parens_3 = $parens_1;
    }
   } else if (($597 | 0) == 2) {
    if (!$496) {
     label = 190;
     break L1;
    }
    $opp_3 = $opp_1 - 3 | 0;
    $valp_2 = $valp_1;
    $parens_3 = $parens_1 - 1 | 0;
   } else if (($597 | 0) == 26) {
    $609 = $opp_1 - 3 | 0;
    $611 = HEAP8[$609 | 0] | 0;
    if ($611 << 24 >> 24 == 25) {
     $opp_2 = $609;
     label = 194;
    } else {
     label = 193;
     break L1;
    }
   } else if (($597 | 0) == 25) {
    $opp_3 = $opp_1;
    $valp_2 = $valp_1;
    $parens_3 = $parens_1;
   } else {
    $opp_2 = $opp_1;
    label = 194;
   }
   do {
    if ((label | 0) == 194) {
     label = 0;
     $617 = $opp_2 - 3 | 0;
     if ((HEAP32[89594] & 32 | 0) != 0) {
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 18304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[2552 + ($597 << 2) >> 2], tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      _dump_stack($3, $617, $2, $valp_1);
     }
     HEAP32[23336] = $596 << 24 >> 24 == 26 ? 0 : $594;
     HEAP32[$1 >> 2] = $valp_1;
     $628 = $596 << 24 >> 24 > 6;
     $629 = $596 << 24 >> 24 < 27;
     $630 = ($597 - 7 | 0) >>> 0 < 20 >>> 0;
     if ($630) {
      $632 = $valp_1 - 16 | 0;
      HEAP32[$1 >> 2] = $632;
      $633 = $632 | 0;
      $sign2_0_i = HEAP32[$valp_1 - 16 + 8 >> 2] | 0;
      $v2_0_i$1 = HEAP32[$633 + 4 >> 2] | 0;
      $v2_0_i$0 = HEAP32[$633 >> 2] | 0;
      $637 = $632;
     } else {
      $sign2_0_i = 1;
      $v2_0_i$1 = 0;
      $v2_0_i$0 = 0;
      $637 = $valp_1;
     }
     $638 = $637 - 16 | 0;
     HEAP32[$1 >> 2] = $638;
     $639 = $638 | 0;
     $640$0 = HEAP32[$639 >> 2] | 0;
     $640$1 = HEAP32[$639 + 4 >> 2] | 0;
     $642 = HEAP32[$637 - 16 + 8 >> 2] | 0;
     if ((HEAP32[89594] & 32 | 0) != 0) {
      if ($628) {
       $649 = $629 ? 13896 : 13808;
      } else {
       $649 = 13808;
      }
      $651 = HEAP32[2552 + ($597 << 2) >> 2] | 0;
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14024, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $649, HEAP32[tempVarArgs + 8 >> 2] = $651, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      $653 = HEAP32[$1 >> 2] | 0;
      $_idx69_i = $653 | 0;
      $_idx69_val_i$0 = HEAP32[$_idx69_i >> 2] | 0;
      $_idx69_val_i$1 = HEAP32[$_idx69_i + 4 >> 2] | 0;
      $656 = (HEAP32[$653 + 8 >> 2] | 0) != 0 ? 368672 : 14376;
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 13720, HEAP32[tempVarArgs + 8 >> 2] = $656, HEAP32[tempVarArgs + 16 >> 2] = $_idx69_val_i$0, HEAP32[tempVarArgs + 24 >> 2] = $_idx69_val_i$1, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      if ($630) {
       $659 = HEAP32[$1 >> 2] | 0;
       $_idx_i = $659 + 16 | 0;
       $_idx_val_i$0 = HEAP32[$_idx_i >> 2] | 0;
       $_idx_val_i$1 = HEAP32[$_idx_i + 4 >> 2] | 0;
       $662 = (HEAP32[$659 + 24 >> 2] | 0) != 0 ? 368672 : 14376;
       FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 13600, HEAP32[tempVarArgs + 8 >> 2] = $662, HEAP32[tempVarArgs + 16 >> 2] = $_idx_val_i$0, HEAP32[tempVarArgs + 24 >> 2] = $_idx_val_i$1, tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
      }
      FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
     }
     do {
      if ((HEAP32[592] | 0) == 0) {
       $sign1_0_i = $642;
      } else {
       if (($sign2_0_i | 0) != 0 & ($642 | 0) != 0 | $630 ^ 1) {
        $sign1_0_i = $642;
        break;
       }
       if (($597 | 0) == 24 | ($597 | 0) == 23 | ($597 | 0) == 13 | ($597 | 0) == 12) {
        $sign1_0_i = $642;
        break;
       }
       $671 = ($642 | 0) == 1;
       $$etemp$73$1 = 0;
       if ($671 & (($640$1 | 0) < ($$etemp$73$1 | 0) | ($640$1 | 0) == ($$etemp$73$1 | 0) & $640$0 >>> 0 < 0 >>> 0)) {
        label = 209;
       } else {
        $$etemp$74$1 = 0;
        if (($sign2_0_i | 0) == 1 & (($v2_0_i$1 | 0) < ($$etemp$74$1 | 0) | ($v2_0_i$1 | 0) == ($$etemp$74$1 | 0) & $v2_0_i$0 >>> 0 < 0 >>> 0)) {
         label = 209;
        }
       }
       do {
        if ((label | 0) == 209) {
         label = 0;
         $678 = HEAP32[4] | 0;
         if ((HEAP32[23336] | 0) == 0) {
          if (($678 & 1 | 0) == 0) {
           break;
          }
         } else {
          if (($678 & 8 | 0) == 0) {
           break;
          }
         }
         $685$0 = $671 ? $640$0 : $v2_0_i$0;
         $685$1 = $671 ? $640$1 : $v2_0_i$1;
         _sprintf($13 | 0, 14136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = $685$0, HEAP32[tempVarArgs + 8 >> 2] = $685$1, HEAP32[tempVarArgs + 16 >> 2] = $685$0, HEAP32[tempVarArgs + 24 >> 2] = $685$1, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         _cwarn($13, (HEAP32[23336] | 0) != 0 ? 12504 : 0, 0, 0);
        }
       } while (0);
       HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 0;
       $sign1_0_i = 0;
      }
     } while (0);
     do {
      if (($597 - 12 | 0) >>> 0 < 2 >>> 0) {
       $695 = HEAP32[23336] | 0;
       $696 = ($695 | 0) == 0;
       $697 = HEAP32[4] | 0;
       if ($696) {
        if (($697 & 1 | 0) == 0) {
         label = 225;
         break;
        }
       } else {
        if (($697 & 8 | 0) == 0) {
         label = 225;
         break;
        }
       }
       $$etemp$76$1 = 0;
       if ($v2_0_i$1 >>> 0 > $$etemp$76$1 >>> 0 | $v2_0_i$1 >>> 0 == $$etemp$76$1 >>> 0 & $v2_0_i$0 >>> 0 > 63 >>> 0) {
        _cwarn(13472, 0, $v2_0_i$0, ($695 | 0) != 0 ? 12504 : 0);
        $741 = 0;
        label = 231;
        break;
       }
       $$etemp$77$1 = 0;
       if (!((HEAP32[23328] | 0) == 0 & (($v2_0_i$1 | 0) > ($$etemp$77$1 | 0) | ($v2_0_i$1 | 0) == ($$etemp$77$1 | 0) & $v2_0_i$0 >>> 0 > 31 >>> 0))) {
        label = 225;
        break;
       }
       if ($696) {
        if (($697 & 1 | 0) == 0) {
         label = 225;
         break;
        }
       } else {
        if (($697 & 8 | 0) == 0) {
         label = 225;
         break;
        }
       }
       _cwarn(13360, 0, $v2_0_i$0, ($695 | 0) != 0 ? 12504 : 0);
       label = 225;
      } else {
       label = 225;
      }
     } while (0);
     do {
      if ((label | 0) == 225) {
       label = 0;
       $724 = ($v2_0_i$0 | 0) == 0 & ($v2_0_i$1 | 0) == 0;
       if (!(($597 - 8 | 0) >>> 0 < 2 >>> 0 & $724)) {
        $741 = $724;
        label = 231;
        break;
       }
       if ((HEAP32[23336] | 0) == 0) {
        _cerror(14272, 0, 0, 0);
        HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = -1;
        $_0_i105 = HEAP32[$1 >> 2] | 0;
        break;
       }
       if ((HEAP32[4] & 8 | 0) != 0) {
        _cwarn(14272, 0, 0, 12504);
       }
       HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = $sign1_0_i;
       $739 = HEAP32[$1 >> 2] | 0;
       $740 = $739 | 0;
       HEAP32[$740 >> 2] = -1;
       HEAP32[$740 + 4 >> 2] = -1;
       $_0_i105 = $739;
      }
     } while (0);
     do {
      if ((label | 0) == 231) {
       label = 0;
       $746 = HEAP32[2552 + ($597 << 2) >> 2] | 0;
       $747 = HEAP32[$1 >> 2] | 0;
       L260 : do {
        if ((HEAP32[592] | 0) == 0 | ($sign1_0_i | 0) == 1) {
         switch ($597 | 0) {
         case 4:
          {
           $_pre152_i_i$0 = _i64Subtract(0, 0, $640$0, $640$1) | 0;
           $_pre152_i_i$1 = tempRet0;
           if (($640$0 | 0) == 0 & ($640$1 | 0) == 0) {
            $v1_0_i$1 = $_pre152_i_i$1;
            $v1_0_i$0 = $_pre152_i_i$0;
            $1015 = $747;
            break L260;
           }
           $752 = ($640$0 | 0) == ($_pre152_i_i$0 | 0) & ($640$1 | 0) == ($_pre152_i_i$1 | 0);
           $753 = $752 & 1;
           if (!$752) {
            if ((HEAP32[23328] | 0) != 0) {
             $v1_0_i$1 = $_pre152_i_i$1;
             $v1_0_i$0 = $_pre152_i_i$0;
             $1015 = $747;
             break L260;
            }
            if (($640$0 | 0) != ($_pre152_i_i$0 | 0)) {
             $v1_0_i$1 = $_pre152_i_i$1;
             $v1_0_i$0 = $_pre152_i_i$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, $753);
           $v1_0_i$1 = $_pre152_i_i$1;
           $v1_0_i$0 = $_pre152_i_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 5:
          {
           $v1_0_i$1 = ~$640$1;
           $v1_0_i$0 = ~$640$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 6:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$0 | 0) == 0 & ($640$1 | 0) == 0 & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 7:
          {
           $767$0 = ___muldi3($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $767$1 = tempRet0;
           if ((HEAP32[23328] | 0) != 0 | ($640$0 | 0) == 0 & ($640$1 | 0) == 0 | $741) {
            $v1_0_i$1 = $767$1;
            $v1_0_i$0 = $767$0;
            $1015 = $747;
            break L260;
           }
           $770 = $767$0;
           $771 = $640$0;
           $773 = $v2_0_i$0;
           if ((($770 | 0) / ($771 | 0) | 0 | 0) == ($773 | 0)) {
            if ((($770 | 0) / ($773 | 0) | 0 | 0) == ($771 | 0)) {
             $v1_0_i$1 = $767$1;
             $v1_0_i$0 = $767$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, 0);
           $v1_0_i$1 = $767$1;
           $v1_0_i$0 = $767$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 8:
         case 9:
          {
           $780$0 = _i64Subtract(0, 0, $640$0, $640$1) | 0;
           $__i_i101 = ($640$0 | 0) == ($780$0 | 0) & ($640$1 | 0) == (tempRet0 | 0) & (($v2_0_i$0 | 0) == (-1 | 0) & ($v2_0_i$1 | 0) == (-1 | 0));
           $783 = $__i_i101 & 1;
           do {
            if ($__i_i101) {
             label = 248;
            } else {
             if ((HEAP32[23328] | 0) != 0) {
              break;
             }
             if (($780$0 | 0) == ($640$0 | 0)) {
              if (($v2_0_i$0 | 0) == -1) {
               label = 248;
               break;
              }
             }
             $796$1 = $640$1 | $v2_0_i$1;
             $$etemp$89$1 = 0;
             if (!(($796$1 | 0) < ($$etemp$89$1 | 0) | ($796$1 | 0) == ($$etemp$89$1 | 0) & ($640$0 | $v2_0_i$0) >>> 0 < 0 >>> 0)) {
              break;
             }
             $799 = HEAP32[23336] | 0;
             $801 = HEAP32[4] | 0;
             if (($799 | 0) == 0) {
              if (($801 & 1 | 0) == 0) {
               break;
              }
             } else {
              if (($801 & 8 | 0) == 0) {
               break;
              }
             }
             _cwarn(12664, $746, 0, ($799 | 0) != 0 ? 12504 : 0);
            }
           } while (0);
           if ((label | 0) == 248) {
            label = 0;
            _overflow($746, $1, $783);
           }
           if ($596 << 24 >> 24 == 8) {
            $812$0 = ___divdi3($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
            $v1_0_i$1 = tempRet0;
            $v1_0_i$0 = $812$0;
            $1015 = $747;
            break L260;
           } else {
            $814$0 = ___remdi3($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
            $v1_0_i$1 = tempRet0;
            $v1_0_i$0 = $814$0;
            $1015 = $747;
            break L260;
           }
           break;
          }
         case 10:
          {
           $816$0 = _i64Add($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $816$1 = tempRet0;
           if ((HEAP32[23328] | 0) != 0) {
            $v1_0_i$1 = $816$1;
            $v1_0_i$0 = $816$0;
            $1015 = $747;
            break L260;
           }
           $820 = $v2_0_i$0;
           if (($820 | 0) > 0) {
            if (($640$0 | 0) <= ($816$0 | 0)) {
             $v1_0_i$1 = $816$1;
             $v1_0_i$0 = $816$0;
             $1015 = $747;
             break L260;
            }
           } else {
            if (($820 | 0) >= 0) {
             $v1_0_i$1 = $816$1;
             $v1_0_i$0 = $816$0;
             $1015 = $747;
             break L260;
            }
            if (($640$0 | 0) >= ($816$0 | 0)) {
             $v1_0_i$1 = $816$1;
             $v1_0_i$0 = $816$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, 0);
           $v1_0_i$1 = $816$1;
           $v1_0_i$0 = $816$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 11:
          {
           $833$0 = _i64Subtract($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $833$1 = tempRet0;
           if ((HEAP32[23328] | 0) != 0) {
            $v1_0_i$1 = $833$1;
            $v1_0_i$0 = $833$0;
            $1015 = $747;
            break L260;
           }
           $837 = $v2_0_i$0;
           if (($837 | 0) > 0) {
            if (($833$0 | 0) <= ($640$0 | 0)) {
             $v1_0_i$1 = $833$1;
             $v1_0_i$0 = $833$0;
             $1015 = $747;
             break L260;
            }
           } else {
            if (($837 | 0) >= 0) {
             $v1_0_i$1 = $833$1;
             $v1_0_i$0 = $833$0;
             $1015 = $747;
             break L260;
            }
            if (($833$0 | 0) >= ($640$0 | 0)) {
             $v1_0_i$1 = $833$1;
             $v1_0_i$0 = $833$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, 0);
           $v1_0_i$1 = $833$1;
           $v1_0_i$0 = $833$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 12:
          {
           $850$0 = _bitshift64Shl($640$0 | 0, $640$1 | 0, $v2_0_i$0 | 0) | 0;
           $v1_0_i$1 = tempRet0;
           $v1_0_i$0 = $850$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 13:
          {
           $$etemp$90$1 = 0;
           do {
            if (($640$1 | 0) < ($$etemp$90$1 | 0) | ($640$1 | 0) == ($$etemp$90$1 | 0) & $640$0 >>> 0 < 0 >>> 0) {
             $854 = HEAP32[23336] | 0;
             $856 = HEAP32[4] | 0;
             if (($854 | 0) == 0) {
              if (($856 & 1 | 0) == 0) {
               break;
              }
             } else {
              if (($856 & 8 | 0) == 0) {
               break;
              }
             }
             _cwarn(12664, $746, 0, ($854 | 0) != 0 ? 12504 : 0);
            }
           } while (0);
           $866$0 = _bitshift64Ashr($640$0 | 0, $640$1 | 0, $v2_0_i$0 | 0) | 0;
           $v1_0_i$1 = tempRet0;
           $v1_0_i$0 = $866$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 14:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($640$1 | 0) < ($v2_0_i$1 | 0) | ($640$1 | 0) == ($v2_0_i$1 | 0) & $640$0 >>> 0 < $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 15:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$1 | 0) <= ($v2_0_i$1 | 0) & (($640$1 | 0) < ($v2_0_i$1 | 0) | $640$0 >>> 0 <= $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 16:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($640$1 | 0) > ($v2_0_i$1 | 0) | ($640$1 | 0) == ($v2_0_i$1 | 0) & $640$0 >>> 0 > $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 17:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$1 | 0) >= ($v2_0_i$1 | 0) & (($640$1 | 0) > ($v2_0_i$1 | 0) | $640$0 >>> 0 >= $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 18:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$0 | 0) == ($v2_0_i$0 | 0) & ($640$1 | 0) == ($v2_0_i$1 | 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 19:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($640$0 | 0) != ($v2_0_i$0 | 0) | ($640$1 | 0) != ($v2_0_i$1 | 0)) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 20:
          {
           $v1_0_i$1 = $640$1 & $v2_0_i$1;
           $v1_0_i$0 = $640$0 & $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 21:
          {
           $v1_0_i$1 = $640$1 ^ $v2_0_i$1;
           $v1_0_i$0 = $640$0 ^ $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 22:
          {
           $v1_0_i$1 = $640$1 | $v2_0_i$1;
           $v1_0_i$0 = $640$0 | $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 23:
          {
           if (($640$0 | 0) == 0 & ($640$1 | 0) == 0) {
            $v1_0_i$1 = 0;
            $v1_0_i$0 = 0;
            $1015 = $747;
            break L260;
           }
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($v2_0_i$0 | 0) != 0 | ($v2_0_i$1 | 0) != 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 24:
          {
           if (!(($640$0 | 0) == 0 & ($640$1 | 0) == 0)) {
            $v1_0_i$1 = 0;
            $v1_0_i$0 = 1;
            $1015 = $747;
            break L260;
           }
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($v2_0_i$0 | 0) != 0 | ($v2_0_i$1 | 0) != 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 26:
          {
           $900 = $747 - 16 | 0;
           HEAP32[$1 >> 2] = $900;
           $901 = $900 | 0;
           $903 = (HEAP32[$901 >> 2] | 0) != 0 | (HEAP32[$901 + 4 >> 2] | 0) != 0;
           $v1_0_i$1 = $903 ? $640$1 : $v2_0_i$1;
           $v1_0_i$0 = $903 ? $640$0 : $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 0:
         case 3:
          {
           $v1_0_i$1 = $640$1;
           $v1_0_i$0 = $640$0;
           $1015 = $747;
           break L260;
           break;
          }
         default:
          {
           _cfatal(12840, $746, 0, 0);
           $v1_0_i$1 = $640$1;
           $v1_0_i$0 = $640$0;
           $1015 = $747;
           break L260;
          }
         }
        } else {
         $907 = HEAP32[23328] | 0;
         if (($907 | 0) == 0) {
          $$etemp$98$1 = 0;
          $$etemp$99$1 = 0;
          $913 = $640$1 >>> 0 > $$etemp$98$1 >>> 0 | $640$1 >>> 0 == $$etemp$98$1 >>> 0 & $640$0 >>> 0 > -1 >>> 0 | ($v2_0_i$1 >>> 0 > $$etemp$99$1 >>> 0 | $v2_0_i$1 >>> 0 == $$etemp$99$1 >>> 0 & $v2_0_i$0 >>> 0 > -1 >>> 0);
         } else {
          $913 = 0;
         }
         switch ($597 | 0) {
         case 4:
          {
           $915$0 = _i64Subtract(0, 0, $640$0, $640$1) | 0;
           $915$1 = tempRet0;
           if (($640$0 | 0) == 0 & ($640$1 | 0) == 0) {
            $v1_0_i$1 = $915$1;
            $v1_0_i$0 = $915$0;
            $1015 = $747;
            break L260;
           }
           if ((HEAP32[23336] | 0) != 0) {
            if ((HEAP32[4] & 8 | 0) == 0) {
             $v1_0_i$1 = $915$1;
             $v1_0_i$0 = $915$0;
             $1015 = $747;
             break L260;
            }
            _cwarn(13056, $746, 0, 12504);
            $v1_0_i$1 = $915$1;
            $v1_0_i$0 = $915$0;
            $1015 = $747;
            break L260;
           }
           if ((HEAP32[$747 + 8 >> 2] | 0) != 0) {
            _cerror(13056, $746, 0, 0);
            HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = -1;
            $v1_0_i$1 = $915$1;
            $v1_0_i$0 = $915$0;
            $1015 = $747;
            break L260;
           }
           if ((HEAP32[4] & 1 | 0) == 0) {
            $v1_0_i$1 = $915$1;
            $v1_0_i$0 = $915$0;
            $1015 = $747;
            break L260;
           }
           _cwarn(13056, $746, 0, 0);
           $v1_0_i$1 = $915$1;
           $v1_0_i$0 = $915$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 5:
          {
           $v1_0_i$1 = ~$640$1;
           $v1_0_i$0 = ~$640$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 6:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$0 | 0) == 0 & ($640$1 | 0) == 0 & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 7:
          {
           $943$0 = ___muldi3($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $943$1 = tempRet0;
           do {
            if (($640$0 | 0) == 0 & ($640$1 | 0) == 0 | $741) {
             $952 = 0;
             label = 307;
            } else {
             $946$0 = ___udivdi3($943$0, $943$1, $v2_0_i$0, $v2_0_i$1) | 0;
             if (!(($946$0 | 0) == ($640$0 | 0) & (tempRet0 | 0) == ($640$1 | 0))) {
              $954 = 1;
              break;
             }
             $949$0 = ___udivdi3($943$0, $943$1, $640$0, $640$1) | 0;
             $950 = ($949$0 | 0) != ($v2_0_i$0 | 0) | (tempRet0 | 0) != ($v2_0_i$1 | 0);
             $951 = $950 & 1;
             if ($950) {
              $954 = $951;
             } else {
              $952 = $951;
              label = 307;
             }
            }
           } while (0);
           if ((label | 0) == 307) {
            label = 0;
            $$etemp$105$1 = 0;
            if (($943$1 >>> 0 > $$etemp$105$1 >>> 0 | $943$1 >>> 0 == $$etemp$105$1 >>> 0 & $943$0 >>> 0 > -1 >>> 0) & ((($907 | 0) != 0 | $913) ^ 1)) {
             $954 = $952;
            } else {
             $v1_0_i$1 = $943$1;
             $v1_0_i$0 = $943$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, $954);
           $v1_0_i$1 = $943$1;
           $v1_0_i$0 = $943$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 8:
          {
           $956$0 = ___udivdi3($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $v1_0_i$1 = tempRet0;
           $v1_0_i$0 = $956$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 9:
          {
           $958$0 = ___uremdi3($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $v1_0_i$1 = tempRet0;
           $v1_0_i$0 = $958$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 10:
          {
           $960$0 = _llvm_uadd_with_overflow_i64($640$0 | 0, $640$1 | 0, $v2_0_i$0 | 0, $v2_0_i$1 | 0) | 0;
           $960$1 = tempRet0;
           $961 = tempRet1;
           $962 = $961 & 1;
           if (!$961) {
            $$etemp$106$1 = 0;
            if (!(($960$1 >>> 0 > $$etemp$106$1 >>> 0 | $960$1 >>> 0 == $$etemp$106$1 >>> 0 & $960$0 >>> 0 > -1 >>> 0) & ((($907 | 0) != 0 | $913) ^ 1))) {
             $v1_0_i$1 = $960$1;
             $v1_0_i$0 = $960$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, $962);
           $v1_0_i$1 = $960$1;
           $v1_0_i$0 = $960$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 11:
          {
           $967$0 = _i64Subtract($640$0, $640$1, $v2_0_i$0, $v2_0_i$1) | 0;
           $967$1 = tempRet0;
           $968 = $967$1 >>> 0 > $640$1 >>> 0 | $967$1 >>> 0 == $640$1 >>> 0 & $967$0 >>> 0 > $640$0 >>> 0;
           $969 = $968 & 1;
           if (!$968) {
            $$etemp$107$1 = 0;
            if (!(($967$1 >>> 0 > $$etemp$107$1 >>> 0 | $967$1 >>> 0 == $$etemp$107$1 >>> 0 & $967$0 >>> 0 > -1 >>> 0) & ((($907 | 0) != 0 | $913) ^ 1))) {
             $v1_0_i$1 = $967$1;
             $v1_0_i$0 = $967$0;
             $1015 = $747;
             break L260;
            }
           }
           _overflow($746, $1, $969);
           $v1_0_i$1 = $967$1;
           $v1_0_i$0 = $967$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 12:
          {
           $974$0 = _bitshift64Shl($640$0 | 0, $640$1 | 0, $v2_0_i$0 | 0) | 0;
           $v1_0_i$1 = tempRet0;
           $v1_0_i$0 = $974$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 13:
          {
           $976$0 = _bitshift64Lshr($640$0 | 0, $640$1 | 0, $v2_0_i$0 | 0) | 0;
           $v1_0_i$1 = tempRet0;
           $v1_0_i$0 = $976$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 14:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$1 >>> 0 < $v2_0_i$1 >>> 0 | $640$1 >>> 0 == $v2_0_i$1 >>> 0 & $640$0 >>> 0 < $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 15:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = $640$1 >>> 0 <= $v2_0_i$1 >>> 0 & ($640$1 >>> 0 < $v2_0_i$1 >>> 0 | $640$0 >>> 0 <= $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 16:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$1 >>> 0 > $v2_0_i$1 >>> 0 | $640$1 >>> 0 == $v2_0_i$1 >>> 0 & $640$0 >>> 0 > $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 17:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = $640$1 >>> 0 >= $v2_0_i$1 >>> 0 & ($640$1 >>> 0 > $v2_0_i$1 >>> 0 | $640$0 >>> 0 >= $v2_0_i$0 >>> 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 18:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = ($640$0 | 0) == ($v2_0_i$0 | 0) & ($640$1 | 0) == ($v2_0_i$1 | 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 19:
          {
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($640$0 | 0) != ($v2_0_i$0 | 0) | ($640$1 | 0) != ($v2_0_i$1 | 0)) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 20:
          {
           $v1_0_i$1 = $640$1 & $v2_0_i$1;
           $v1_0_i$0 = $640$0 & $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 21:
          {
           $v1_0_i$1 = $640$1 ^ $v2_0_i$1;
           $v1_0_i$0 = $640$0 ^ $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 22:
          {
           $v1_0_i$1 = $640$1 | $v2_0_i$1;
           $v1_0_i$0 = $640$0 | $v2_0_i$0;
           $1015 = $747;
           break L260;
           break;
          }
         case 23:
          {
           if (($640$0 | 0) == 0 & ($640$1 | 0) == 0) {
            $v1_0_i$1 = 0;
            $v1_0_i$0 = 0;
            $1015 = $747;
            break L260;
           }
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($v2_0_i$0 | 0) != 0 | ($v2_0_i$1 | 0) != 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 24:
          {
           if (!(($640$0 | 0) == 0 & ($640$1 | 0) == 0)) {
            $v1_0_i$1 = 0;
            $v1_0_i$0 = 1;
            $1015 = $747;
            break L260;
           }
           $v1_0_i$1 = 0;
           $v1_0_i$0 = (($v2_0_i$0 | 0) != 0 | ($v2_0_i$1 | 0) != 0) & 1;
           $1015 = $747;
           break L260;
           break;
          }
         case 26:
          {
           $1010 = $747 - 16 | 0;
           $1011 = $1010 | 0;
           $1013 = (HEAP32[$1011 >> 2] | 0) == 0 & (HEAP32[$1011 + 4 >> 2] | 0) == 0;
           $v1_0_i$1 = $1013 ? $v2_0_i$1 : $640$1;
           $v1_0_i$0 = $1013 ? $v2_0_i$0 : $640$0;
           $1015 = $1010;
           break L260;
           break;
          }
         case 0:
         case 3:
          {
           $v1_0_i$1 = $640$1;
           $v1_0_i$0 = $640$0;
           $1015 = $747;
           break L260;
           break;
          }
         default:
          {
           _cfatal(13216, $746, 0, 0);
           $v1_0_i$1 = 0;
           $v1_0_i$0 = 0;
           $1015 = $747;
           break L260;
          }
         }
        }
       } while (0);
       HEAP32[$1 >> 2] = $1015;
       $1016 = $1015 + 8 | 0;
       if ((HEAP32[$1016 >> 2] | 0) == -1) {
        $_0_i105 = $1015;
        break;
       }
       switch ($597 | 0) {
       case 6:
       case 18:
       case 19:
       case 14:
       case 15:
       case 16:
       case 17:
       case 23:
       case 24:
        {
         $storemerge_i = 1;
         break;
        }
       default:
        {
         $storemerge_i = $sign1_0_i;
        }
       }
       HEAP32[$1016 >> 2] = $storemerge_i;
       $1022 = HEAP32[$1 >> 2] | 0;
       $1023 = $1022 | 0;
       HEAP32[$1023 >> 2] = $v1_0_i$0;
       HEAP32[$1023 + 4 >> 2] = $v1_0_i$1;
       $_0_i105 = $1022;
      }
     } while (0);
     if ((HEAP32[$_0_i105 + 8 >> 2] | 0) == -1) {
      $_0$1 = 0;
      $_0$0 = 0;
      label = 354;
      break L1;
     }
     $1028 = $_0_i105 + 16 | 0;
     HEAP32[23336] = 0;
     if ((HEAP32[89594] & 32 | 0) == 0) {
      $opp_3 = $617;
      $valp_2 = $1028;
      $parens_3 = $parens_1;
      break;
     }
     FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 17472, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     _dump_stack($3, $617, $2, $1028);
     $opp_3 = $617;
     $valp_2 = $1028;
     $parens_3 = $parens_1;
    }
   } while (0);
   if (($596 << 24 >> 24 | 0) == 28 | ($596 << 24 >> 24 | 0) == 25 | ($596 << 24 >> 24 | 0) == 2) {
    $opp_0_ph = $opp_3;
    $valp_0_ph = $valp_2;
    $skip_cur_0_ph = $594;
    $binop_0_ph = $495;
    $parens_0_ph = $parens_3;
    continue L1;
   } else {
    $opp_1 = $opp_3;
    $valp_1 = $valp_2;
    $skip_cur_1 = $594;
    $parens_1 = $parens_3;
   }
  }
  do {
   if (($op_0 | 0) == 2) {
    if ((HEAP32[592] | 0) == 0) {
     $prec_0_off0 = 11;
     $parens_2 = $parens_1;
     break;
    }
    if ((HEAP32[4] & 4 | 0) == 0) {
     $prec_0_off0 = 11;
     $parens_2 = $parens_1;
     break;
    }
    $528 = $parens_1 + 1 | 0;
    $529 = HEAP32[587] | 0;
    if (($528 | 0) != ($529 + 1 | 0)) {
     $prec_0_off0 = 11;
     $parens_2 = $528;
     break;
    }
    _cwarn(6664, 0, $529, 0);
    $prec_0_off0 = 11;
    $parens_2 = $528;
   } else if (($op_0 | 0) == 25) {
    $prec_0_off0 = 20;
    $parens_2 = $parens_1;
   } else {
    $prec_0_off0 = ($op_0 - 3 | 0) >>> 0 < 4 >>> 0 ? 108 : $483;
    $parens_2 = $parens_1;
   }
  } while (0);
  $537 = HEAP8[$opp_1 + 2 | 0] | 0;
  $538 = $opp_1 + 3 | 0;
  if ($14 >>> 0 <= $538 >>> 0) {
   label = 171;
   break;
  }
  HEAP8[$538 | 0] = $op_0;
  HEAP8[$opp_1 + 4 | 0] = $prec_0_off0;
  $546 = $2 >>> 0 < $valp_1 >>> 0;
  if ($546) {
   $548 = $valp_1 - 16 | 0;
   $skip_cur_2 = ((HEAP32[$548 >> 2] | 0) != 0 | (HEAP32[$548 + 4 >> 2] | 0) != 0) & 1;
  } else {
   $skip_cur_2 = $skip_cur_1;
  }
  $554 = ($skip_cur_2 | 0) == 0;
  do {
   if (($op_0 | 0) == 23 & $554 ^ (($op_0 | 0) != 24 | $554)) {
    if (($op_0 | 0) == 25) {
     HEAP8[$opp_1 + 5 | 0] = $554 & 1 | $537 & 2;
     break;
    } else if (($op_0 | 0) == 26) {
     HEAP8[$opp_1 + 5 | 0] = $537 & 3 ^ 1;
     break;
    } else {
     HEAP8[$opp_1 + 5 | 0] = $537;
     break;
    }
   } else {
    HEAP8[$opp_1 + 5 | 0] = 2;
    if ($554) {
     break;
    }
    $559 = $valp_1 - 16 | 0;
    HEAP32[$559 >> 2] = 1;
    HEAP32[$559 + 4 >> 2] = 0;
   }
  } while (0);
  if ((HEAP32[89594] & 32 | 0) == 0) {
   $opp_0_ph = $538;
   $valp_0_ph = $valp_1;
   $skip_cur_0_ph = $skip_cur_2;
   $binop_0_ph = $495;
   $parens_0_ph = $parens_2;
   continue;
  }
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 20728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$497 >> 2], tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  if ($546) {
   $_idx = $valp_1 - 16 | 0;
   $_idx_val$0 = HEAP32[$_idx >> 2] | 0;
   $_idx_val$1 = HEAP32[$_idx + 4 >> 2] | 0;
   $583 = (HEAP32[$valp_1 - 16 + 8 >> 2] | 0) != 0 ? 368672 : 14376;
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 20280, HEAP32[tempVarArgs + 8 >> 2] = $583, HEAP32[tempVarArgs + 16 >> 2] = $_idx_val$0, HEAP32[tempVarArgs + 24 >> 2] = $_idx_val$1, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 19880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[HEAP32[89668] >> 2], tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _dump_stack($3, $538, $2, $valp_1);
  $opp_0_ph = $538;
  $valp_0_ph = $valp_1;
  $skip_cur_0_ph = $skip_cur_2;
  $binop_0_ph = $495;
  $parens_0_ph = $parens_2;
 }
 if ((label | 0) == 57) {
  _cerror(8936, 22344, 0, 0);
 } else if ((label | 0) == 74) {
  _cerror(9280, 0, 0, 0);
 } else if ((label | 0) == 80) {
  _unget_ch();
  _cerror(9048, 0, 0, 0);
 } else if ((label | 0) == 86) {
  _cerror(11680, 22344, 0, 0);
 } else if ((label | 0) == 62) {
  _cerror(8760, 22344, 0, 0);
 } else if ((label | 0) == 156) {
  if (($op_0 | 0) == 0) {
   _cerror(9224, 0, 0, 0);
   $_0$1 = 0;
   $_0$0 = 0;
   STACKTOP = sp;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   _cerror(8224, HEAP32[2552 + ($op_0 << 2) >> 2] | 0, 0, 0);
   $_0$1 = 0;
   $_0$0 = 0;
   STACKTOP = sp;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } else if ((label | 0) == 171) {
  _cerror(21592, 0, 767, HEAP32[$497 >> 2] | 0);
  $_0$1 = 0;
  $_0$0 = 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 187) {
  _cerror(19600, 0, 0, 0);
  $_0$1 = 0;
  $_0$0 = 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 188) {
  $601 = $valp_1 - 16 | 0;
  $_0$1 = HEAP32[$601 + 4 >> 2] | 0;
  $_0$0 = HEAP32[$601 >> 2] | 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 190) {
  _cerror(19280, 0, 0, 0);
  $_0$1 = 0;
  $_0$0 = 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 193) {
  _cerror(18936, HEAP32[2552 + ($611 << 24 >> 24 << 2) >> 2] | 0, 0, 0);
  $_0$1 = 0;
  $_0$0 = 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 21) {
  $81 = HEAP32[89668] | 0;
  if ((HEAP32[$81 + 8 >> 2] | 0) == 0) {
   $89 = HEAP32[$81 + 52 >> 2] | 0;
  } else {
   $89 = 368672;
  }
  _cerror(12248, $89, 0, 0);
 } else if ((label | 0) == 32) {
  _cerror(7768, 22344, 0, 0);
 } else if ((label | 0) == 133) {
  _cerror(11360, 22344, 0, 0);
 } else if ((label | 0) == 138) {
  _cerror(7768, 22344, 0, 0);
 } else if ((label | 0) == 139) {
  _cerror(11072, 0, $39, 0);
 } else if ((label | 0) == 149) {
  _cerror(14336, 22344, 0, 0);
  $_0$1 = 0;
  $_0$0 = 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 151) {
  _cerror(13112, 0, 511, 22344);
  $_0$1 = 0;
  $_0$0 = 0;
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 351) {
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else if ((label | 0) == 354) {
  STACKTOP = sp;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 }
 HEAP32[23336] = 0;
 $_0$1 = 0;
 $_0$0 = 0;
 STACKTOP = sp;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $35 = 0, $40 = 0, $45 = 0, $56 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $100 = 0, $105 = 0, $106 = 0, $109 = 0, $111 = 0, $117 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $132 = 0, $133 = 0, $_pre_phi = 0, $F4_0 = 0, $145 = 0, $150 = 0, $152 = 0, $153 = 0, $155 = 0, $157 = 0, $159 = 0, $161 = 0, $163 = 0, $165 = 0, $167 = 0, $172 = 0, $rsize_0_i = 0, $v_0_i = 0, $t_0_i = 0, $179 = 0, $183 = 0, $185 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $196 = 0, $197 = 0, $201 = 0, $203 = 0, $207 = 0, $211 = 0, $215 = 0, $220 = 0, $221 = 0, $224 = 0, $225 = 0, $RP_0_i = 0, $R_0_i = 0, $227 = 0, $228 = 0, $231 = 0, $232 = 0, $R_1_i = 0, $242 = 0, $244 = 0, $258 = 0, $274 = 0, $286 = 0, $300 = 0, $304 = 0, $315 = 0, $318 = 0, $319 = 0, $320 = 0, $322 = 0, $323 = 0, $324 = 0, $330 = 0, $331 = 0, $_pre_phi_i = 0, $F1_0_i = 0, $342 = 0, $348 = 0, $349 = 0, $350 = 0, $353 = 0, $354 = 0, $361 = 0, $362 = 0, $365 = 0, $367 = 0, $370 = 0, $375 = 0, $idx_0_i = 0, $383 = 0, $391 = 0, $rst_0_i = 0, $sizebits_0_i = 0, $t_0_i116 = 0, $rsize_0_i117 = 0, $v_0_i118 = 0, $396 = 0, $397 = 0, $rsize_1_i = 0, $v_1_i = 0, $403 = 0, $406 = 0, $rst_1_i = 0, $t_1_i = 0, $rsize_2_i = 0, $v_2_i = 0, $414 = 0, $417 = 0, $422 = 0, $424 = 0, $425 = 0, $427 = 0, $429 = 0, $431 = 0, $433 = 0, $435 = 0, $437 = 0, $439 = 0, $t_2_ph_i = 0, $v_330_i = 0, $rsize_329_i = 0, $t_228_i = 0, $449 = 0, $450 = 0, $_rsize_3_i = 0, $t_2_v_3_i = 0, $452 = 0, $455 = 0, $v_3_lcssa_i = 0, $rsize_3_lcssa_i = 0, $463 = 0, $464 = 0, $467 = 0, $468 = 0, $472 = 0, $474 = 0, $478 = 0, $482 = 0, $486 = 0, $491 = 0, $492 = 0, $495 = 0, $496 = 0, $RP_0_i119 = 0, $R_0_i120 = 0, $498 = 0, $499 = 0, $502 = 0, $503 = 0, $R_1_i122 = 0, $513 = 0, $515 = 0, $529 = 0, $545 = 0, $557 = 0, $571 = 0, $575 = 0, $586 = 0, $589 = 0, $591 = 0, $592 = 0, $593 = 0, $599 = 0, $600 = 0, $_pre_phi_i128 = 0, $F5_0_i = 0, $612 = 0, $613 = 0, $620 = 0, $621 = 0, $624 = 0, $626 = 0, $629 = 0, $634 = 0, $I7_0_i = 0, $641 = 0, $648 = 0, $649 = 0, $668 = 0, $T_0_i = 0, $K12_0_i = 0, $677 = 0, $678 = 0, $694 = 0, $695 = 0, $697 = 0, $711 = 0, $nb_0 = 0, $714 = 0, $717 = 0, $718 = 0, $721 = 0, $736 = 0, $743 = 0, $746 = 0, $747 = 0, $748 = 0, $762 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $791 = 0, $794 = 0, $sp_0_i_i = 0, $796 = 0, $797 = 0, $800 = 0, $806 = 0, $809 = 0, $812 = 0, $813 = 0, $814 = 0, $ssize_0_i = 0, $824 = 0, $825 = 0, $829 = 0, $835 = 0, $836 = 0, $840 = 0, $843 = 0, $847 = 0, $ssize_1_i = 0, $br_0_i = 0, $tsize_0_i = 0, $tbase_0_i = 0, $849 = 0, $856 = 0, $860 = 0, $ssize_2_i = 0, $tsize_0303639_i = 0, $tsize_1_i = 0, $876 = 0, $877 = 0, $881 = 0, $883 = 0, $_tbase_1_i = 0, $tbase_245_i = 0, $tsize_244_i = 0, $886 = 0, $890 = 0, $893 = 0, $i_02_i_i = 0, $899 = 0, $901 = 0, $908 = 0, $914 = 0, $917 = 0, $sp_067_i = 0, $925 = 0, $926 = 0, $927 = 0, $932 = 0, $939 = 0, $944 = 0, $946 = 0, $947 = 0, $949 = 0, $955 = 0, $958 = 0, $968 = 0, $sp_160_i = 0, $970 = 0, $975 = 0, $982 = 0, $986 = 0, $993 = 0, $996 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $_sum_i21_i = 0, $1009 = 0, $1010 = 0, $1011 = 0, $1019 = 0, $1028 = 0, $_sum2_i23_i = 0, $1037 = 0, $1041 = 0, $1042 = 0, $1047 = 0, $1050 = 0, $1053 = 0, $1076 = 0, $_pre_phi57_i_i = 0, $1081 = 0, $1084 = 0, $1087 = 0, $1092 = 0, $1097 = 0, $1101 = 0, $_sum67_i_i = 0, $1107 = 0, $1108 = 0, $1112 = 0, $1113 = 0, $RP_0_i_i = 0, $R_0_i_i = 0, $1115 = 0, $1116 = 0, $1119 = 0, $1120 = 0, $R_1_i_i = 0, $1132 = 0, $1134 = 0, $1148 = 0, $_sum3233_i_i = 0, $1165 = 0, $1178 = 0, $qsize_0_i_i = 0, $oldfirst_0_i_i = 0, $1194 = 0, $1202 = 0, $1205 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $1215 = 0, $1216 = 0, $_pre_phi_i25_i = 0, $F4_0_i_i = 0, $1228 = 0, $1229 = 0, $1236 = 0, $1237 = 0, $1240 = 0, $1242 = 0, $1245 = 0, $1250 = 0, $I7_0_i_i = 0, $1257 = 0, $1264 = 0, $1265 = 0, $1284 = 0, $T_0_i27_i = 0, $K8_0_i_i = 0, $1293 = 0, $1294 = 0, $1310 = 0, $1311 = 0, $1313 = 0, $1327 = 0, $sp_0_i_i_i = 0, $1330 = 0, $1334 = 0, $1335 = 0, $1341 = 0, $1348 = 0, $1349 = 0, $1353 = 0, $1354 = 0, $1358 = 0, $1364 = 0, $1367 = 0, $1377 = 0, $1380 = 0, $1381 = 0, $1389 = 0, $1392 = 0, $1398 = 0, $1401 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1411 = 0, $1412 = 0, $_pre_phi_i_i = 0, $F_0_i_i = 0, $1422 = 0, $1423 = 0, $1430 = 0, $1431 = 0, $1434 = 0, $1436 = 0, $1439 = 0, $1444 = 0, $I1_0_i_i = 0, $1451 = 0, $1455 = 0, $1456 = 0, $1471 = 0, $T_0_i_i = 0, $K2_0_i_i = 0, $1480 = 0, $1481 = 0, $1494 = 0, $1495 = 0, $1497 = 0, $1507 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $mem_0 = 0, label = 0;
 do {
  if ($bytes >>> 0 < 245 >>> 0) {
   if ($bytes >>> 0 < 11 >>> 0) {
    $8 = 16;
   } else {
    $8 = $bytes + 11 & -8;
   }
   $9 = $8 >>> 3;
   $10 = HEAP32[92174] | 0;
   $11 = $10 >>> ($9 >>> 0);
   if (($11 & 3 | 0) != 0) {
    $17 = ($11 & 1 ^ 1) + $9 | 0;
    $18 = $17 << 1;
    $20 = 368736 + ($18 << 2) | 0;
    $21 = 368736 + ($18 + 2 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    do {
     if (($20 | 0) == ($24 | 0)) {
      HEAP32[92174] = $10 & ~(1 << $17);
     } else {
      if ($24 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
       _abort();
       return 0;
      }
      $35 = $24 + 12 | 0;
      if ((HEAP32[$35 >> 2] | 0) == ($22 | 0)) {
       HEAP32[$35 >> 2] = $20;
       HEAP32[$21 >> 2] = $24;
       break;
      } else {
       _abort();
       return 0;
      }
     }
    } while (0);
    $40 = $17 << 3;
    HEAP32[$22 + 4 >> 2] = $40 | 3;
    $45 = $22 + ($40 | 4) | 0;
    HEAP32[$45 >> 2] = HEAP32[$45 >> 2] | 1;
    $mem_0 = $23;
    return $mem_0 | 0;
   }
   if ($8 >>> 0 <= (HEAP32[92176] | 0) >>> 0) {
    $nb_0 = $8;
    break;
   }
   if (($11 | 0) != 0) {
    $56 = 2 << $9;
    $59 = $11 << $9 & ($56 | -$56);
    $62 = ($59 & -$59) - 1 | 0;
    $64 = $62 >>> 12 & 16;
    $65 = $62 >>> ($64 >>> 0);
    $67 = $65 >>> 5 & 8;
    $69 = $65 >>> ($67 >>> 0);
    $71 = $69 >>> 2 & 4;
    $73 = $69 >>> ($71 >>> 0);
    $75 = $73 >>> 1 & 2;
    $77 = $73 >>> ($75 >>> 0);
    $79 = $77 >>> 1 & 1;
    $82 = ($67 | $64 | $71 | $75 | $79) + ($77 >>> ($79 >>> 0)) | 0;
    $83 = $82 << 1;
    $85 = 368736 + ($83 << 2) | 0;
    $86 = 368736 + ($83 + 2 << 2) | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = $87 + 8 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    do {
     if (($85 | 0) == ($89 | 0)) {
      HEAP32[92174] = $10 & ~(1 << $82);
     } else {
      if ($89 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
       _abort();
       return 0;
      }
      $100 = $89 + 12 | 0;
      if ((HEAP32[$100 >> 2] | 0) == ($87 | 0)) {
       HEAP32[$100 >> 2] = $85;
       HEAP32[$86 >> 2] = $89;
       break;
      } else {
       _abort();
       return 0;
      }
     }
    } while (0);
    $105 = $82 << 3;
    $106 = $105 - $8 | 0;
    HEAP32[$87 + 4 >> 2] = $8 | 3;
    $109 = $87;
    $111 = $109 + $8 | 0;
    HEAP32[$109 + ($8 | 4) >> 2] = $106 | 1;
    HEAP32[$109 + $105 >> 2] = $106;
    $117 = HEAP32[92176] | 0;
    if (($117 | 0) != 0) {
     $120 = HEAP32[92179] | 0;
     $121 = $117 >>> 3;
     $122 = $121 << 1;
     $124 = 368736 + ($122 << 2) | 0;
     $125 = HEAP32[92174] | 0;
     $126 = 1 << $121;
     do {
      if (($125 & $126 | 0) == 0) {
       HEAP32[92174] = $125 | $126;
       $F4_0 = $124;
       $_pre_phi = 368736 + ($122 + 2 << 2) | 0;
      } else {
       $132 = 368736 + ($122 + 2 << 2) | 0;
       $133 = HEAP32[$132 >> 2] | 0;
       if ($133 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
        $F4_0 = $133;
        $_pre_phi = $132;
        break;
       }
       _abort();
       return 0;
      }
     } while (0);
     HEAP32[$_pre_phi >> 2] = $120;
     HEAP32[$F4_0 + 12 >> 2] = $120;
     HEAP32[$120 + 8 >> 2] = $F4_0;
     HEAP32[$120 + 12 >> 2] = $124;
    }
    HEAP32[92176] = $106;
    HEAP32[92179] = $111;
    $mem_0 = $88;
    return $mem_0 | 0;
   }
   $145 = HEAP32[92175] | 0;
   if (($145 | 0) == 0) {
    $nb_0 = $8;
    break;
   }
   $150 = ($145 & -$145) - 1 | 0;
   $152 = $150 >>> 12 & 16;
   $153 = $150 >>> ($152 >>> 0);
   $155 = $153 >>> 5 & 8;
   $157 = $153 >>> ($155 >>> 0);
   $159 = $157 >>> 2 & 4;
   $161 = $157 >>> ($159 >>> 0);
   $163 = $161 >>> 1 & 2;
   $165 = $161 >>> ($163 >>> 0);
   $167 = $165 >>> 1 & 1;
   $172 = HEAP32[369e3 + (($155 | $152 | $159 | $163 | $167) + ($165 >>> ($167 >>> 0)) << 2) >> 2] | 0;
   $t_0_i = $172;
   $v_0_i = $172;
   $rsize_0_i = (HEAP32[$172 + 4 >> 2] & -8) - $8 | 0;
   while (1) {
    $179 = HEAP32[$t_0_i + 16 >> 2] | 0;
    if (($179 | 0) == 0) {
     $183 = HEAP32[$t_0_i + 20 >> 2] | 0;
     if (($183 | 0) == 0) {
      break;
     } else {
      $185 = $183;
     }
    } else {
     $185 = $179;
    }
    $189 = (HEAP32[$185 + 4 >> 2] & -8) - $8 | 0;
    $190 = $189 >>> 0 < $rsize_0_i >>> 0;
    $t_0_i = $185;
    $v_0_i = $190 ? $185 : $v_0_i;
    $rsize_0_i = $190 ? $189 : $rsize_0_i;
   }
   $192 = $v_0_i;
   $193 = HEAP32[92178] | 0;
   if ($192 >>> 0 < $193 >>> 0) {
    _abort();
    return 0;
   }
   $196 = $192 + $8 | 0;
   $197 = $196;
   if ($192 >>> 0 >= $196 >>> 0) {
    _abort();
    return 0;
   }
   $201 = HEAP32[$v_0_i + 24 >> 2] | 0;
   $203 = HEAP32[$v_0_i + 12 >> 2] | 0;
   do {
    if (($203 | 0) == ($v_0_i | 0)) {
     $220 = $v_0_i + 20 | 0;
     $221 = HEAP32[$220 >> 2] | 0;
     if (($221 | 0) == 0) {
      $224 = $v_0_i + 16 | 0;
      $225 = HEAP32[$224 >> 2] | 0;
      if (($225 | 0) == 0) {
       $R_1_i = 0;
       break;
      } else {
       $R_0_i = $225;
       $RP_0_i = $224;
      }
     } else {
      $R_0_i = $221;
      $RP_0_i = $220;
     }
     while (1) {
      $227 = $R_0_i + 20 | 0;
      $228 = HEAP32[$227 >> 2] | 0;
      if (($228 | 0) != 0) {
       $R_0_i = $228;
       $RP_0_i = $227;
       continue;
      }
      $231 = $R_0_i + 16 | 0;
      $232 = HEAP32[$231 >> 2] | 0;
      if (($232 | 0) == 0) {
       break;
      } else {
       $R_0_i = $232;
       $RP_0_i = $231;
      }
     }
     if ($RP_0_i >>> 0 < $193 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$RP_0_i >> 2] = 0;
      $R_1_i = $R_0_i;
      break;
     }
    } else {
     $207 = HEAP32[$v_0_i + 8 >> 2] | 0;
     if ($207 >>> 0 < $193 >>> 0) {
      _abort();
      return 0;
     }
     $211 = $207 + 12 | 0;
     if ((HEAP32[$211 >> 2] | 0) != ($v_0_i | 0)) {
      _abort();
      return 0;
     }
     $215 = $203 + 8 | 0;
     if ((HEAP32[$215 >> 2] | 0) == ($v_0_i | 0)) {
      HEAP32[$211 >> 2] = $203;
      HEAP32[$215 >> 2] = $207;
      $R_1_i = $203;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   L78 : do {
    if (($201 | 0) != 0) {
     $242 = $v_0_i + 28 | 0;
     $244 = 369e3 + (HEAP32[$242 >> 2] << 2) | 0;
     do {
      if (($v_0_i | 0) == (HEAP32[$244 >> 2] | 0)) {
       HEAP32[$244 >> 2] = $R_1_i;
       if (($R_1_i | 0) != 0) {
        break;
       }
       HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$242 >> 2]);
       break L78;
      } else {
       if ($201 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
        return 0;
       }
       $258 = $201 + 16 | 0;
       if ((HEAP32[$258 >> 2] | 0) == ($v_0_i | 0)) {
        HEAP32[$258 >> 2] = $R_1_i;
       } else {
        HEAP32[$201 + 20 >> 2] = $R_1_i;
       }
       if (($R_1_i | 0) == 0) {
        break L78;
       }
      }
     } while (0);
     if ($R_1_i >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
      return 0;
     }
     HEAP32[$R_1_i + 24 >> 2] = $201;
     $274 = HEAP32[$v_0_i + 16 >> 2] | 0;
     do {
      if (($274 | 0) != 0) {
       if ($274 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
        return 0;
       } else {
        HEAP32[$R_1_i + 16 >> 2] = $274;
        HEAP32[$274 + 24 >> 2] = $R_1_i;
        break;
       }
      }
     } while (0);
     $286 = HEAP32[$v_0_i + 20 >> 2] | 0;
     if (($286 | 0) == 0) {
      break;
     }
     if ($286 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$R_1_i + 20 >> 2] = $286;
      HEAP32[$286 + 24 >> 2] = $R_1_i;
      break;
     }
    }
   } while (0);
   if ($rsize_0_i >>> 0 < 16 >>> 0) {
    $300 = $rsize_0_i + $8 | 0;
    HEAP32[$v_0_i + 4 >> 2] = $300 | 3;
    $304 = $192 + ($300 + 4) | 0;
    HEAP32[$304 >> 2] = HEAP32[$304 >> 2] | 1;
   } else {
    HEAP32[$v_0_i + 4 >> 2] = $8 | 3;
    HEAP32[$192 + ($8 | 4) >> 2] = $rsize_0_i | 1;
    HEAP32[$192 + ($rsize_0_i + $8) >> 2] = $rsize_0_i;
    $315 = HEAP32[92176] | 0;
    if (($315 | 0) != 0) {
     $318 = HEAP32[92179] | 0;
     $319 = $315 >>> 3;
     $320 = $319 << 1;
     $322 = 368736 + ($320 << 2) | 0;
     $323 = HEAP32[92174] | 0;
     $324 = 1 << $319;
     do {
      if (($323 & $324 | 0) == 0) {
       HEAP32[92174] = $323 | $324;
       $F1_0_i = $322;
       $_pre_phi_i = 368736 + ($320 + 2 << 2) | 0;
      } else {
       $330 = 368736 + ($320 + 2 << 2) | 0;
       $331 = HEAP32[$330 >> 2] | 0;
       if ($331 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
        $F1_0_i = $331;
        $_pre_phi_i = $330;
        break;
       }
       _abort();
       return 0;
      }
     } while (0);
     HEAP32[$_pre_phi_i >> 2] = $318;
     HEAP32[$F1_0_i + 12 >> 2] = $318;
     HEAP32[$318 + 8 >> 2] = $F1_0_i;
     HEAP32[$318 + 12 >> 2] = $322;
    }
    HEAP32[92176] = $rsize_0_i;
    HEAP32[92179] = $197;
   }
   $342 = $v_0_i + 8 | 0;
   if (($342 | 0) == 0) {
    $nb_0 = $8;
    break;
   } else {
    $mem_0 = $342;
   }
   return $mem_0 | 0;
  } else {
   if ($bytes >>> 0 > 4294967231 >>> 0) {
    $nb_0 = -1;
    break;
   }
   $348 = $bytes + 11 | 0;
   $349 = $348 & -8;
   $350 = HEAP32[92175] | 0;
   if (($350 | 0) == 0) {
    $nb_0 = $349;
    break;
   }
   $353 = -$349 | 0;
   $354 = $348 >>> 8;
   do {
    if (($354 | 0) == 0) {
     $idx_0_i = 0;
    } else {
     if ($349 >>> 0 > 16777215 >>> 0) {
      $idx_0_i = 31;
      break;
     }
     $361 = ($354 + 1048320 | 0) >>> 16 & 8;
     $362 = $354 << $361;
     $365 = ($362 + 520192 | 0) >>> 16 & 4;
     $367 = $362 << $365;
     $370 = ($367 + 245760 | 0) >>> 16 & 2;
     $375 = 14 - ($365 | $361 | $370) + ($367 << $370 >>> 15) | 0;
     $idx_0_i = $349 >>> (($375 + 7 | 0) >>> 0) & 1 | $375 << 1;
    }
   } while (0);
   $383 = HEAP32[369e3 + ($idx_0_i << 2) >> 2] | 0;
   L126 : do {
    if (($383 | 0) == 0) {
     $v_2_i = 0;
     $rsize_2_i = $353;
     $t_1_i = 0;
    } else {
     if (($idx_0_i | 0) == 31) {
      $391 = 0;
     } else {
      $391 = 25 - ($idx_0_i >>> 1) | 0;
     }
     $v_0_i118 = 0;
     $rsize_0_i117 = $353;
     $t_0_i116 = $383;
     $sizebits_0_i = $349 << $391;
     $rst_0_i = 0;
     while (1) {
      $396 = HEAP32[$t_0_i116 + 4 >> 2] & -8;
      $397 = $396 - $349 | 0;
      if ($397 >>> 0 < $rsize_0_i117 >>> 0) {
       if (($396 | 0) == ($349 | 0)) {
        $v_2_i = $t_0_i116;
        $rsize_2_i = $397;
        $t_1_i = $t_0_i116;
        break L126;
       } else {
        $v_1_i = $t_0_i116;
        $rsize_1_i = $397;
       }
      } else {
       $v_1_i = $v_0_i118;
       $rsize_1_i = $rsize_0_i117;
      }
      $403 = HEAP32[$t_0_i116 + 20 >> 2] | 0;
      $406 = HEAP32[$t_0_i116 + 16 + ($sizebits_0_i >>> 31 << 2) >> 2] | 0;
      $rst_1_i = ($403 | 0) == 0 | ($403 | 0) == ($406 | 0) ? $rst_0_i : $403;
      if (($406 | 0) == 0) {
       $v_2_i = $v_1_i;
       $rsize_2_i = $rsize_1_i;
       $t_1_i = $rst_1_i;
       break;
      } else {
       $v_0_i118 = $v_1_i;
       $rsize_0_i117 = $rsize_1_i;
       $t_0_i116 = $406;
       $sizebits_0_i = $sizebits_0_i << 1;
       $rst_0_i = $rst_1_i;
      }
     }
    }
   } while (0);
   if (($t_1_i | 0) == 0 & ($v_2_i | 0) == 0) {
    $414 = 2 << $idx_0_i;
    $417 = $350 & ($414 | -$414);
    if (($417 | 0) == 0) {
     $nb_0 = $349;
     break;
    }
    $422 = ($417 & -$417) - 1 | 0;
    $424 = $422 >>> 12 & 16;
    $425 = $422 >>> ($424 >>> 0);
    $427 = $425 >>> 5 & 8;
    $429 = $425 >>> ($427 >>> 0);
    $431 = $429 >>> 2 & 4;
    $433 = $429 >>> ($431 >>> 0);
    $435 = $433 >>> 1 & 2;
    $437 = $433 >>> ($435 >>> 0);
    $439 = $437 >>> 1 & 1;
    $t_2_ph_i = HEAP32[369e3 + (($427 | $424 | $431 | $435 | $439) + ($437 >>> ($439 >>> 0)) << 2) >> 2] | 0;
   } else {
    $t_2_ph_i = $t_1_i;
   }
   if (($t_2_ph_i | 0) == 0) {
    $rsize_3_lcssa_i = $rsize_2_i;
    $v_3_lcssa_i = $v_2_i;
   } else {
    $t_228_i = $t_2_ph_i;
    $rsize_329_i = $rsize_2_i;
    $v_330_i = $v_2_i;
    while (1) {
     $449 = (HEAP32[$t_228_i + 4 >> 2] & -8) - $349 | 0;
     $450 = $449 >>> 0 < $rsize_329_i >>> 0;
     $_rsize_3_i = $450 ? $449 : $rsize_329_i;
     $t_2_v_3_i = $450 ? $t_228_i : $v_330_i;
     $452 = HEAP32[$t_228_i + 16 >> 2] | 0;
     if (($452 | 0) != 0) {
      $t_228_i = $452;
      $rsize_329_i = $_rsize_3_i;
      $v_330_i = $t_2_v_3_i;
      continue;
     }
     $455 = HEAP32[$t_228_i + 20 >> 2] | 0;
     if (($455 | 0) == 0) {
      $rsize_3_lcssa_i = $_rsize_3_i;
      $v_3_lcssa_i = $t_2_v_3_i;
      break;
     } else {
      $t_228_i = $455;
      $rsize_329_i = $_rsize_3_i;
      $v_330_i = $t_2_v_3_i;
     }
    }
   }
   if (($v_3_lcssa_i | 0) == 0) {
    $nb_0 = $349;
    break;
   }
   if ($rsize_3_lcssa_i >>> 0 >= ((HEAP32[92176] | 0) - $349 | 0) >>> 0) {
    $nb_0 = $349;
    break;
   }
   $463 = $v_3_lcssa_i;
   $464 = HEAP32[92178] | 0;
   if ($463 >>> 0 < $464 >>> 0) {
    _abort();
    return 0;
   }
   $467 = $463 + $349 | 0;
   $468 = $467;
   if ($463 >>> 0 >= $467 >>> 0) {
    _abort();
    return 0;
   }
   $472 = HEAP32[$v_3_lcssa_i + 24 >> 2] | 0;
   $474 = HEAP32[$v_3_lcssa_i + 12 >> 2] | 0;
   do {
    if (($474 | 0) == ($v_3_lcssa_i | 0)) {
     $491 = $v_3_lcssa_i + 20 | 0;
     $492 = HEAP32[$491 >> 2] | 0;
     if (($492 | 0) == 0) {
      $495 = $v_3_lcssa_i + 16 | 0;
      $496 = HEAP32[$495 >> 2] | 0;
      if (($496 | 0) == 0) {
       $R_1_i122 = 0;
       break;
      } else {
       $R_0_i120 = $496;
       $RP_0_i119 = $495;
      }
     } else {
      $R_0_i120 = $492;
      $RP_0_i119 = $491;
     }
     while (1) {
      $498 = $R_0_i120 + 20 | 0;
      $499 = HEAP32[$498 >> 2] | 0;
      if (($499 | 0) != 0) {
       $R_0_i120 = $499;
       $RP_0_i119 = $498;
       continue;
      }
      $502 = $R_0_i120 + 16 | 0;
      $503 = HEAP32[$502 >> 2] | 0;
      if (($503 | 0) == 0) {
       break;
      } else {
       $R_0_i120 = $503;
       $RP_0_i119 = $502;
      }
     }
     if ($RP_0_i119 >>> 0 < $464 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$RP_0_i119 >> 2] = 0;
      $R_1_i122 = $R_0_i120;
      break;
     }
    } else {
     $478 = HEAP32[$v_3_lcssa_i + 8 >> 2] | 0;
     if ($478 >>> 0 < $464 >>> 0) {
      _abort();
      return 0;
     }
     $482 = $478 + 12 | 0;
     if ((HEAP32[$482 >> 2] | 0) != ($v_3_lcssa_i | 0)) {
      _abort();
      return 0;
     }
     $486 = $474 + 8 | 0;
     if ((HEAP32[$486 >> 2] | 0) == ($v_3_lcssa_i | 0)) {
      HEAP32[$482 >> 2] = $474;
      HEAP32[$486 >> 2] = $478;
      $R_1_i122 = $474;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   L176 : do {
    if (($472 | 0) != 0) {
     $513 = $v_3_lcssa_i + 28 | 0;
     $515 = 369e3 + (HEAP32[$513 >> 2] << 2) | 0;
     do {
      if (($v_3_lcssa_i | 0) == (HEAP32[$515 >> 2] | 0)) {
       HEAP32[$515 >> 2] = $R_1_i122;
       if (($R_1_i122 | 0) != 0) {
        break;
       }
       HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$513 >> 2]);
       break L176;
      } else {
       if ($472 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
        return 0;
       }
       $529 = $472 + 16 | 0;
       if ((HEAP32[$529 >> 2] | 0) == ($v_3_lcssa_i | 0)) {
        HEAP32[$529 >> 2] = $R_1_i122;
       } else {
        HEAP32[$472 + 20 >> 2] = $R_1_i122;
       }
       if (($R_1_i122 | 0) == 0) {
        break L176;
       }
      }
     } while (0);
     if ($R_1_i122 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
      return 0;
     }
     HEAP32[$R_1_i122 + 24 >> 2] = $472;
     $545 = HEAP32[$v_3_lcssa_i + 16 >> 2] | 0;
     do {
      if (($545 | 0) != 0) {
       if ($545 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
        return 0;
       } else {
        HEAP32[$R_1_i122 + 16 >> 2] = $545;
        HEAP32[$545 + 24 >> 2] = $R_1_i122;
        break;
       }
      }
     } while (0);
     $557 = HEAP32[$v_3_lcssa_i + 20 >> 2] | 0;
     if (($557 | 0) == 0) {
      break;
     }
     if ($557 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$R_1_i122 + 20 >> 2] = $557;
      HEAP32[$557 + 24 >> 2] = $R_1_i122;
      break;
     }
    }
   } while (0);
   do {
    if ($rsize_3_lcssa_i >>> 0 < 16 >>> 0) {
     $571 = $rsize_3_lcssa_i + $349 | 0;
     HEAP32[$v_3_lcssa_i + 4 >> 2] = $571 | 3;
     $575 = $463 + ($571 + 4) | 0;
     HEAP32[$575 >> 2] = HEAP32[$575 >> 2] | 1;
    } else {
     HEAP32[$v_3_lcssa_i + 4 >> 2] = $349 | 3;
     HEAP32[$463 + ($349 | 4) >> 2] = $rsize_3_lcssa_i | 1;
     HEAP32[$463 + ($rsize_3_lcssa_i + $349) >> 2] = $rsize_3_lcssa_i;
     $586 = $rsize_3_lcssa_i >>> 3;
     if ($rsize_3_lcssa_i >>> 0 < 256 >>> 0) {
      $589 = $586 << 1;
      $591 = 368736 + ($589 << 2) | 0;
      $592 = HEAP32[92174] | 0;
      $593 = 1 << $586;
      do {
       if (($592 & $593 | 0) == 0) {
        HEAP32[92174] = $592 | $593;
        $F5_0_i = $591;
        $_pre_phi_i128 = 368736 + ($589 + 2 << 2) | 0;
       } else {
        $599 = 368736 + ($589 + 2 << 2) | 0;
        $600 = HEAP32[$599 >> 2] | 0;
        if ($600 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
         $F5_0_i = $600;
         $_pre_phi_i128 = $599;
         break;
        }
        _abort();
        return 0;
       }
      } while (0);
      HEAP32[$_pre_phi_i128 >> 2] = $468;
      HEAP32[$F5_0_i + 12 >> 2] = $468;
      HEAP32[$463 + ($349 + 8) >> 2] = $F5_0_i;
      HEAP32[$463 + ($349 + 12) >> 2] = $591;
      break;
     }
     $612 = $467;
     $613 = $rsize_3_lcssa_i >>> 8;
     do {
      if (($613 | 0) == 0) {
       $I7_0_i = 0;
      } else {
       if ($rsize_3_lcssa_i >>> 0 > 16777215 >>> 0) {
        $I7_0_i = 31;
        break;
       }
       $620 = ($613 + 1048320 | 0) >>> 16 & 8;
       $621 = $613 << $620;
       $624 = ($621 + 520192 | 0) >>> 16 & 4;
       $626 = $621 << $624;
       $629 = ($626 + 245760 | 0) >>> 16 & 2;
       $634 = 14 - ($624 | $620 | $629) + ($626 << $629 >>> 15) | 0;
       $I7_0_i = $rsize_3_lcssa_i >>> (($634 + 7 | 0) >>> 0) & 1 | $634 << 1;
      }
     } while (0);
     $641 = 369e3 + ($I7_0_i << 2) | 0;
     HEAP32[$463 + ($349 + 28) >> 2] = $I7_0_i;
     HEAP32[$463 + ($349 + 20) >> 2] = 0;
     HEAP32[$463 + ($349 + 16) >> 2] = 0;
     $648 = HEAP32[92175] | 0;
     $649 = 1 << $I7_0_i;
     if (($648 & $649 | 0) == 0) {
      HEAP32[92175] = $648 | $649;
      HEAP32[$641 >> 2] = $612;
      HEAP32[$463 + ($349 + 24) >> 2] = $641;
      HEAP32[$463 + ($349 + 12) >> 2] = $612;
      HEAP32[$463 + ($349 + 8) >> 2] = $612;
      break;
     }
     if (($I7_0_i | 0) == 31) {
      $668 = 0;
     } else {
      $668 = 25 - ($I7_0_i >>> 1) | 0;
     }
     $K12_0_i = $rsize_3_lcssa_i << $668;
     $T_0_i = HEAP32[$641 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T_0_i + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa_i | 0)) {
       break;
      }
      $677 = $T_0_i + 16 + ($K12_0_i >>> 31 << 2) | 0;
      $678 = HEAP32[$677 >> 2] | 0;
      if (($678 | 0) == 0) {
       label = 151;
       break;
      } else {
       $K12_0_i = $K12_0_i << 1;
       $T_0_i = $678;
      }
     }
     if ((label | 0) == 151) {
      if ($677 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
       _abort();
       return 0;
      } else {
       HEAP32[$677 >> 2] = $612;
       HEAP32[$463 + ($349 + 24) >> 2] = $T_0_i;
       HEAP32[$463 + ($349 + 12) >> 2] = $612;
       HEAP32[$463 + ($349 + 8) >> 2] = $612;
       break;
      }
     }
     $694 = $T_0_i + 8 | 0;
     $695 = HEAP32[$694 >> 2] | 0;
     $697 = HEAP32[92178] | 0;
     if ($T_0_i >>> 0 < $697 >>> 0) {
      _abort();
      return 0;
     }
     if ($695 >>> 0 < $697 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$695 + 12 >> 2] = $612;
      HEAP32[$694 >> 2] = $612;
      HEAP32[$463 + ($349 + 8) >> 2] = $695;
      HEAP32[$463 + ($349 + 12) >> 2] = $T_0_i;
      HEAP32[$463 + ($349 + 24) >> 2] = 0;
      break;
     }
    }
   } while (0);
   $711 = $v_3_lcssa_i + 8 | 0;
   if (($711 | 0) == 0) {
    $nb_0 = $349;
    break;
   } else {
    $mem_0 = $711;
   }
   return $mem_0 | 0;
  }
 } while (0);
 $714 = HEAP32[92176] | 0;
 if ($nb_0 >>> 0 <= $714 >>> 0) {
  $717 = $714 - $nb_0 | 0;
  $718 = HEAP32[92179] | 0;
  if ($717 >>> 0 > 15 >>> 0) {
   $721 = $718;
   HEAP32[92179] = $721 + $nb_0;
   HEAP32[92176] = $717;
   HEAP32[$721 + ($nb_0 + 4) >> 2] = $717 | 1;
   HEAP32[$721 + $714 >> 2] = $717;
   HEAP32[$718 + 4 >> 2] = $nb_0 | 3;
  } else {
   HEAP32[92176] = 0;
   HEAP32[92179] = 0;
   HEAP32[$718 + 4 >> 2] = $714 | 3;
   $736 = $718 + ($714 + 4) | 0;
   HEAP32[$736 >> 2] = HEAP32[$736 >> 2] | 1;
  }
  $mem_0 = $718 + 8 | 0;
  return $mem_0 | 0;
 }
 $743 = HEAP32[92177] | 0;
 if ($nb_0 >>> 0 < $743 >>> 0) {
  $746 = $743 - $nb_0 | 0;
  HEAP32[92177] = $746;
  $747 = HEAP32[92180] | 0;
  $748 = $747;
  HEAP32[92180] = $748 + $nb_0;
  HEAP32[$748 + ($nb_0 + 4) >> 2] = $746 | 1;
  HEAP32[$747 + 4 >> 2] = $nb_0 | 3;
  $mem_0 = $747 + 8 | 0;
  return $mem_0 | 0;
 }
 do {
  if ((HEAP32[89572] | 0) == 0) {
   $762 = _sysconf(30) | 0;
   if (($762 - 1 & $762 | 0) == 0) {
    HEAP32[89574] = $762;
    HEAP32[89573] = $762;
    HEAP32[89575] = -1;
    HEAP32[89576] = -1;
    HEAP32[89577] = 0;
    HEAP32[92285] = 0;
    HEAP32[89572] = (_time(0) | 0) & -16 ^ 1431655768;
    break;
   } else {
    _abort();
    return 0;
   }
  }
 } while (0);
 $771 = $nb_0 + 48 | 0;
 $772 = HEAP32[89574] | 0;
 $773 = $nb_0 + 47 | 0;
 $774 = $772 + $773 | 0;
 $775 = -$772 | 0;
 $776 = $774 & $775;
 if ($776 >>> 0 <= $nb_0 >>> 0) {
  $mem_0 = 0;
  return $mem_0 | 0;
 }
 $779 = HEAP32[92284] | 0;
 do {
  if (($779 | 0) != 0) {
   $782 = HEAP32[92282] | 0;
   $783 = $782 + $776 | 0;
   if ($783 >>> 0 <= $782 >>> 0 | $783 >>> 0 > $779 >>> 0) {
    $mem_0 = 0;
   } else {
    break;
   }
   return $mem_0 | 0;
  }
 } while (0);
 L268 : do {
  if ((HEAP32[92285] & 4 | 0) == 0) {
   $791 = HEAP32[92180] | 0;
   L270 : do {
    if (($791 | 0) == 0) {
     label = 181;
    } else {
     $794 = $791;
     $sp_0_i_i = 369144;
     while (1) {
      $796 = $sp_0_i_i | 0;
      $797 = HEAP32[$796 >> 2] | 0;
      if ($797 >>> 0 <= $794 >>> 0) {
       $800 = $sp_0_i_i + 4 | 0;
       if (($797 + (HEAP32[$800 >> 2] | 0) | 0) >>> 0 > $794 >>> 0) {
        break;
       }
      }
      $806 = HEAP32[$sp_0_i_i + 8 >> 2] | 0;
      if (($806 | 0) == 0) {
       label = 181;
       break L270;
      } else {
       $sp_0_i_i = $806;
      }
     }
     if (($sp_0_i_i | 0) == 0) {
      label = 181;
      break;
     }
     $840 = $774 - (HEAP32[92177] | 0) & $775;
     if ($840 >>> 0 >= 2147483647 >>> 0) {
      $tsize_0303639_i = 0;
      break;
     }
     $843 = _sbrk($840 | 0) | 0;
     $847 = ($843 | 0) == ((HEAP32[$796 >> 2] | 0) + (HEAP32[$800 >> 2] | 0) | 0);
     $tbase_0_i = $847 ? $843 : -1;
     $tsize_0_i = $847 ? $840 : 0;
     $br_0_i = $843;
     $ssize_1_i = $840;
     label = 190;
    }
   } while (0);
   do {
    if ((label | 0) == 181) {
     $809 = _sbrk(0) | 0;
     if (($809 | 0) == -1) {
      $tsize_0303639_i = 0;
      break;
     }
     $812 = $809;
     $813 = HEAP32[89573] | 0;
     $814 = $813 - 1 | 0;
     if (($814 & $812 | 0) == 0) {
      $ssize_0_i = $776;
     } else {
      $ssize_0_i = $776 - $812 + ($814 + $812 & -$813) | 0;
     }
     $824 = HEAP32[92282] | 0;
     $825 = $824 + $ssize_0_i | 0;
     if (!($ssize_0_i >>> 0 > $nb_0 >>> 0 & $ssize_0_i >>> 0 < 2147483647 >>> 0)) {
      $tsize_0303639_i = 0;
      break;
     }
     $829 = HEAP32[92284] | 0;
     if (($829 | 0) != 0) {
      if ($825 >>> 0 <= $824 >>> 0 | $825 >>> 0 > $829 >>> 0) {
       $tsize_0303639_i = 0;
       break;
      }
     }
     $835 = _sbrk($ssize_0_i | 0) | 0;
     $836 = ($835 | 0) == ($809 | 0);
     $tbase_0_i = $836 ? $809 : -1;
     $tsize_0_i = $836 ? $ssize_0_i : 0;
     $br_0_i = $835;
     $ssize_1_i = $ssize_0_i;
     label = 190;
    }
   } while (0);
   L290 : do {
    if ((label | 0) == 190) {
     $849 = -$ssize_1_i | 0;
     if (($tbase_0_i | 0) != -1) {
      $tsize_244_i = $tsize_0_i;
      $tbase_245_i = $tbase_0_i;
      label = 201;
      break L268;
     }
     do {
      if (($br_0_i | 0) != -1 & $ssize_1_i >>> 0 < 2147483647 >>> 0 & $ssize_1_i >>> 0 < $771 >>> 0) {
       $856 = HEAP32[89574] | 0;
       $860 = $773 - $ssize_1_i + $856 & -$856;
       if ($860 >>> 0 >= 2147483647 >>> 0) {
        $ssize_2_i = $ssize_1_i;
        break;
       }
       if ((_sbrk($860 | 0) | 0) == -1) {
        _sbrk($849 | 0) | 0;
        $tsize_0303639_i = $tsize_0_i;
        break L290;
       } else {
        $ssize_2_i = $860 + $ssize_1_i | 0;
        break;
       }
      } else {
       $ssize_2_i = $ssize_1_i;
      }
     } while (0);
     if (($br_0_i | 0) == -1) {
      $tsize_0303639_i = $tsize_0_i;
     } else {
      $tsize_244_i = $ssize_2_i;
      $tbase_245_i = $br_0_i;
      label = 201;
      break L268;
     }
    }
   } while (0);
   HEAP32[92285] = HEAP32[92285] | 4;
   $tsize_1_i = $tsize_0303639_i;
   label = 198;
  } else {
   $tsize_1_i = 0;
   label = 198;
  }
 } while (0);
 do {
  if ((label | 0) == 198) {
   if ($776 >>> 0 >= 2147483647 >>> 0) {
    break;
   }
   $876 = _sbrk($776 | 0) | 0;
   $877 = _sbrk(0) | 0;
   if (!(($877 | 0) != -1 & ($876 | 0) != -1 & $876 >>> 0 < $877 >>> 0)) {
    break;
   }
   $881 = $877 - $876 | 0;
   $883 = $881 >>> 0 > ($nb_0 + 40 | 0) >>> 0;
   $_tbase_1_i = $883 ? $876 : -1;
   if (($_tbase_1_i | 0) != -1) {
    $tsize_244_i = $883 ? $881 : $tsize_1_i;
    $tbase_245_i = $_tbase_1_i;
    label = 201;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 201) {
   $886 = (HEAP32[92282] | 0) + $tsize_244_i | 0;
   HEAP32[92282] = $886;
   if ($886 >>> 0 > (HEAP32[92283] | 0) >>> 0) {
    HEAP32[92283] = $886;
   }
   $890 = HEAP32[92180] | 0;
   L310 : do {
    if (($890 | 0) == 0) {
     $893 = HEAP32[92178] | 0;
     if (($893 | 0) == 0 | $tbase_245_i >>> 0 < $893 >>> 0) {
      HEAP32[92178] = $tbase_245_i;
     }
     HEAP32[92286] = $tbase_245_i;
     HEAP32[92287] = $tsize_244_i;
     HEAP32[92289] = 0;
     HEAP32[92183] = HEAP32[89572];
     HEAP32[92182] = -1;
     $i_02_i_i = 0;
     do {
      $899 = $i_02_i_i << 1;
      $901 = 368736 + ($899 << 2) | 0;
      HEAP32[368736 + ($899 + 3 << 2) >> 2] = $901;
      HEAP32[368736 + ($899 + 2 << 2) >> 2] = $901;
      $i_02_i_i = $i_02_i_i + 1 | 0;
     } while ($i_02_i_i >>> 0 < 32 >>> 0);
     $908 = $tbase_245_i + 8 | 0;
     if (($908 & 7 | 0) == 0) {
      $914 = 0;
     } else {
      $914 = -$908 & 7;
     }
     $917 = $tsize_244_i - 40 - $914 | 0;
     HEAP32[92180] = $tbase_245_i + $914;
     HEAP32[92177] = $917;
     HEAP32[$tbase_245_i + ($914 + 4) >> 2] = $917 | 1;
     HEAP32[$tbase_245_i + ($tsize_244_i - 36) >> 2] = 40;
     HEAP32[92181] = HEAP32[89576];
    } else {
     $sp_067_i = 369144;
     while (1) {
      $925 = HEAP32[$sp_067_i >> 2] | 0;
      $926 = $sp_067_i + 4 | 0;
      $927 = HEAP32[$926 >> 2] | 0;
      if (($tbase_245_i | 0) == ($925 + $927 | 0)) {
       label = 213;
       break;
      }
      $932 = HEAP32[$sp_067_i + 8 >> 2] | 0;
      if (($932 | 0) == 0) {
       break;
      } else {
       $sp_067_i = $932;
      }
     }
     do {
      if ((label | 0) == 213) {
       if ((HEAP32[$sp_067_i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       $939 = $890;
       if (!($939 >>> 0 >= $925 >>> 0 & $939 >>> 0 < $tbase_245_i >>> 0)) {
        break;
       }
       HEAP32[$926 >> 2] = $927 + $tsize_244_i;
       $944 = HEAP32[92180] | 0;
       $946 = (HEAP32[92177] | 0) + $tsize_244_i | 0;
       $947 = $944;
       $949 = $944 + 8 | 0;
       if (($949 & 7 | 0) == 0) {
        $955 = 0;
       } else {
        $955 = -$949 & 7;
       }
       $958 = $946 - $955 | 0;
       HEAP32[92180] = $947 + $955;
       HEAP32[92177] = $958;
       HEAP32[$947 + ($955 + 4) >> 2] = $958 | 1;
       HEAP32[$947 + ($946 + 4) >> 2] = 40;
       HEAP32[92181] = HEAP32[89576];
       break L310;
      }
     } while (0);
     if ($tbase_245_i >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      HEAP32[92178] = $tbase_245_i;
     }
     $968 = $tbase_245_i + $tsize_244_i | 0;
     $sp_160_i = 369144;
     while (1) {
      $970 = $sp_160_i | 0;
      if ((HEAP32[$970 >> 2] | 0) == ($968 | 0)) {
       label = 223;
       break;
      }
      $975 = HEAP32[$sp_160_i + 8 >> 2] | 0;
      if (($975 | 0) == 0) {
       break;
      } else {
       $sp_160_i = $975;
      }
     }
     do {
      if ((label | 0) == 223) {
       if ((HEAP32[$sp_160_i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       HEAP32[$970 >> 2] = $tbase_245_i;
       $982 = $sp_160_i + 4 | 0;
       HEAP32[$982 >> 2] = (HEAP32[$982 >> 2] | 0) + $tsize_244_i;
       $986 = $tbase_245_i + 8 | 0;
       if (($986 & 7 | 0) == 0) {
        $993 = 0;
       } else {
        $993 = -$986 & 7;
       }
       $996 = $tbase_245_i + ($tsize_244_i + 8) | 0;
       if (($996 & 7 | 0) == 0) {
        $1003 = 0;
       } else {
        $1003 = -$996 & 7;
       }
       $1004 = $tbase_245_i + ($1003 + $tsize_244_i) | 0;
       $1005 = $1004;
       $_sum_i21_i = $993 + $nb_0 | 0;
       $1009 = $tbase_245_i + $_sum_i21_i | 0;
       $1010 = $1009;
       $1011 = $1004 - ($tbase_245_i + $993) - $nb_0 | 0;
       HEAP32[$tbase_245_i + ($993 + 4) >> 2] = $nb_0 | 3;
       do {
        if (($1005 | 0) == (HEAP32[92180] | 0)) {
         $1019 = (HEAP32[92177] | 0) + $1011 | 0;
         HEAP32[92177] = $1019;
         HEAP32[92180] = $1010;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 4) >> 2] = $1019 | 1;
        } else {
         if (($1005 | 0) == (HEAP32[92179] | 0)) {
          $1028 = (HEAP32[92176] | 0) + $1011 | 0;
          HEAP32[92176] = $1028;
          HEAP32[92179] = $1010;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 4) >> 2] = $1028 | 1;
          HEAP32[$tbase_245_i + ($1028 + $_sum_i21_i) >> 2] = $1028;
          break;
         }
         $_sum2_i23_i = $tsize_244_i + 4 | 0;
         $1037 = HEAP32[$tbase_245_i + ($_sum2_i23_i + $1003) >> 2] | 0;
         if (($1037 & 3 | 0) == 1) {
          $1041 = $1037 & -8;
          $1042 = $1037 >>> 3;
          L355 : do {
           if ($1037 >>> 0 < 256 >>> 0) {
            $1047 = HEAP32[$tbase_245_i + (($1003 | 8) + $tsize_244_i) >> 2] | 0;
            $1050 = HEAP32[$tbase_245_i + ($tsize_244_i + 12 + $1003) >> 2] | 0;
            $1053 = 368736 + ($1042 << 1 << 2) | 0;
            do {
             if (($1047 | 0) != ($1053 | 0)) {
              if ($1047 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
               _abort();
               return 0;
              }
              if ((HEAP32[$1047 + 12 >> 2] | 0) == ($1005 | 0)) {
               break;
              }
              _abort();
              return 0;
             }
            } while (0);
            if (($1050 | 0) == ($1047 | 0)) {
             HEAP32[92174] = HEAP32[92174] & ~(1 << $1042);
             break;
            }
            do {
             if (($1050 | 0) == ($1053 | 0)) {
              $_pre_phi57_i_i = $1050 + 8 | 0;
             } else {
              if ($1050 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
               _abort();
               return 0;
              }
              $1076 = $1050 + 8 | 0;
              if ((HEAP32[$1076 >> 2] | 0) == ($1005 | 0)) {
               $_pre_phi57_i_i = $1076;
               break;
              }
              _abort();
              return 0;
             }
            } while (0);
            HEAP32[$1047 + 12 >> 2] = $1050;
            HEAP32[$_pre_phi57_i_i >> 2] = $1047;
           } else {
            $1081 = $1004;
            $1084 = HEAP32[$tbase_245_i + (($1003 | 24) + $tsize_244_i) >> 2] | 0;
            $1087 = HEAP32[$tbase_245_i + ($tsize_244_i + 12 + $1003) >> 2] | 0;
            do {
             if (($1087 | 0) == ($1081 | 0)) {
              $_sum67_i_i = $1003 | 16;
              $1107 = $tbase_245_i + ($_sum2_i23_i + $_sum67_i_i) | 0;
              $1108 = HEAP32[$1107 >> 2] | 0;
              if (($1108 | 0) == 0) {
               $1112 = $tbase_245_i + ($_sum67_i_i + $tsize_244_i) | 0;
               $1113 = HEAP32[$1112 >> 2] | 0;
               if (($1113 | 0) == 0) {
                $R_1_i_i = 0;
                break;
               } else {
                $R_0_i_i = $1113;
                $RP_0_i_i = $1112;
               }
              } else {
               $R_0_i_i = $1108;
               $RP_0_i_i = $1107;
              }
              while (1) {
               $1115 = $R_0_i_i + 20 | 0;
               $1116 = HEAP32[$1115 >> 2] | 0;
               if (($1116 | 0) != 0) {
                $R_0_i_i = $1116;
                $RP_0_i_i = $1115;
                continue;
               }
               $1119 = $R_0_i_i + 16 | 0;
               $1120 = HEAP32[$1119 >> 2] | 0;
               if (($1120 | 0) == 0) {
                break;
               } else {
                $R_0_i_i = $1120;
                $RP_0_i_i = $1119;
               }
              }
              if ($RP_0_i_i >>> 0 < (HEAP32[92178] | 0) >>> 0) {
               _abort();
               return 0;
              } else {
               HEAP32[$RP_0_i_i >> 2] = 0;
               $R_1_i_i = $R_0_i_i;
               break;
              }
             } else {
              $1092 = HEAP32[$tbase_245_i + (($1003 | 8) + $tsize_244_i) >> 2] | 0;
              if ($1092 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
               _abort();
               return 0;
              }
              $1097 = $1092 + 12 | 0;
              if ((HEAP32[$1097 >> 2] | 0) != ($1081 | 0)) {
               _abort();
               return 0;
              }
              $1101 = $1087 + 8 | 0;
              if ((HEAP32[$1101 >> 2] | 0) == ($1081 | 0)) {
               HEAP32[$1097 >> 2] = $1087;
               HEAP32[$1101 >> 2] = $1092;
               $R_1_i_i = $1087;
               break;
              } else {
               _abort();
               return 0;
              }
             }
            } while (0);
            if (($1084 | 0) == 0) {
             break;
            }
            $1132 = $tbase_245_i + ($tsize_244_i + 28 + $1003) | 0;
            $1134 = 369e3 + (HEAP32[$1132 >> 2] << 2) | 0;
            do {
             if (($1081 | 0) == (HEAP32[$1134 >> 2] | 0)) {
              HEAP32[$1134 >> 2] = $R_1_i_i;
              if (($R_1_i_i | 0) != 0) {
               break;
              }
              HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$1132 >> 2]);
              break L355;
             } else {
              if ($1084 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
               _abort();
               return 0;
              }
              $1148 = $1084 + 16 | 0;
              if ((HEAP32[$1148 >> 2] | 0) == ($1081 | 0)) {
               HEAP32[$1148 >> 2] = $R_1_i_i;
              } else {
               HEAP32[$1084 + 20 >> 2] = $R_1_i_i;
              }
              if (($R_1_i_i | 0) == 0) {
               break L355;
              }
             }
            } while (0);
            if ($R_1_i_i >>> 0 < (HEAP32[92178] | 0) >>> 0) {
             _abort();
             return 0;
            }
            HEAP32[$R_1_i_i + 24 >> 2] = $1084;
            $_sum3233_i_i = $1003 | 16;
            $1165 = HEAP32[$tbase_245_i + ($_sum3233_i_i + $tsize_244_i) >> 2] | 0;
            do {
             if (($1165 | 0) != 0) {
              if ($1165 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
               _abort();
               return 0;
              } else {
               HEAP32[$R_1_i_i + 16 >> 2] = $1165;
               HEAP32[$1165 + 24 >> 2] = $R_1_i_i;
               break;
              }
             }
            } while (0);
            $1178 = HEAP32[$tbase_245_i + ($_sum2_i23_i + $_sum3233_i_i) >> 2] | 0;
            if (($1178 | 0) == 0) {
             break;
            }
            if ($1178 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
             _abort();
             return 0;
            } else {
             HEAP32[$R_1_i_i + 20 >> 2] = $1178;
             HEAP32[$1178 + 24 >> 2] = $R_1_i_i;
             break;
            }
           }
          } while (0);
          $oldfirst_0_i_i = $tbase_245_i + (($1041 | $1003) + $tsize_244_i) | 0;
          $qsize_0_i_i = $1041 + $1011 | 0;
         } else {
          $oldfirst_0_i_i = $1005;
          $qsize_0_i_i = $1011;
         }
         $1194 = $oldfirst_0_i_i + 4 | 0;
         HEAP32[$1194 >> 2] = HEAP32[$1194 >> 2] & -2;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 4) >> 2] = $qsize_0_i_i | 1;
         HEAP32[$tbase_245_i + ($qsize_0_i_i + $_sum_i21_i) >> 2] = $qsize_0_i_i;
         $1202 = $qsize_0_i_i >>> 3;
         if ($qsize_0_i_i >>> 0 < 256 >>> 0) {
          $1205 = $1202 << 1;
          $1207 = 368736 + ($1205 << 2) | 0;
          $1208 = HEAP32[92174] | 0;
          $1209 = 1 << $1202;
          do {
           if (($1208 & $1209 | 0) == 0) {
            HEAP32[92174] = $1208 | $1209;
            $F4_0_i_i = $1207;
            $_pre_phi_i25_i = 368736 + ($1205 + 2 << 2) | 0;
           } else {
            $1215 = 368736 + ($1205 + 2 << 2) | 0;
            $1216 = HEAP32[$1215 >> 2] | 0;
            if ($1216 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
             $F4_0_i_i = $1216;
             $_pre_phi_i25_i = $1215;
             break;
            }
            _abort();
            return 0;
           }
          } while (0);
          HEAP32[$_pre_phi_i25_i >> 2] = $1010;
          HEAP32[$F4_0_i_i + 12 >> 2] = $1010;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $F4_0_i_i;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $1207;
          break;
         }
         $1228 = $1009;
         $1229 = $qsize_0_i_i >>> 8;
         do {
          if (($1229 | 0) == 0) {
           $I7_0_i_i = 0;
          } else {
           if ($qsize_0_i_i >>> 0 > 16777215 >>> 0) {
            $I7_0_i_i = 31;
            break;
           }
           $1236 = ($1229 + 1048320 | 0) >>> 16 & 8;
           $1237 = $1229 << $1236;
           $1240 = ($1237 + 520192 | 0) >>> 16 & 4;
           $1242 = $1237 << $1240;
           $1245 = ($1242 + 245760 | 0) >>> 16 & 2;
           $1250 = 14 - ($1240 | $1236 | $1245) + ($1242 << $1245 >>> 15) | 0;
           $I7_0_i_i = $qsize_0_i_i >>> (($1250 + 7 | 0) >>> 0) & 1 | $1250 << 1;
          }
         } while (0);
         $1257 = 369e3 + ($I7_0_i_i << 2) | 0;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 28) >> 2] = $I7_0_i_i;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 20) >> 2] = 0;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 16) >> 2] = 0;
         $1264 = HEAP32[92175] | 0;
         $1265 = 1 << $I7_0_i_i;
         if (($1264 & $1265 | 0) == 0) {
          HEAP32[92175] = $1264 | $1265;
          HEAP32[$1257 >> 2] = $1228;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 24) >> 2] = $1257;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $1228;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $1228;
          break;
         }
         if (($I7_0_i_i | 0) == 31) {
          $1284 = 0;
         } else {
          $1284 = 25 - ($I7_0_i_i >>> 1) | 0;
         }
         $K8_0_i_i = $qsize_0_i_i << $1284;
         $T_0_i27_i = HEAP32[$1257 >> 2] | 0;
         while (1) {
          if ((HEAP32[$T_0_i27_i + 4 >> 2] & -8 | 0) == ($qsize_0_i_i | 0)) {
           break;
          }
          $1293 = $T_0_i27_i + 16 + ($K8_0_i_i >>> 31 << 2) | 0;
          $1294 = HEAP32[$1293 >> 2] | 0;
          if (($1294 | 0) == 0) {
           label = 296;
           break;
          } else {
           $K8_0_i_i = $K8_0_i_i << 1;
           $T_0_i27_i = $1294;
          }
         }
         if ((label | 0) == 296) {
          if ($1293 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
           _abort();
           return 0;
          } else {
           HEAP32[$1293 >> 2] = $1228;
           HEAP32[$tbase_245_i + ($_sum_i21_i + 24) >> 2] = $T_0_i27_i;
           HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $1228;
           HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $1228;
           break;
          }
         }
         $1310 = $T_0_i27_i + 8 | 0;
         $1311 = HEAP32[$1310 >> 2] | 0;
         $1313 = HEAP32[92178] | 0;
         if ($T_0_i27_i >>> 0 < $1313 >>> 0) {
          _abort();
          return 0;
         }
         if ($1311 >>> 0 < $1313 >>> 0) {
          _abort();
          return 0;
         } else {
          HEAP32[$1311 + 12 >> 2] = $1228;
          HEAP32[$1310 >> 2] = $1228;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $1311;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $T_0_i27_i;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 24) >> 2] = 0;
          break;
         }
        }
       } while (0);
       $mem_0 = $tbase_245_i + ($993 | 8) | 0;
       return $mem_0 | 0;
      }
     } while (0);
     $1327 = $890;
     $sp_0_i_i_i = 369144;
     while (1) {
      $1330 = HEAP32[$sp_0_i_i_i >> 2] | 0;
      if ($1330 >>> 0 <= $1327 >>> 0) {
       $1334 = HEAP32[$sp_0_i_i_i + 4 >> 2] | 0;
       $1335 = $1330 + $1334 | 0;
       if ($1335 >>> 0 > $1327 >>> 0) {
        break;
       }
      }
      $sp_0_i_i_i = HEAP32[$sp_0_i_i_i + 8 >> 2] | 0;
     }
     $1341 = $1330 + ($1334 - 39) | 0;
     if (($1341 & 7 | 0) == 0) {
      $1348 = 0;
     } else {
      $1348 = -$1341 & 7;
     }
     $1349 = $1330 + ($1334 - 47 + $1348) | 0;
     $1353 = $1349 >>> 0 < ($890 + 16 | 0) >>> 0 ? $1327 : $1349;
     $1354 = $1353 + 8 | 0;
     $1358 = $tbase_245_i + 8 | 0;
     if (($1358 & 7 | 0) == 0) {
      $1364 = 0;
     } else {
      $1364 = -$1358 & 7;
     }
     $1367 = $tsize_244_i - 40 - $1364 | 0;
     HEAP32[92180] = $tbase_245_i + $1364;
     HEAP32[92177] = $1367;
     HEAP32[$tbase_245_i + ($1364 + 4) >> 2] = $1367 | 1;
     HEAP32[$tbase_245_i + ($tsize_244_i - 36) >> 2] = 40;
     HEAP32[92181] = HEAP32[89576];
     HEAP32[$1353 + 4 >> 2] = 27;
     HEAP32[$1354 >> 2] = HEAP32[92286];
     HEAP32[$1354 + 4 >> 2] = HEAP32[92287];
     HEAP32[$1354 + 8 >> 2] = HEAP32[92288];
     HEAP32[$1354 + 12 >> 2] = HEAP32[92289];
     HEAP32[92286] = $tbase_245_i;
     HEAP32[92287] = $tsize_244_i;
     HEAP32[92289] = 0;
     HEAP32[92288] = $1354;
     $1377 = $1353 + 28 | 0;
     HEAP32[$1377 >> 2] = 7;
     if (($1353 + 32 | 0) >>> 0 < $1335 >>> 0) {
      $1380 = $1377;
      while (1) {
       $1381 = $1380 + 4 | 0;
       HEAP32[$1381 >> 2] = 7;
       if (($1380 + 8 | 0) >>> 0 < $1335 >>> 0) {
        $1380 = $1381;
       } else {
        break;
       }
      }
     }
     if (($1353 | 0) == ($1327 | 0)) {
      break;
     }
     $1389 = $1353 - $890 | 0;
     $1392 = $1327 + ($1389 + 4) | 0;
     HEAP32[$1392 >> 2] = HEAP32[$1392 >> 2] & -2;
     HEAP32[$890 + 4 >> 2] = $1389 | 1;
     HEAP32[$1327 + $1389 >> 2] = $1389;
     $1398 = $1389 >>> 3;
     if ($1389 >>> 0 < 256 >>> 0) {
      $1401 = $1398 << 1;
      $1403 = 368736 + ($1401 << 2) | 0;
      $1404 = HEAP32[92174] | 0;
      $1405 = 1 << $1398;
      do {
       if (($1404 & $1405 | 0) == 0) {
        HEAP32[92174] = $1404 | $1405;
        $F_0_i_i = $1403;
        $_pre_phi_i_i = 368736 + ($1401 + 2 << 2) | 0;
       } else {
        $1411 = 368736 + ($1401 + 2 << 2) | 0;
        $1412 = HEAP32[$1411 >> 2] | 0;
        if ($1412 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
         $F_0_i_i = $1412;
         $_pre_phi_i_i = $1411;
         break;
        }
        _abort();
        return 0;
       }
      } while (0);
      HEAP32[$_pre_phi_i_i >> 2] = $890;
      HEAP32[$F_0_i_i + 12 >> 2] = $890;
      HEAP32[$890 + 8 >> 2] = $F_0_i_i;
      HEAP32[$890 + 12 >> 2] = $1403;
      break;
     }
     $1422 = $890;
     $1423 = $1389 >>> 8;
     do {
      if (($1423 | 0) == 0) {
       $I1_0_i_i = 0;
      } else {
       if ($1389 >>> 0 > 16777215 >>> 0) {
        $I1_0_i_i = 31;
        break;
       }
       $1430 = ($1423 + 1048320 | 0) >>> 16 & 8;
       $1431 = $1423 << $1430;
       $1434 = ($1431 + 520192 | 0) >>> 16 & 4;
       $1436 = $1431 << $1434;
       $1439 = ($1436 + 245760 | 0) >>> 16 & 2;
       $1444 = 14 - ($1434 | $1430 | $1439) + ($1436 << $1439 >>> 15) | 0;
       $I1_0_i_i = $1389 >>> (($1444 + 7 | 0) >>> 0) & 1 | $1444 << 1;
      }
     } while (0);
     $1451 = 369e3 + ($I1_0_i_i << 2) | 0;
     HEAP32[$890 + 28 >> 2] = $I1_0_i_i;
     HEAP32[$890 + 20 >> 2] = 0;
     HEAP32[$890 + 16 >> 2] = 0;
     $1455 = HEAP32[92175] | 0;
     $1456 = 1 << $I1_0_i_i;
     if (($1455 & $1456 | 0) == 0) {
      HEAP32[92175] = $1455 | $1456;
      HEAP32[$1451 >> 2] = $1422;
      HEAP32[$890 + 24 >> 2] = $1451;
      HEAP32[$890 + 12 >> 2] = $890;
      HEAP32[$890 + 8 >> 2] = $890;
      break;
     }
     if (($I1_0_i_i | 0) == 31) {
      $1471 = 0;
     } else {
      $1471 = 25 - ($I1_0_i_i >>> 1) | 0;
     }
     $K2_0_i_i = $1389 << $1471;
     $T_0_i_i = HEAP32[$1451 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T_0_i_i + 4 >> 2] & -8 | 0) == ($1389 | 0)) {
       break;
      }
      $1480 = $T_0_i_i + 16 + ($K2_0_i_i >>> 31 << 2) | 0;
      $1481 = HEAP32[$1480 >> 2] | 0;
      if (($1481 | 0) == 0) {
       label = 331;
       break;
      } else {
       $K2_0_i_i = $K2_0_i_i << 1;
       $T_0_i_i = $1481;
      }
     }
     if ((label | 0) == 331) {
      if ($1480 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
       _abort();
       return 0;
      } else {
       HEAP32[$1480 >> 2] = $1422;
       HEAP32[$890 + 24 >> 2] = $T_0_i_i;
       HEAP32[$890 + 12 >> 2] = $890;
       HEAP32[$890 + 8 >> 2] = $890;
       break;
      }
     }
     $1494 = $T_0_i_i + 8 | 0;
     $1495 = HEAP32[$1494 >> 2] | 0;
     $1497 = HEAP32[92178] | 0;
     if ($T_0_i_i >>> 0 < $1497 >>> 0) {
      _abort();
      return 0;
     }
     if ($1495 >>> 0 < $1497 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$1495 + 12 >> 2] = $1422;
      HEAP32[$1494 >> 2] = $1422;
      HEAP32[$890 + 8 >> 2] = $1495;
      HEAP32[$890 + 12 >> 2] = $T_0_i_i;
      HEAP32[$890 + 24 >> 2] = 0;
      break;
     }
    }
   } while (0);
   $1507 = HEAP32[92177] | 0;
   if ($1507 >>> 0 <= $nb_0 >>> 0) {
    break;
   }
   $1510 = $1507 - $nb_0 | 0;
   HEAP32[92177] = $1510;
   $1511 = HEAP32[92180] | 0;
   $1512 = $1511;
   HEAP32[92180] = $1512 + $nb_0;
   HEAP32[$1512 + ($nb_0 + 4) >> 2] = $1510 | 1;
   HEAP32[$1511 + 4 >> 2] = $nb_0 | 3;
   $mem_0 = $1511 + 8 | 0;
   return $mem_0 | 0;
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem_0 = 0;
 return $mem_0 | 0;
}
function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $cp1_i_i = 0, $wp_i = 0, $line_col_i = 0, $has_pragma_i = 0, $in_file = 0, $out_file = 0, $2 = 0, $8 = 0, $9 = 0, $21 = 0, $24 = 0, $27 = 0, $35 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $54 = 0, $55 = 0, $62 = 0, $69 = 0, $70 = 0, $74 = 0, $80 = 0, $87 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $109 = 0, $c_033_i = 0, $118 = 0, $121 = 0, $c_0_lcssa_i = 0, $136 = 0, $145 = 0, $c_1_i = 0, $c_177_i = 0, $180 = 0, $187 = 0, $_pr_i = 0, $_pr32_i = 0, $c_2_i = 0, $line_top_0_i = 0, $207 = 0, $218 = 0, $221 = 0, $226 = 0, $229 = 0, $tp_0_i = 0, $240 = 0, $247 = 0, $249 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $260 = 0, $prev_0_ph26_i_i = 0, $262 = 0, $270 = 0, $272 = 0, $277 = 0, $280 = 0, $$etemp$1 = 0, $290 = 0, $292 = 0, $294 = 0, $_off0_i_i = 0, $301 = 0, $303 = 0, $_lcssa13_i_i = 0, $309 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $_off0_i_i_i = 0, $_01_i_i_i = 0, $318 = 0, $319 = 0, $_0_lcssa_i_i_i = 0, $in_p_0_i_i_i = 0, $_0_i_i_i = 0, $327 = 0, $328 = 0, $330 = 0, $331 = 0, $in_p_1_i_i_i = 0, $c_0_off0_i_i_i = 0, $335 = 0, $336 = 0, $_off029_i_i = 0, $343 = 0, $345 = 0, $_lcssa14_i_i = 0, $353 = 0, $354 = 0, $355 = 0, $_off0_i7_i_i = 0, $_01_i8_i_i = 0, $359 = 0, $360 = 0, $_0_lcssa_i10_i_i = 0, $365 = 0, $368 = 0, $369 = 0, $370 = 0, $prev_0_ph_be_i_i = 0, $372 = 0, $prev_0_ph25_i_i = 0, $381 = 0, $384 = 0, $388 = 0, $389 = 0, $400 = 0, $406 = 0, $410 = 0, $412 = 0, $423 = 0, $424 = 0, $428 = 0, $433 = 0, $443 = 0, $452 = 0, $453 = 0, $_0 = 0, label = 0, setjmpLabel = 0, setjmpTable = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 label = 1;
 setjmpLabel = 0;
 setjmpTable = STACKTOP;
 STACKTOP = STACKTOP + 168 | 0;
 HEAP32[setjmpTable >> 2] = 0;
 while (1) switch (label | 0) {
 case 1:
  $cp1_i_i = sp | 0;
  $wp_i = sp + 8 | 0;
  $line_col_i = sp + 16 | 0;
  $has_pragma_i = sp + 24 | 0;
  $in_file = sp + 32 | 0;
  $out_file = sp + 40 | 0;
  HEAP32[$in_file >> 2] = 0;
  HEAP32[$out_file >> 2] = 0;
  invoke_v(4);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $2 = _saveSetjmp(360176, label, setjmpTable) | 0;
  label = 124;
  break;
 case 124:
  if (($2 | 0) == -1) {
   label = 2;
   break;
  } else {
   label = 3;
   break;
  }
 case 2:
  HEAP32[90042] = (HEAP32[90042] | 0) + 1;
  $423 = HEAP32[_stdin >> 2] | 0;
  label = 113;
  break;
 case 3:
  $8 = HEAP32[_stdin >> 2] | 0;
  HEAP32[89992] = $8;
  $9 = HEAP32[_stdout >> 2] | 0;
  HEAP32[89990] = $9;
  HEAP32[89994] = HEAP32[_stderr >> 2];
  HEAP32[89996] = $9;
  HEAP32[89676] = 2704;
  HEAP32[91368] = 16776;
  HEAP32[91370] = 16776;
  invoke_iiiii(2, 18296, -771 | 0, HEAP32[676] | 0, 17464) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_iiiii(2, 16768, -772 | 0, HEAP32[676] | 0, 17464) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_iiiii(2, 16e3, -772 | 0, HEAP32[676] | 0, 17464) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_iiiii(2, 15336, -772 | 0, HEAP32[676] | 0, 17464) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_iiiii(2, 15e3, -772 | 0, HEAP32[676] | 0, 14888) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_v(14);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_viiii(4, $argc | 0, $argv | 0, $in_file | 0, $out_file | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $21 = HEAP32[$in_file >> 2] | 0;
  if (($21 | 0) == 0) {
   label = 7;
   break;
  } else {
   label = 4;
   break;
  }
 case 4:
  $24 = invoke_iii(10, $21 | 0, 14224) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($24 | 0) == 0) {
   label = 7;
   break;
  } else {
   label = 5;
   break;
  }
 case 5:
  $27 = invoke_iii(14, $21 | 0, 13008) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89992] = $27;
  if (($27 | 0) == 0) {
   label = 6;
   break;
  } else {
   label = 8;
   break;
  }
 case 6:
  invoke_iiii(HEAP32[690] | 0, 1, 11944, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$in_file >> 2], tempVarArgs) | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  STACKTOP = tempVarArgs;
  HEAP32[90042] = (HEAP32[90042] | 0) + 1;
  $35 = invoke_i(2) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $36 = HEAP32[$35 >> 2] | 0;
  $_0 = ($36 | 0) == 0 ? 1 : $36;
  label = 123;
  break;
 case 7:
  HEAP32[$in_file >> 2] = 22320;
  label = 8;
  break;
 case 8:
  $40 = HEAP32[$out_file >> 2] | 0;
  if (($40 | 0) == 0) {
   label = 13;
   break;
  } else {
   label = 9;
   break;
  }
 case 9:
  $43 = invoke_iii(10, $40 | 0, 14224) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($43 | 0) == 0) {
   label = 13;
   break;
  } else {
   label = 10;
   break;
  }
 case 10:
  $46 = invoke_iii(14, $40 | 0, 10440) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89990] = $46;
  if (($46 | 0) == 0) {
   label = 11;
   break;
  } else {
   label = 12;
   break;
  }
 case 11:
  invoke_iiii(HEAP32[690] | 0, 1, 9088, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$out_file >> 2], tempVarArgs) | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  STACKTOP = tempVarArgs;
  HEAP32[90042] = (HEAP32[90042] | 0) + 1;
  $54 = invoke_i(2) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $55 = HEAP32[$54 >> 2] | 0;
  $_0 = ($55 | 0) == 0 ? 1 : $55;
  label = 123;
  break;
 case 12:
  HEAP32[89996] = $46;
  label = 13;
  break;
 case 13:
  if ((HEAP32[89546] | 0) == 0) {
   label = 16;
   break;
  } else {
   label = 14;
   break;
  }
 case 14:
  $62 = invoke_iii(14, 8160, 7240) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89994] = $62;
  if (($62 | 0) == 0) {
   label = 15;
   break;
  } else {
   label = 16;
   break;
  }
 case 15:
  HEAP32[90042] = (HEAP32[90042] | 0) + 1;
  invoke_iiii(HEAP32[690] | 0, 0, 22296, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  STACKTOP = tempVarArgs;
  $69 = invoke_i(2) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $_0 = ($70 | 0) == 0 ? 1 : $70;
  label = 123;
  break;
 case 16:
  invoke_v(18);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $74 = HEAP32[$in_file >> 2] | 0;
  invoke_viiiii(2, HEAP32[89992] | 0, 0, $74 | 0, $74 | 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[(HEAP32[89668] | 0) + 32 >> 2] = HEAP32[89676];
  HEAP32[(HEAP32[89668] | 0) + 24 >> 2] = 0;
  $80 = HEAP32[$in_file >> 2] | 0;
  HEAP32[91368] = $80;
  if ((HEAP32[89590] | 0) == 0) {
   label = 19;
   break;
  } else {
   label = 17;
   break;
  }
 case 17:
  $87 = invoke_iii(10, HEAP32[(HEAP32[89668] | 0) + 40 >> 2] | 0, 22320) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($87 | 0) == 0) {
   label = 19;
   break;
  } else {
   label = 18;
   break;
  }
 case 18:
  invoke_vi(4, $80 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 19;
  break;
 case 19:
  invoke_v(20);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[89542] | 0) == 0) {
   $100 = 0;
   label = 21;
   break;
  } else {
   label = 20;
   break;
  }
 case 20:
  $100 = (HEAP32[89566] | 0) == 0 | 0;
  label = 21;
  break;
 case 21:
  HEAP32[89624] = $100;
  HEAP32[89622] = HEAP32[89543];
  $102 = $line_col_i | 0;
  HEAP32[$102 >> 2] = 0;
  $103 = $line_col_i + 4 | 0;
  HEAP32[$103 >> 2] = 0;
  label = 22;
  break;
 case 22:
  HEAP32[89568] = 0;
  HEAP32[89540] = 96016;
  $106 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[23334] | 0) == 0) {
   $109 = $106;
   label = 23;
   break;
  } else {
   $c_1_i = $106;
   label = 44;
   break;
  }
 case 23:
  if ((HEAP16[(HEAP32[91636] | 0) + ($109 << 1) >> 1] & 64) == 0) {
   $c_0_lcssa_i = $109;
   label = 27;
   break;
  } else {
   $c_033_i = $109;
   label = 24;
   break;
  }
 case 24:
  if (($c_033_i | 0) == 31) {
   label = 26;
   break;
  } else {
   label = 25;
   break;
  }
 case 25:
  $118 = HEAP32[89540] | 0;
  HEAP32[89540] = $118 + 1;
  HEAP8[$118] = $c_033_i;
  label = 26;
  break;
 case 26:
  $121 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($121 << 1) >> 1] & 64) == 0) {
   $c_0_lcssa_i = $121;
   label = 27;
   break;
  } else {
   $c_033_i = $121;
   label = 24;
   break;
  }
 case 27:
  if (($c_0_lcssa_i | 0) == 35) {
   label = 28;
   break;
  } else {
   label = 29;
   break;
  }
 case 28:
  invoke_v(12);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 34;
  break;
 case 29:
  if ((HEAP32[682] | 0) == 3 & (HEAP32[89549] | 0) != 0 & ($c_0_lcssa_i | 0) == 37) {
   label = 30;
   break;
  } else {
   label = 35;
   break;
  }
 case 30:
  $136 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($136 | 0) == 58) {
   label = 31;
   break;
  } else {
   label = 32;
   break;
  }
 case 31:
  invoke_v(12);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 34;
  break;
 case 32:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[730] | 0) == 0) {
   label = 33;
   break;
  } else {
   $c_177_i = 37;
   label = 45;
   break;
  }
 case 33:
  invoke_v(2);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89568] = (HEAP32[89568] | 0) + 1;
  label = 34;
  break;
 case 34:
  HEAP32[89540] = 96016;
  $145 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[23334] | 0) == 0) {
   $109 = $145;
   label = 23;
   break;
  } else {
   $c_1_i = $145;
   label = 44;
   break;
  }
 case 35:
  if (($c_0_lcssa_i | 0) == 0) {
   label = 110;
   break;
  } else {
   label = 36;
   break;
  }
 case 36:
  if ((HEAP32[730] | 0) == 0) {
   label = 37;
   break;
  } else {
   label = 38;
   break;
  }
 case 37:
  invoke_v(2);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89568] = (HEAP32[89568] | 0) + 1;
  label = 34;
  break;
 case 38:
  if ((HEAP32[89692] | 0) == 0 | (HEAP32[89566] | 0) != 0) {
   label = 40;
   break;
  } else {
   label = 39;
   break;
  }
 case 39:
  invoke_v(8);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 34;
  break;
 case 40:
  if (($c_0_lcssa_i | 0) == 10) {
   label = 41;
   break;
  } else {
   $c_1_i = $c_0_lcssa_i;
   label = 44;
   break;
  }
 case 41:
  if ((HEAP32[89624] | 0) == 0) {
   label = 43;
   break;
  } else {
   label = 42;
   break;
  }
 case 42:
  invoke_iii(HEAP32[688] | 0, 10, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 34;
  break;
 case 43:
  HEAP32[89568] = (HEAP32[89568] | 0) + 1;
  label = 34;
  break;
 case 44:
  if (($c_1_i | 0) == 0) {
   label = 110;
   break;
  } else {
   $c_177_i = $c_1_i;
   label = 45;
   break;
  }
 case 45:
  if ((HEAP32[89566] | 0) == 0) {
   label = 47;
   break;
  } else {
   label = 46;
   break;
  }
 case 46:
  HEAP32[5582] = 0;
  $line_top_0_i = 1;
  $c_2_i = $c_177_i;
  label = 54;
  break;
 case 47:
  $180 = HEAP32[89568] | 0;
  if ((HEAP32[5582] | 0) != 0 | ($180 | 0) > 10) {
   label = 49;
   break;
  } else {
   label = 48;
   break;
  }
 case 48:
  HEAP32[89568] = $180 - 1;
  if (($180 | 0) > 0) {
   label = 53;
   break;
  } else {
   $line_top_0_i = 1;
   $c_2_i = $c_177_i;
   label = 54;
   break;
  }
 case 49:
  invoke_vii(2, 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $187 = HEAP32[23334] | 0;
  if ((HEAP32[89622] | 0) != 0 & ($187 | 0) != 0) {
   label = 50;
   break;
  } else {
   $line_top_0_i = 1;
   $c_2_i = $c_177_i;
   label = 54;
   break;
  }
 case 50:
  HEAP32[23334] = $187 - 1;
  label = 51;
  break;
 case 51:
  invoke_iii(HEAP32[688] | 0, 32, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $_pr_i = HEAP32[23334] | 0;
  HEAP32[23334] = $_pr_i - 1;
  if (($_pr_i | 0) == 0) {
   label = 52;
   break;
  } else {
   label = 51;
   break;
  }
 case 52:
  HEAP32[23334] = 0;
  $line_top_0_i = 1;
  $c_2_i = $c_177_i;
  label = 54;
  break;
 case 53:
  invoke_iii(HEAP32[688] | 0, 10, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $_pr32_i = HEAP32[89568] | 0;
  HEAP32[89568] = $_pr32_i - 1;
  if (($_pr32_i | 0) > 0) {
   label = 53;
   break;
  } else {
   $line_top_0_i = 1;
   $c_2_i = $c_177_i;
   label = 54;
   break;
  }
 case 54:
  if (($c_2_i | 0) == 10 | ($c_2_i | 0) == 0) {
   label = 109;
   break;
  } else {
   label = 55;
   break;
  }
 case 55:
  if ((HEAP32[89594] & 8 | 0) == 0 | (HEAP32[89688] | 0) != 0) {
   label = 57;
   break;
  } else {
   label = 56;
   break;
  }
 case 56:
  HEAP32[$102 >> 2] = HEAP32[23332];
  $207 = HEAP32[89668] | 0;
  HEAP32[$103 >> 2] = (HEAP32[$207 >> 2] | 0) - 1 - (HEAP32[$207 + 52 >> 2] | 0);
  label = 57;
  break;
 case 57:
  HEAP32[$wp_i >> 2] = HEAP32[89540];
  $218 = invoke_iiii(8, $c_2_i | 0, $wp_i | 0, 358158) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($218 | 0) == 65) {
   label = 58;
   break;
  } else {
   label = 104;
   break;
  }
 case 58:
  $221 = invoke_ii(6, $wp_i | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($221 | 0) == 0) {
   label = 104;
   break;
  } else {
   label = 59;
   break;
  }
 case 59:
  $226 = invoke_iiiiii(HEAP32[90034] | 0, $221 | 0, HEAP32[89540] | 0, 358158, $line_col_i | 0, $has_pragma_i | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[$wp_i >> 2] = $226;
  if (($line_top_0_i | 0) == 0) {
   $249 = $226;
   label = 63;
   break;
  } else {
   label = 60;
   break;
  }
 case 60:
  $229 = HEAP32[89540] | 0;
  $tp_0_i = $229;
  label = 61;
  break;
 case 61:
  if ((HEAP16[(HEAP32[91636] | 0) + (HEAPU8[$tp_0_i] << 1) >> 1] & 64) == 0) {
   label = 62;
   break;
  } else {
   $tp_0_i = $tp_0_i + 1 | 0;
   label = 61;
   break;
  }
 case 62:
  $240 = invoke_ii(2, $tp_0_i | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_iiii(14, $229 | 0, $tp_0_i | 0, $240 + 1 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $247 = (HEAP32[$wp_i >> 2] | 0) + ((HEAP32[89540] | 0) - $tp_0_i) | 0;
  HEAP32[$wp_i >> 2] = $247;
  $249 = $247;
  label = 63;
  break;
 case 63:
  if ((HEAP32[$has_pragma_i >> 2] | 0) == 0) {
   label = 100;
   break;
  } else {
   label = 64;
   break;
  }
 case 64:
  $253 = HEAP32[89540] | 0;
  $255 = $253 >>> 0 > 96016 >>> 0 | 0;
  $256 = invoke_iii(2, $253 | 0, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $257 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($256 | 0) == (HEAP32[89668] | 0)) {
   $prev_0_ph26_i_i = $255;
   $260 = $257;
   label = 65;
   break;
  } else {
   $prev_0_ph25_i_i = $255;
   label = 97;
   break;
  }
 case 65:
  $262 = $260;
  label = 66;
  break;
 case 66:
  if ((HEAP16[(HEAP32[91636] | 0) + ($262 << 1) >> 1] & 64) == 0) {
   label = 68;
   break;
  } else {
   label = 67;
   break;
  }
 case 67:
  $270 = HEAP32[89540] | 0;
  HEAP32[89540] = $270 + 1;
  HEAP8[$270] = $262;
  $272 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($256 | 0) == (HEAP32[89668] | 0)) {
   $262 = $272;
   label = 66;
   break;
  } else {
   $prev_0_ph25_i_i = $prev_0_ph26_i_i;
   label = 97;
   break;
  }
 case 68:
  HEAP32[$cp1_i_i >> 2] = HEAP32[89540];
  $277 = invoke_iiii(8, $262 | 0, $cp1_i_i | 0, 358158) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($277 | 0) == 65) {
   label = 69;
   break;
  } else {
   label = 96;
   break;
  }
 case 69:
  $280 = invoke_ii(6, $cp1_i_i | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($280 | 0) == 0) {
   label = 96;
   break;
  } else {
   label = 70;
   break;
  }
 case 70:
  if ((HEAP16[$280 + 4 >> 1] | 0) == -769) {
   label = 71;
   break;
  } else {
   label = 96;
   break;
  }
 case 71:
  if (($prev_0_ph26_i_i | 0) == 0) {
   label = 73;
   break;
  } else {
   label = 72;
   break;
  }
 case 72:
  invoke_v(10);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $$etemp$1 = 96016;
  HEAP32[$$etemp$1 >> 2] = 1734439536;
  HEAP32[$$etemp$1 + 4 >> 2] = 2122093;
  HEAP32[$cp1_i_i >> 2] = 96023;
  label = 73;
  break;
 case 73:
  $290 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $292 = HEAP32[$cp1_i_i >> 2] | 0;
  HEAP32[$cp1_i_i >> 2] = $292 + 1;
  HEAP8[$292] = $290;
  $294 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($294 << 1) >> 1] & 64) == 0) {
   $_lcssa13_i_i = $294;
   label = 76;
   break;
  } else {
   label = 74;
   break;
  }
 case 74:
  $_off0_i_i = $294 & 255;
  label = 75;
  break;
 case 75:
  $301 = HEAP32[$cp1_i_i >> 2] | 0;
  HEAP32[$cp1_i_i >> 2] = $301 + 1;
  HEAP8[$301] = $_off0_i_i;
  $303 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($303 << 1) >> 1] & 64) == 0) {
   $_lcssa13_i_i = $303;
   label = 76;
   break;
  } else {
   $_off0_i_i = $303 & 255;
   label = 75;
   break;
  }
 case 76:
  $309 = HEAP32[$cp1_i_i >> 2] | 0;
  $310 = invoke_iiii(8, $_lcssa13_i_i | 0, $cp1_i_i | 0, 358158) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($310 - 67 | 0) >>> 0 < 2 >>> 0) {
   label = 81;
   break;
  } else {
   label = 77;
   break;
  }
 case 77:
  $312 = HEAP32[$cp1_i_i >> 2] | 0;
  $313 = HEAP32[89668] | 0;
  invoke_viiii(6, 18888, 0, 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $314 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($313 | 0) == (HEAP32[89668] | 0)) {
   label = 78;
   break;
  } else {
   $_0_lcssa_i_i_i = $312;
   label = 80;
   break;
  }
 case 78:
  $_01_i_i_i = $312;
  $_off0_i_i_i = $314 & 255;
  label = 79;
  break;
 case 79:
  $318 = $_01_i_i_i + 1 | 0;
  HEAP8[$_01_i_i_i] = $_off0_i_i_i;
  $319 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($313 | 0) == (HEAP32[89668] | 0)) {
   $_01_i_i_i = $318;
   $_off0_i_i_i = $319 & 255;
   label = 79;
   break;
  } else {
   $_0_lcssa_i_i_i = $318;
   label = 80;
   break;
  }
 case 80:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89540] = $_0_lcssa_i_i_i;
  invoke_v(10);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 99;
  break;
 case 81:
  $_0_i_i_i = 22344;
  $in_p_0_i_i_i = (HEAP8[$309] | 0) == 76 ? $309 + 1 | 0 : $309;
  label = 82;
  break;
 case 82:
  $327 = $in_p_0_i_i_i + 1 | 0;
  $328 = HEAP8[$327] | 0;
  if (($328 << 24 >> 24 | 0) == 92) {
   label = 83;
   break;
  } else if (($328 << 24 >> 24 | 0) == 0) {
   label = 86;
   break;
  } else {
   $c_0_off0_i_i_i = $328;
   $in_p_1_i_i_i = $327;
   label = 85;
   break;
  }
 case 83:
  $330 = $in_p_0_i_i_i + 2 | 0;
  $331 = HEAP8[$330] | 0;
  if (($331 << 24 >> 24 | 0) == 92 | ($331 << 24 >> 24 | 0) == 34) {
   label = 84;
   break;
  } else {
   $c_0_off0_i_i_i = 92;
   $in_p_1_i_i_i = $327;
   label = 85;
   break;
  }
 case 84:
  $c_0_off0_i_i_i = $331;
  $in_p_1_i_i_i = $330;
  label = 85;
  break;
 case 85:
  HEAP8[$_0_i_i_i] = $c_0_off0_i_i_i;
  $_0_i_i_i = $_0_i_i_i + 1 | 0;
  $in_p_0_i_i_i = $in_p_1_i_i_i;
  label = 82;
  break;
 case 86:
  $335 = $_0_i_i_i - 1 | 0;
  HEAP8[$335] = 0;
  HEAP32[5584] = $335;
  $336 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($336 << 1) >> 1] & 64) == 0) {
   $_lcssa14_i_i = $336;
   label = 89;
   break;
  } else {
   label = 87;
   break;
  }
 case 87:
  $_off029_i_i = $336 & 255;
  label = 88;
  break;
 case 88:
  $343 = HEAP32[$cp1_i_i >> 2] | 0;
  HEAP32[$cp1_i_i >> 2] = $343 + 1;
  HEAP8[$343] = $_off029_i_i;
  $345 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($345 << 1) >> 1] & 64) == 0) {
   $_lcssa14_i_i = $345;
   label = 89;
   break;
  } else {
   $_off029_i_i = $345 & 255;
   label = 88;
   break;
  }
 case 89:
  if (($_lcssa14_i_i | 0) == 41) {
   label = 94;
   break;
  } else {
   label = 90;
   break;
  }
 case 90:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $353 = HEAP32[$cp1_i_i >> 2] | 0;
  $354 = HEAP32[89668] | 0;
  invoke_viiii(6, 18888, 0, 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $355 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($354 | 0) == (HEAP32[89668] | 0)) {
   label = 91;
   break;
  } else {
   $_0_lcssa_i10_i_i = $353;
   label = 93;
   break;
  }
 case 91:
  $_01_i8_i_i = $353;
  $_off0_i7_i_i = $355 & 255;
  label = 92;
  break;
 case 92:
  $359 = $_01_i8_i_i + 1 | 0;
  HEAP8[$_01_i8_i_i] = $_off0_i7_i_i;
  $360 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($354 | 0) == (HEAP32[89668] | 0)) {
   $_01_i8_i_i = $359;
   $_off0_i7_i_i = $360 & 255;
   label = 92;
   break;
  } else {
   $_0_lcssa_i10_i_i = $359;
   label = 93;
   break;
  }
 case 93:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89540] = $_0_lcssa_i10_i_i;
  invoke_v(10);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 99;
  break;
 case 94:
  $365 = HEAP32[5584] | 0;
  tempBigInt = 10;
  HEAP8[$365] = tempBigInt;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$365 + 1 | 0] = tempBigInt;
  invoke_iii(2, 22344, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_v(26);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $368 = HEAP32[89668] | 0;
  $369 = HEAP32[$368 >> 2] | 0;
  $370 = invoke_ii(2, $369 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[$368 >> 2] = $369 + $370;
  HEAP32[89540] = 96016;
  HEAP32[$cp1_i_i >> 2] = 96016;
  $prev_0_ph_be_i_i = 0;
  label = 95;
  break;
 case 95:
  $372 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($256 | 0) == (HEAP32[89668] | 0)) {
   $prev_0_ph26_i_i = $prev_0_ph_be_i_i;
   $260 = $372;
   label = 65;
   break;
  } else {
   $prev_0_ph25_i_i = $prev_0_ph_be_i_i;
   label = 97;
   break;
  }
 case 96:
  HEAP32[89540] = HEAP32[$cp1_i_i >> 2];
  $prev_0_ph_be_i_i = 1;
  label = 95;
  break;
 case 97:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($prev_0_ph25_i_i | 0) == 0) {
   label = 99;
   break;
  } else {
   label = 98;
   break;
  }
 case 98:
  invoke_v(10);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 99;
  break;
 case 99:
  HEAP32[89540] = 96016;
  HEAP32[5582] = 1;
  $381 = 1;
  label = 101;
  break;
 case 100:
  HEAP32[89540] = $249;
  $381 = (HEAP32[5582] | 0) != 0;
  label = 101;
  break;
 case 101:
  $384 = HEAP32[89668] | 0;
  if ((HEAP32[89622] | 0) != 0 & $381 & ($384 | 0) != 0) {
   label = 102;
   break;
  } else {
   label = 105;
   break;
  }
 case 102:
  $388 = HEAP32[$384 >> 2] | 0;
  $389 = HEAP8[$388] | 0;
  if (($389 << 24 >> 24 | 0) == 10 | ($389 << 24 >> 24 | 0) == 0) {
   label = 105;
   break;
  } else {
   label = 103;
   break;
  }
 case 103:
  HEAP32[23334] = $388 - (HEAP32[$384 + 52 >> 2] | 0);
  label = 109;
  break;
 case 104:
  HEAP32[89540] = HEAP32[$wp_i >> 2];
  if ((HEAP32[5582] | 0) == 0) {
   label = 105;
   break;
  } else {
   label = 109;
   break;
  }
 case 105:
  $400 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($400 << 1) >> 1] & 64) == 0) {
   $line_top_0_i = 0;
   $c_2_i = $400;
   label = 54;
   break;
  } else {
   $406 = $400;
   label = 106;
   break;
  }
 case 106:
  if (($406 | 0) == 31) {
   label = 108;
   break;
  } else {
   label = 107;
   break;
  }
 case 107:
  $410 = HEAP32[89540] | 0;
  HEAP32[89540] = $410 + 1;
  HEAP8[$410] = $406;
  label = 108;
  break;
 case 108:
  $412 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP16[(HEAP32[91636] | 0) + ($412 << 1) >> 1] & 64) == 0) {
   $line_top_0_i = 0;
   $c_2_i = $412;
   label = 54;
   break;
  } else {
   $406 = $412;
   label = 106;
   break;
  }
 case 109:
  invoke_v(10);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 22;
  break;
 case 110:
  if ((HEAP32[89590] | 0) == 0) {
   label = 112;
   break;
  } else {
   label = 111;
   break;
  }
 case 111:
  invoke_vi(4, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 112;
  break;
 case 112:
  invoke_v(24);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $423 = $8;
  label = 113;
  break;
 case 113:
  $424 = HEAP32[89992] | 0;
  if (($424 | 0) == ($423 | 0)) {
   label = 115;
   break;
  } else {
   label = 114;
   break;
  }
 case 114:
  invoke_ii(8, $424 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 115;
  break;
 case 115:
  $428 = HEAP32[89990] | 0;
  if (($428 | 0) == (HEAP32[_stdout >> 2] | 0)) {
   label = 117;
   break;
  } else {
   label = 116;
   break;
  }
 case 116:
  invoke_ii(8, $428 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 117;
  break;
 case 117:
  $433 = HEAP32[89994] | 0;
  if (($433 | 0) == (HEAP32[_stderr >> 2] | 0)) {
   label = 119;
   break;
  } else {
   label = 118;
   break;
  }
 case 118:
  invoke_ii(8, $433 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 119;
  break;
 case 119:
  if ((HEAP32[89594] & 128 | 0) == 0) {
   label = 121;
   break;
  } else {
   label = 120;
   break;
  }
 case 120:
  invoke_v(16);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 121;
  break;
 case 121:
  $443 = HEAP32[90042] | 0;
  if (($443 | 0) > 0 & (HEAP32[89551] | 0) == 0) {
   label = 122;
   break;
  } else {
   $_0 = 0;
   label = 123;
   break;
  }
 case 122:
  invoke_iiii(HEAP32[690] | 0, 1, 21384, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $443, HEAP32[tempVarArgs + 8 >> 2] = ($443 | 0) == 1 ? 368688 : 20720, tempVarArgs) | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  STACKTOP = tempVarArgs;
  $452 = invoke_i(2) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $453 = HEAP32[$452 >> 2] | 0;
  $_0 = ($453 | 0) == 0 ? 1 : $453;
  label = 123;
  break;
 case 123:
  STACKTOP = sp;
  return $_0 | 0;
 case -1:
  if ((setjmpLabel | 0) == 1) {
   $2 = threwValue;
   label = 124;
  }
  __THREW__ = threwValue = 0;
  break;
 }
 return 0;
}
function _do_options($argc, $argv, $in_pp, $out_pp) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 $in_pp = $in_pp | 0;
 $out_pp = $out_pp | 0;
 var $mes_i = 0, $cpu_macro_i = 0, $list_i = 0, $6 = 0, $7 = 0, $10 = 0, $lp_03_i = 0, $sflag_0 = 0, $show_path_0 = 0, $unset_sys_dirs_0 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $55 = 0, $56 = 0, $68 = 0, $72 = 0, $73 = 0, $90 = 0, $94 = 0, $storemerge_i = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $123 = 0, $150 = 0, $151 = 0, $160 = 0, $174 = 0, $isdigittmp61 = 0, $235 = 0, $242 = 0, $249 = 0, $253 = 0, $262 = 0, $269 = 0, $270 = 0, $297 = 0, $isdigittmp63 = 0, $321 = 0, $330 = 0, $341 = 0, $_pr = 0, $345 = 0, $349 = 0, $w_0_ph39_i = 0, $cp_0_ph38_i = 0, $350 = 0, $i_028_i = 0, $cp_027_i = 0, $352 = 0, $cp_1_i = 0, $354 = 0, $357 = 0, $i_122_i = 0, $cp_221_i = 0, $359 = 0, $362 = 0, $363 = 0, $365 = 0, $cp_3_i = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $i_0_lcssa56_i = 0, $w_0_ph3755_i = 0, $376 = 0, $379 = 0, $_0_i67 = 0, $383 = 0, $393 = 0, $396 = 0, $407 = 0, $411 = 0, $416 = 0, $incompat_3_ph_i = 0, $notlhs_i = 0, $incompat_3_mux_i = 0, $incompat_3_mux12_i = 0, $436 = 0, $440 = 0, $incompat_5_i = 0, $459 = 0, $467 = 0, $_pr2_i = 0, $475 = 0, $481 = 0, $485 = 0, $489 = 0, $491 = 0, $493 = 0, $496 = 0, $502 = 0, $506 = 0, $507 = 0, $508 = 0, $511 = 0, $527 = 0, $index_01_i = 0, $531 = 0, $532 = 0, $534 = 0, $macro_02_i = 0, $541 = 0, $542 = 0, $_pre_i54 = 0, $553 = 0, $555 = 0, $563 = 0, $566 = 0, $567 = 0, $569 = 0, $save_012_i_i = 0, $571 = 0, $_pre_i_i = 0, $572 = 0, $574 = 0, $save_1_i_i = 0, $577 = 0, $580 = 0, $583 = 0, $584 = 0, $586 = 0, $save_012_i2_i = 0, $588 = 0, $_pre_i7_i = 0, $589 = 0, $591 = 0, $save_1_i9_i = 0, $594 = 0, $599 = 0, $604 = 0, $609 = 0, $613 = 0, $617 = 0, $624 = 0, $637 = 0, $mpp_02_i = 0, $648 = 0, $incptr_07_i = 0, $651 = 0, $i_06_i = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264 | 0;
 $mes_i = sp | 0;
 $cpu_macro_i = sp + 56 | 0;
 $list_i = sp + 168 | 0;
 HEAP32[91902] = HEAP32[$argv >> 2];
 HEAP8[2712] = 0;
 HEAP8[368640] = 0;
 _getcwd(361368, 4096) | 0;
 _sprintf(361368 + (_strlen(361368) | 0) | 0, 19712, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 47, HEAP32[tempVarArgs + 8 >> 2] = 0, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $6 = sp + 184 | 0;
 $7 = $list_i;
 HEAP32[$7 >> 2] = HEAP32[626];
 HEAP32[$7 + 4 >> 2] = HEAP32[627];
 HEAP32[$7 + 8 >> 2] = HEAP32[628];
 HEAP32[$7 + 12 >> 2] = HEAP32[629];
 _memcpy($6 | 0, 18984, 37) | 0;
 $lp_03_i = $list_i | 0;
 $10 = 19032;
 do {
  $lp_03_i = $lp_03_i + 4 | 0;
  _strcat($6 | 0, $10 | 0) | 0;
  $10 = HEAP32[$lp_03_i >> 2] | 0;
 } while (($10 | 0) != 0);
 if ((_strlen($6 | 0) | 0) >>> 0 > 79 >>> 0) {
  _cfatal(18856, 0, 0, 0);
  $unset_sys_dirs_0 = 0;
  $show_path_0 = 0;
  $sflag_0 = 0;
 } else {
  $unset_sys_dirs_0 = 0;
  $show_path_0 = 0;
  $sflag_0 = 0;
 }
 L6 : while (1) {
  $18 = HEAP32[680] | 0;
  L8 : do {
   if (($18 | 0) < ($argc | 0)) {
    $21 = HEAP32[684] | 0;
    $23 = $argv + ($18 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    do {
     if (($21 | 0) == 1) {
      if ((HEAP8[$24] | 0) != 45) {
       $383 = $18;
       break L8;
      }
      if ((HEAP8[$24 + 1 | 0] | 0) == 0) {
       $383 = $18;
       break L8;
      }
      if ((_strcmp($24 | 0, 9120) | 0) != 0) {
       break;
      }
      $36 = $18 + 1 | 0;
      HEAP32[680] = $36;
      $383 = $36;
      break L8;
     }
    } while (0);
    $38 = HEAP8[$24 + $21 | 0] | 0;
    $39 = $38 & 255;
    if ($38 << 24 >> 24 == 58) {
     label = 13;
     break L6;
    }
    $42 = _strchr($6 | 0, $39 | 0) | 0;
    if (($42 | 0) == 0) {
     label = 13;
     break L6;
    }
    $68 = $21 + 1 | 0;
    if ((HEAP8[$42 + 1 | 0] | 0) == 58) {
     $72 = (HEAP8[$24 + $68 | 0] | 0) == 0;
     $73 = $18 + 1 | 0;
     HEAP32[680] = $73;
     if ($72) {
      if (($73 | 0) >= ($argc | 0)) {
       label = 19;
       break L6;
      }
      $90 = $18 + 2 | 0;
      HEAP32[680] = $90;
      $storemerge_i = HEAP32[$argv + ($73 << 2) >> 2] | 0;
      $94 = $90;
     } else {
      $storemerge_i = (HEAP32[$23 >> 2] | 0) + $68 | 0;
      $94 = $73;
     }
     HEAP32[89592] = $storemerge_i;
     HEAP32[684] = 1;
     $105 = $storemerge_i;
     $104 = $94;
    } else {
     HEAP32[684] = $68;
     if ((HEAP8[(HEAP32[$23 >> 2] | 0) + $68 | 0] | 0) == 0) {
      HEAP32[684] = 1;
      $101 = $18 + 1 | 0;
      HEAP32[680] = $101;
      $103 = $101;
     } else {
      $103 = $18;
     }
     HEAP32[89592] = 0;
     $105 = 0;
     $104 = $103;
    }
    L30 : do {
     switch ($39 | 0) {
     case 118:
      {
       HEAP32[89547] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = 1;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 87:
      {
       $341 = HEAP32[4] | 0;
       if (($341 | 0) == -1) {
        HEAP32[4] = 0;
        $_pr = 0;
       } else {
        $_pr = $341;
       }
       $345 = HEAP8[$105] | 0;
       if ((($345 << 24 >> 24) - 48 | 0) >>> 0 < 10 >>> 0) {
        L38 : do {
         if ($345 << 24 >> 24 == 0) {
          $w_0_ph3755_i = 0;
          $i_0_lcssa56_i = 0;
         } else {
          $cp_0_ph38_i = $105;
          $w_0_ph39_i = 0;
          $349 = $345;
          L39 : while (1) {
           $cp_027_i = $cp_0_ph38_i;
           $i_028_i = 0;
           $350 = $349;
           L41 : while (1) {
            $cp_1_i = $cp_027_i;
            $352 = $350;
            while (1) {
             $354 = $cp_1_i + 1 | 0;
             if ($352 << 24 >> 24 != 32) {
              break;
             }
             $cp_1_i = $354;
             $352 = HEAP8[$354] | 0;
            }
            if ((($352 << 24 >> 24) - 48 | 0) >>> 0 < 10 >>> 0) {
             $cp_221_i = $cp_1_i;
             $i_122_i = $i_028_i;
             $357 = $352;
            } else {
             break L39;
            }
            while (1) {
             $359 = $cp_221_i + 1 | 0;
             $362 = ($357 << 24 >> 24) - 48 + ($i_122_i * 10 | 0) | 0;
             $363 = HEAP8[$359] | 0;
             if ((($363 << 24 >> 24) - 48 | 0) >>> 0 < 10 >>> 0) {
              $cp_221_i = $359;
              $i_122_i = $362;
              $357 = $363;
             } else {
              $cp_3_i = $359;
              $365 = $363;
              break;
             }
            }
            while (1) {
             if (($365 << 24 >> 24 | 0) == 124) {
              break L41;
             } else if (($365 << 24 >> 24 | 0) == 0) {
              $w_0_ph3755_i = $w_0_ph39_i;
              $i_0_lcssa56_i = $362;
              break L38;
             } else if (($365 << 24 >> 24 | 0) != 32) {
              $cp_027_i = $cp_3_i;
              $i_028_i = $362;
              $350 = $365;
              continue L41;
             }
             $367 = $cp_3_i + 1 | 0;
             $cp_3_i = $367;
             $365 = HEAP8[$367] | 0;
            }
           }
           $368 = $362 | $w_0_ph39_i;
           $369 = $cp_3_i + 1 | 0;
           $370 = HEAP8[$369] | 0;
           if ($370 << 24 >> 24 == 0) {
            $w_0_ph3755_i = $368;
            $i_0_lcssa56_i = 0;
            break L38;
           } else {
            $cp_0_ph38_i = $369;
            $w_0_ph39_i = $368;
            $349 = $370;
           }
          }
          if ($352 << 24 >> 24 == 0) {
           $w_0_ph3755_i = $w_0_ph39_i;
           $i_0_lcssa56_i = $i_028_i;
          } else {
           label = 128;
           break L6;
          }
         }
        } while (0);
        $376 = $w_0_ph3755_i | $i_0_lcssa56_i | $_pr;
        HEAP32[4] = $376;
        if ($376 >>> 0 > 31 >>> 0) {
         label = 130;
         break L6;
        } else {
         $379 = $376;
        }
       } else {
        $379 = $_pr;
       }
       if (($379 | 0) != 0) {
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       HEAP32[4] = 255;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 107:
      {
       label = 67;
       break;
      }
     case 109:
      {
       if ((_strcmp($105 | 0, 15632) | 0) == 0) {
        HEAP8[368640] = HEAP8[14896] | 0;
        HEAP8[368641] = HEAP8[14897] | 0;
        HEAP8[368642] = HEAP8[14898] | 0;
        HEAP8[368643] = HEAP8[14899] | 0;
        HEAP8[368644] = HEAP8[14900] | 0;
        HEAP8[368645] = HEAP8[14901] | 0;
        HEAP8[368646] = HEAP8[14902] | 0;
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       if ((_strcmp($105 | 0, 14560) | 0) == 0) {
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       if ((_strcmp($105 | 0, 14440) | 0) == 0) {
        _look_and_install(14320, -772, HEAP32[676] | 0, 14232) | 0;
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       if ((_strcmp($105 | 0, 14064) | 0) != 0) {
        label = 97;
        break L30;
       }
       $297 = HEAP32[22290] | 0;
       HEAP32[22290] = $297 + 1;
       HEAP32[88904 + ($297 << 2) >> 2] = 14320;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 78:
      {
       label = 97;
       break;
      }
     case 77:
      {
       do {
        if ((_strcmp($105 | 0, 19688) | 0) == 0) {
         $262 = $104;
        } else {
         if ((_strcmp($105 | 0, 19368) | 0) == 0) {
          HEAP32[89590] = HEAP32[89590] | 6;
          $262 = $104;
          break;
         }
         if ((_strcmp($105 | 0, 19136) | 0) == 0) {
          HEAP32[89590] = HEAP32[89590] | 4;
          $262 = $104;
          break;
         }
         if ((_strcmp($105 | 0, 18600) | 0) == 0) {
          HEAP32[89590] = HEAP32[89590] | 8;
          $262 = $104;
          break;
         }
         if ((_strcmp($105 | 0, 17848) | 0) == 0) {
          HEAP32[89590] = HEAP32[89590] | 16;
          $235 = $104 + 1 | 0;
          HEAP32[680] = $235;
          HEAP32[89582] = HEAP32[$argv + ($104 << 2) >> 2];
          $262 = $235;
          break;
         }
         if ((_strcmp($105 | 0, 17024) | 0) == 0) {
          $242 = $104 + 1 | 0;
          HEAP32[680] = $242;
          HEAP32[89580] = HEAP32[$argv + ($104 << 2) >> 2];
          $262 = $242;
          break;
         }
         if ((_strcmp($105 | 0, 16344) | 0) == 0) {
          $249 = $104 + 1 | 0;
          HEAP32[680] = $249;
          HEAP32[89584] = HEAP32[$argv + ($104 << 2) >> 2];
          $262 = $249;
          break;
         }
         $253 = $104 - 1 | 0;
         if ((HEAP32[$argv + ($253 << 2) >> 2] | 0) != ($105 | 0)) {
          label = 83;
          break L6;
         }
         HEAP32[89590] = HEAP32[89590] | 2;
         HEAP32[680] = $253;
         $262 = $253;
        }
       } while (0);
       if ((_strcmp($105 | 0, 19368) | 0) == 0) {
        label = 86;
       } else {
        if ((_strcmp($105 | 0, 19136) | 0) == 0) {
         label = 86;
        }
       }
       do {
        if ((label | 0) == 86) {
         label = 0;
         $269 = $argv + ($262 << 2) | 0;
         $270 = HEAP32[$269 >> 2] | 0;
         if (($270 | 0) == 0) {
          break;
         }
         if ((HEAP8[$270] | 0) == 45) {
          break;
         }
         HEAP32[680] = $262 + 1;
         HEAP32[89586] = HEAP32[$269 >> 2];
        }
       } while (0);
       HEAP32[89590] = HEAP32[89590] | 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 122:
      {
       HEAP32[89544] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 43:
      {
       if ((HEAP32[91372] | $sflag_0 | 0) == 0) {
        HEAP32[91372] = 1;
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       } else {
        FUNCTION_TABLE_iii[HEAP32[686] & 15](14808, 1) | 0;
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       break;
      }
     case 50:
      {
       HEAP32[89549] = (HEAP32[89549] | 0) == 0;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 51:
      {
       HEAP32[89548] = (HEAP32[89548] | 0) == 0;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 64:
      {
       $123 = HEAP32[682] | 0;
       L104 : do {
        if ((_strcmp($105 | 0, 13664) | 0) == 0) {
         label = 33;
        } else {
         if ((_strcmp($105 | 0, 12384) | 0) == 0) {
          label = 33;
          break;
         }
         do {
          if ((_strcmp($105 | 0, 11288) | 0) != 0) {
           if ((_strcmp($105 | 0, 9624) | 0) == 0) {
            break;
           }
           if ((_strcmp($105 | 0, 8560) | 0) == 0) {
            HEAP32[682] = 2;
            $151 = 0;
            $150 = 2;
            break L104;
           }
           if ((_strcmp($105 | 0, 7696) | 0) == 0) {
            HEAP32[682] = 3;
            $151 = 1;
            $150 = 3;
            break L104;
           }
           if ((_strcmp($105 | 0, 6968) | 0) != 0) {
            label = 43;
            break L6;
           }
           HEAP8[6432] = 1;
           HEAP32[682] = 3;
           $151 = 1;
           $150 = 3;
           break L104;
          }
         } while (0);
         HEAP32[682] = 1;
         $151 = 0;
         $150 = 1;
        }
       } while (0);
       if ((label | 0) == 33) {
        label = 0;
        HEAP32[682] = 9;
        $151 = 1;
        $150 = 9;
       }
       HEAP32[592] = $151;
       if (($123 | 0) == 3 | ($123 | 0) == ($150 | 0)) {
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 21904, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $105, tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 97:
      {
       HEAP32[89550] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 67:
      {
       HEAP32[89542] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 68:
      {
       $160 = HEAP32[90340] | 0;
       if (($160 | 0) > 255) {
        label = 49;
        break L6;
       }
       HEAP32[90340] = $160 + 1;
       HEAP32[360336 + ($160 << 2) >> 2] = $105;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 101:
      {
       if ((_set_encoding($105, 0, 0) | 0) == 0) {
        label = 52;
        break L6;
       }
       HEAP8[2776] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 70:
      {
       $174 = HEAP32[89564] | 0;
       HEAP32[89564] = $174 + 1;
       HEAP32[359928 + ($174 << 2) >> 2] = $105;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 104:
      {
       if ((HEAP8[$105 + 1 | 0] | 0) != 0) {
        label = 241;
        break L6;
       }
       if (((HEAP8[$105] | 0) - 48 | 0) >>> 0 >= 10 >>> 0) {
        label = 242;
        break L6;
       }
       _look_and_install(20440, -772, HEAP32[676] | 0, $105) | 0;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 73:
      {
       if ((_strcmp($105 | 0, 20016) | 0) == 0) {
        $unset_sys_dirs_0 = 1;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       do {
        if ((HEAP8[$105 + 1 | 0] | 0) == 0) {
         $isdigittmp61 = (HEAP8[$105] | 0) - 48 | 0;
         if ($isdigittmp61 >>> 0 >= 10 >>> 0) {
          break;
         }
         if (!(($isdigittmp61 | 0) != 0 & $isdigittmp61 >>> 0 < 4 >>> 0)) {
          break;
         }
         HEAP32[634] = $isdigittmp61;
         $unset_sys_dirs_0 = $unset_sys_dirs_0;
         $show_path_0 = $show_path_0;
         $sflag_0 = $sflag_0;
         continue L6;
        }
       } while (0);
       _set_a_dir($105);
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 111:
      {
       HEAP32[$out_pp >> 2] = $105;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 80:
      {
       HEAP32[89545] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 81:
      {
       HEAP32[89546] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 83:
      {
       if ((HEAP32[91372] | $sflag_0 | 0) != 0) {
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 12464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 83, HEAP32[tempVarArgs + 8 >> 2] = $105, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $unset_sys_dirs_0 = $unset_sys_dirs_0;
        $show_path_0 = $show_path_0;
        $sflag_0 = $sflag_0;
        continue L6;
       }
       $isdigittmp63 = (HEAP8[$105] | 0) - 48 | 0;
       if ($isdigittmp63 >>> 0 >= 10 >>> 0) {
        label = 246;
        break L6;
       }
       if ((HEAP8[$105 + 1 | 0] | 0) != 0) {
        label = 247;
        break L6;
       }
       HEAP32[23326] = $isdigittmp63;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = 1;
       continue L6;
       break;
      }
     case 106:
      {
       HEAP32[89551] = 1;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 75:
      {
       HEAP32[89594] = HEAP32[89594] | 8;
       label = 67;
       break;
      }
     case 86:
      {
       $330 = _eval_num($105) | 0;
       if ((HEAP32[$330 + 8 >> 2] | 0) == -1) {
        label = 111;
        break L6;
       }
       HEAP32[580] = HEAP32[$330 >> 2];
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     case 85:
      {
       $321 = HEAP32[22290] | 0;
       if (($321 | 0) > 63) {
        label = 108;
        break L6;
       }
       HEAP32[22290] = $321 + 1;
       HEAP32[88904 + ($321 << 2) >> 2] = $105;
       $unset_sys_dirs_0 = $unset_sys_dirs_0;
       $show_path_0 = $show_path_0;
       $sflag_0 = $sflag_0;
       continue L6;
       break;
      }
     default:
      {
       $_0_i67 = $39;
       label = 240;
       break L6;
      }
     }
    } while (0);
    if ((label | 0) == 67) {
     label = 0;
     HEAP32[89543] = 1;
     $unset_sys_dirs_0 = $unset_sys_dirs_0;
     $show_path_0 = $show_path_0;
     $sflag_0 = $sflag_0;
     continue L6;
    } else if ((label | 0) == 97) {
     label = 0;
     HEAP8[2712] = 1;
     $unset_sys_dirs_0 = $unset_sys_dirs_0;
     $show_path_0 = $show_path_0;
     $sflag_0 = $sflag_0;
     continue L6;
    }
   } else {
    $383 = $18;
   }
  } while (0);
  if (($383 | 0) >= ($argc | 0)) {
   break;
  }
  if ((HEAP32[$in_pp >> 2] | 0) == 0) {
   HEAP32[680] = $383 + 1;
   HEAP32[$in_pp >> 2] = HEAP32[$argv + ($383 << 2) >> 2];
   $393 = HEAP32[680] | 0;
  } else {
   $393 = $383;
  }
  do {
   if (($393 | 0) < ($argc | 0)) {
    $396 = $argv + ($393 << 2) | 0;
    if ((HEAP8[HEAP32[$396 >> 2] | 0] | 0) == 45) {
     $407 = $393;
     break;
    }
    if ((HEAP32[$out_pp >> 2] | 0) != 0) {
     $407 = $393;
     break;
    }
    HEAP32[680] = $393 + 1;
    HEAP32[$out_pp >> 2] = HEAP32[$396 >> 2];
    $407 = HEAP32[680] | 0;
   } else {
    $407 = $393;
   }
  } while (0);
  if (($407 | 0) >= ($argc | 0)) {
   break;
  }
  $411 = HEAP32[$argv + ($407 << 2) >> 2] | 0;
  if ((HEAP8[$411] | 0) != 45) {
   label = 144;
   break;
  }
  if (($411 | 0) == 0) {
   break;
  } else {
   $unset_sys_dirs_0 = $unset_sys_dirs_0;
   $show_path_0 = $show_path_0;
   $sflag_0 = $sflag_0;
  }
 }
 if ((label | 0) == 13) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](HEAP32[$argv >> 2] | 0, 1) | 0;
  FUNCTION_TABLE_iii[HEAP32[686] & 15](9248, 1) | 0;
  FUNCTION_TABLE_iii[HEAP32[688] & 15]($39, 1) | 0;
  FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 1) | 0;
  $55 = (HEAP32[684] | 0) + 1 | 0;
  HEAP32[684] = $55;
  $56 = HEAP32[680] | 0;
  if ((HEAP8[(HEAP32[$argv + ($56 << 2) >> 2] | 0) + $55 | 0] | 0) != 0) {
   $_0_i67 = 63;
   _usage($_0_i67);
  }
  HEAP32[680] = $56 + 1;
  HEAP32[684] = 1;
  $_0_i67 = 63;
  _usage($_0_i67);
 } else if ((label | 0) == 83) {
  _usage(77);
 } else if ((label | 0) == 111) {
  _usage(86);
 } else if ((label | 0) == 19) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](HEAP32[$argv >> 2] | 0, 1) | 0;
  FUNCTION_TABLE_iii[HEAP32[686] & 15](9360, 1) | 0;
  FUNCTION_TABLE_iii[HEAP32[688] & 15]($39, 1) | 0;
  FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 1) | 0;
  HEAP32[684] = 1;
  $_0_i67 = 63;
  _usage($_0_i67);
 } else if ((label | 0) == 43) {
  _usage(64);
 } else if ((label | 0) == 49) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](20968, 1) | 0;
  _longjmp(360176, -1 | 0);
 } else if ((label | 0) == 52) {
  _usage(101);
 } else if ((label | 0) == 128) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 19056, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $105, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _usage(87);
 } else if ((label | 0) == 240) {
  _usage($_0_i67);
 } else if ((label | 0) == 241) {
  _usage(104);
 } else if ((label | 0) == 242) {
  _usage(104);
 } else if ((label | 0) == 246) {
  _usage(83);
 } else if ((label | 0) == 247) {
  _usage(83);
 } else if ((label | 0) == 144) {
  _cfatal(19768, $411, 0, 0);
 } else if ((label | 0) == 130) {
  _usage(87);
 } else if ((label | 0) == 108) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](13976, 1) | 0;
  _longjmp(360176, -1 | 0);
 }
 $416 = HEAP32[682] | 0;
 do {
  if (($416 | 0) == 2 | ($416 | 0) == 1) {
   $incompat_3_ph_i = (HEAP32[89549] | 0) != 0 ? 1 : ((HEAP32[91372] | $sflag_0 | 0) != 0 | (HEAP32[580] | 0) != -1) & 1;
   label = 152;
  } else if (($416 | 0) == 3 | ($416 | 0) == 9) {
   if ((HEAP32[23326] | 0) == 0) {
    HEAP32[23326] = 1;
   }
   if (($416 | 0) != 9) {
    label = 153;
    break;
   }
   $incompat_3_ph_i = ((HEAP32[89550] | 0) != 0 | HEAP8[6432] | (HEAP32[89543] | 0) != 0) & 1;
   label = 152;
  } else {
   label = 153;
  }
 } while (0);
 do {
  if ((label | 0) == 152) {
   $incompat_3_mux12_i = (HEAP32[89548] | 0) == 0 ? $incompat_3_ph_i : 1;
   label = 155;
  } else if ((label | 0) == 153) {
   $notlhs_i = ($416 | 0) == 3;
   $incompat_3_mux_i = ((HEAP32[89548] | 0) == 0 | $notlhs_i) & 1 ^ 1;
   if (!$notlhs_i) {
    $incompat_3_mux12_i = $incompat_3_mux_i;
    label = 155;
    break;
   }
   $incompat_5_i = $incompat_3_mux_i;
   $440 = HEAP32[89594] | 0;
  }
 } while (0);
 if ((label | 0) == 155) {
  $436 = HEAP32[89594] | 0;
  $incompat_5_i = ($436 & 8 | 0) == 0 ? $incompat_3_mux12_i : 1;
  $440 = $436;
 }
 do {
  if (($440 & 8 | 0) != 0) {
   if ((HEAP32[89542] | HEAP32[89550] | 0) == 0) {
    break;
   }
   FUNCTION_TABLE_iii[HEAP32[686] & 15](19144, 1) | 0;
   HEAP32[89594] = HEAP32[89594] & -9;
  }
 } while (0);
 if (($incompat_5_i | 0) != 0) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](19096, 1) | 0;
  _usage(63);
 }
 $459 = HEAP32[682] | 0;
 HEAP32[592] = (($459 | 0) == 3 | ($459 | 0) == 9) & 1;
 if (($459 | 0) == 9 | ($459 | 0) == 3) {
  $467 = $459;
 } else {
  HEAP16[(HEAP32[91636] | 0) + 50 >> 1] = 0;
  $467 = HEAP32[682] | 0;
 }
 do {
  if (($467 | 0) != 3) {
   HEAP16[(HEAP32[91636] | 0) + 52 >> 1] = 0;
   $_pr2_i = HEAP32[682] | 0;
   if (($_pr2_i | 0) == 9 | ($_pr2_i | 0) == 2) {
    HEAP16[(HEAP32[91636] | 0) + 62 >> 1] = 0;
    $475 = HEAP32[682] | 0;
   } else {
    $475 = $_pr2_i;
   }
   if (($475 | 0) == 3) {
    break;
   }
   HEAP16[(HEAP32[91636] | 0) + 48 >> 1] = 0;
  }
 } while (0);
 _expand_init(HEAP8[6432] & 1, 0);
 $481 = HEAP32[4] | 0;
 if (($481 | 0) == (-1 | 0)) {
  HEAP32[4] = 1;
 } else if (($481 | 0) == 255) {
  HEAP32[4] = 0;
 }
 $485 = HEAP32[89674] | 0;
 do {
  if (($485 | 0) == 0) {
   HEAP32[89608] = 32;
   $489 = _xmalloc(128) | 0;
   HEAP32[89674] = $489;
   HEAP32[89672] = $489;
   $511 = $489;
  } else {
   $491 = HEAP32[89672] | 0;
   $493 = $485;
   $496 = HEAP32[89608] | 0;
   if (($491 - $493 >> 2 | 0) < ($496 | 0)) {
    $511 = $491;
    break;
   }
   $502 = (HEAP32[22296] | 0) - $493 >> 2;
   $506 = _xrealloc($485, $496 << 3) | 0;
   HEAP32[89674] = $506;
   $507 = HEAP32[89608] | 0;
   $508 = $506 + ($507 << 2) | 0;
   HEAP32[89672] = $508;
   HEAP32[22296] = $506 + ($502 << 2);
   HEAP32[89608] = $507 << 1;
   $511 = $508;
  }
 } while (0);
 HEAP32[22296] = $511;
 if ((HEAP8[368640] | 0) == 0) {
  HEAP8[368640] = HEAP8[15104] | 0;
  HEAP8[368641] = HEAP8[15105] | 0;
  HEAP8[368642] = HEAP8[15106] | 0;
  HEAP8[368643] = HEAP8[15107] | 0;
  HEAP8[368644] = HEAP8[15108] | 0;
 }
 _memcpy($cpu_macro_i | 0, 2784, 112) | 0;
 do {
  if ((_strcmp(368640, 15104) | 0) == 0) {
   $index_01_i = 0;
   label = 182;
  } else {
   if ((_strcmp(368640, 14896) | 0) == 0) {
    $index_01_i = 1;
    label = 182;
    break;
   }
   if ((_strcmp(368640, 14784) | 0) == 0) {
    $index_01_i = 2;
    label = 182;
    break;
   }
   $527 = (_strcmp(368640, 14656) | 0) == 0;
   if ($527) {
    $index_01_i = $527 ? 3 : 9;
    label = 182;
    break;
   }
   _look_and_install(19328, -772, HEAP32[676] | 0, 14232) | 0;
  }
 } while (0);
 do {
  if ((label | 0) == 182) {
   $531 = $cpu_macro_i + ($index_01_i * 28 | 0) | 0;
   $532 = HEAP32[$531 >> 2] | 0;
   if (($532 | 0) == 0) {
    break;
   } else {
    $macro_02_i = $531;
    $534 = $532;
   }
   do {
    $macro_02_i = $macro_02_i + 4 | 0;
    _look_and_install($534, -772, HEAP32[676] | 0, 14232) | 0;
    $534 = HEAP32[$macro_02_i >> 2] | 0;
   } while (($534 | 0) != 0);
  }
 } while (0);
 HEAP32[22298] = HEAP32[89564];
 $541 = _norm_path(21416, 0, 0) | 0;
 $542 = ($541 | 0) == 0;
 do {
  if ($542 & (HEAP32[89547] | 0) != 0) {
   if ((HEAP32[89594] & 8 | 0) != 0) {
    break;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 21224, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 21416, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
 } while (0);
 $_pre_i54 = HEAP32[89564] | 0;
 if ($542) {
  $555 = $_pre_i54;
 } else {
  $553 = $_pre_i54 + 1 | 0;
  HEAP32[89564] = $553;
  HEAP32[359928 + ($_pre_i54 << 2) >> 2] = $541;
  $555 = $553;
 }
 if (($555 | 0) > 7) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](21304, 1) | 0;
  _longjmp(360176, -1 | 0);
 }
 do {
  if ((HEAP32[91372] | 0) != 0) {
   $563 = _getenv(19840) | 0;
   if (($563 | 0) == 0) {
    break;
   }
   $566 = _save_string($563) | 0;
   $567 = HEAP8[$566] | 0;
   L258 : do {
    if ($567 << 24 >> 24 != 0) {
     $save_012_i_i = $566;
     $569 = $567;
     L259 : while (1) {
      do {
       if (($569 << 24 >> 24 | 0) == 58 | ($569 << 24 >> 24 | 0) == 0) {
        $save_1_i_i = $save_012_i_i;
       } else {
        $571 = $save_012_i_i + 1 | 0;
        while (1) {
         $_pre_i_i = HEAP8[$571] | 0;
         $572 = $_pre_i_i << 24 >> 24 == 0;
         $574 = $571 + 1 | 0;
         if ($_pre_i_i << 24 >> 24 != 58 & ($572 ^ 1)) {
          $571 = $574;
         } else {
          break;
         }
        }
        if (($571 | 0) == ($save_012_i_i | 0)) {
         $save_1_i_i = $save_012_i_i;
         break;
        }
        HEAP8[$571] = 0;
        _set_a_dir($save_012_i_i);
        if ($572) {
         break L258;
        } else {
         $save_1_i_i = $574;
        }
       }
      } while (0);
      while (1) {
       $577 = HEAP8[$save_1_i_i] | 0;
       if (($577 << 24 >> 24 | 0) == 0) {
        break L258;
       } else if (($577 << 24 >> 24 | 0) != 58) {
        $save_012_i_i = $save_1_i_i;
        $569 = $577;
        continue L259;
       }
       $save_1_i_i = $save_1_i_i + 1 | 0;
      }
     }
    }
   } while (0);
   _free($566);
  }
 } while (0);
 $580 = _getenv(19832) | 0;
 if (($580 | 0) != 0) {
  $583 = _save_string($580) | 0;
  $584 = HEAP8[$583] | 0;
  L274 : do {
   if ($584 << 24 >> 24 != 0) {
    $save_012_i2_i = $583;
    $586 = $584;
    L275 : while (1) {
     do {
      if (($586 << 24 >> 24 | 0) == 58 | ($586 << 24 >> 24 | 0) == 0) {
       $save_1_i9_i = $save_012_i2_i;
      } else {
       $588 = $save_012_i2_i + 1 | 0;
       while (1) {
        $_pre_i7_i = HEAP8[$588] | 0;
        $589 = $_pre_i7_i << 24 >> 24 == 0;
        $591 = $588 + 1 | 0;
        if ($_pre_i7_i << 24 >> 24 != 58 & ($589 ^ 1)) {
         $588 = $591;
        } else {
         break;
        }
       }
       if (($588 | 0) == ($save_012_i2_i | 0)) {
        $save_1_i9_i = $save_012_i2_i;
        break;
       }
       HEAP8[$588] = 0;
       _set_a_dir($save_012_i2_i);
       if ($589) {
        break L274;
       } else {
        $save_1_i9_i = $591;
       }
      }
     } while (0);
     while (1) {
      $594 = HEAP8[$save_1_i9_i] | 0;
      if (($594 << 24 >> 24 | 0) == 0) {
       break L274;
      } else if (($594 << 24 >> 24 | 0) != 58) {
       $save_012_i2_i = $save_1_i9_i;
       $586 = $594;
       continue L275;
      }
      $save_1_i9_i = $save_1_i9_i + 1 | 0;
     }
    }
   }
  } while (0);
  _free($583);
 }
 if (($unset_sys_dirs_0 | 0) == 0) {
  _set_a_dir(19904);
  _set_a_dir(19888);
 }
 $599 = HEAP32[89584] | 0;
 do {
  if (($599 | 0) == 0) {
   $604 = HEAP32[89586] | 0;
   if (($604 | 0) == 0) {
    break;
   }
   HEAP32[89588] = _fopen($604 | 0, 13848) | 0;
  } else {
   HEAP32[89588] = _fopen($599 | 0, 13848) | 0;
  }
 } while (0);
 $609 = HEAP32[89582] | 0;
 do {
  if (($609 | 0) == 0) {
   $613 = HEAP32[89580] | 0;
   if (($613 | 0) == 0) {
    break;
   }
   HEAP32[89578] = $613;
  } else {
   HEAP32[89578] = $609;
  }
 } while (0);
 $617 = HEAP32[$in_pp >> 2] | 0;
 do {
  if (($617 | 0) != 0) {
   if ((_strcmp($617 | 0, 20016) | 0) == 0) {
    break;
   }
   $624 = _norm_path(HEAP32[676] | 0, $617, 0) | 0;
   if (($624 | 0) == 0) {
    break;
   }
   HEAP32[$in_pp >> 2] = $624;
  }
 } while (0);
 if ((HEAP32[89594] & 8 | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[89547] | 0) != 0) {
  _memcpy($mes_i | 0, 24, 56) | 0;
  $mpp_02_i = $mes_i | 0;
  $637 = 15352;
  do {
   $mpp_02_i = $mpp_02_i + 4 | 0;
   FUNCTION_TABLE_iii[HEAP32[686] & 15]($637, 1) | 0;
   $637 = HEAP32[$mpp_02_i >> 2] | 0;
  } while (($637 | 0) != 0);
 }
 if (($show_path_0 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[89996] = HEAP32[_stderr >> 2];
 FUNCTION_TABLE_iii[HEAP32[686] & 15](8888, 2) | 0;
 $648 = HEAP32[89674] | 0;
 if ($648 >>> 0 < (HEAP32[89672] | 0) >>> 0) {
  $incptr_07_i = $648;
  do {
   $651 = HEAP32[$incptr_07_i >> 2] | 0;
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 8728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAP8[$651] | 0) == 0 ? 9032 : $651, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $incptr_07_i = $incptr_07_i + 4 | 0;
  } while ($incptr_07_i >>> 0 < (HEAP32[89672] | 0) >>> 0);
 }
 FUNCTION_TABLE_iii[HEAP32[686] & 15](8624, 2) | 0;
 FUNCTION_TABLE_iii[HEAP32[686] & 15](8520, 2) | 0;
 if ((HEAP32[89564] | 0) > 0) {
  $i_06_i = 0;
  do {
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 8728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[359928 + ($i_06_i << 2) >> 2], tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $i_06_i = $i_06_i + 1 | 0;
  } while (($i_06_i | 0) < (HEAP32[89564] | 0));
 }
 FUNCTION_TABLE_iii[HEAP32[686] & 15](8448, 2) | 0;
 HEAP32[89996] = HEAP32[_stdout >> 2];
 STACKTOP = sp;
 return;
}
function _directive() {
 var $9 = 0, $12 = 0, $13 = 0, $51 = 0, $58 = 0, $hash_0 = 0, $tp_0_ph = 0, $81 = 0, $hash_1 = 0, $tp_1 = 0, $83 = 0, $97 = 0, $107 = 0, $113 = 0, $126 = 0, $129 = 0, $139 = 0, $145 = 0, $154 = 0, $155 = 0, $163 = 0, $171 = 0, $hash_2 = 0, $172 = 0, $182 = 0, $_pr_i_i = 0, $192 = 0, $197$0 = 0, $199 = 0, $209 = 0, $211 = 0, $hash_012_i_i_i = 0, $np_011_i_i_i = 0, $213 = 0, $214 = 0, $215 = 0, $hash_0_lcssa_i_i_i = 0, $np_0_lcssa_i_i_i = 0, $218 = 0, $220 = 0, $cmp_0_load4_i_i = 0, $prevp_0_i_i_i = 0, $224 = 0, $228 = 0, $_lcssa_i = 0, $cmp_0_load5_i_i = 0, $233 = 0, $240 = 0, $241 = 0, $242 = 0, $_05_i = 0, $found_0_i = 0, $256 = 0, $_0_i = 0, $283 = 0, $289 = 0, $304 = 0, $305 = 0, $306 = 0, $315 = 0, $316 = 0, $338 = 0, $_pr_i = 0, $351 = 0, $354 = 0, $369 = 0, $371 = 0, $380 = 0, $388 = 0, $_pr_i31 = 0, $401 = 0, $405 = 0, $413 = 0, $415 = 0, $hash_012_i_i_i34 = 0, $np_011_i_i_i35 = 0, $417 = 0, $418 = 0, $419 = 0, $hash_0_lcssa_i_i_i37 = 0, $np_0_lcssa_i_i_i38 = 0, $422 = 0, $424 = 0, $cmp_0_load4_i_i40 = 0, $prevp_0_i_i_i41 = 0, $428 = 0, $432 = 0, $_lcssa_i42 = 0, $cmp_0_load5_i_i43 = 0, $436 = 0, $437 = 0, $_sink_i = 0, $__i_i45 = 0, $451 = 0, $456 = 0, $462 = 0, $469 = 0, $476 = 0, $478 = 0, $479 = 0, $491 = 0, $495 = 0, $500 = 0, $504 = 0, $505$1 = 0, $506 = 0, $507$0 = 0, $507$1 = 0, $$etemp$3$1 = 0, $$etemp$5$1 = 0, $_pr_i52 = 0, $521 = 0, $523 = 0, $524 = 0, $532 = 0, $544 = 0, $557 = 0, $568 = 0, $570 = 0, $574 = 0, $_0_i53 = 0, $585 = 0, $590 = 0, $603 = 0, $hash_3 = 0, $637 = 0, $644 = 0, $648 = 0, $_off_i$0 = 0, $_off_i$1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[89688] = 1;
 if ((HEAP32[89624] | 0) != 0) {
  FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
  HEAP32[89568] = (HEAP32[89568] | 0) - 1;
 }
 $9 = _skip_ws() | 0;
 L4 : do {
  if (($9 | 0) != 10) {
   HEAP32[5584] = 22344;
   $12 = HEAP32[2] | 0;
   $13 = _scan_token($9, 22336, $12) | 0;
   do {
    if ((HEAP32[89692] | 0) == 0) {
     label = 8;
    } else {
     if (($13 | 0) != 65) {
      break;
     }
     if ((_strcmp(358776, 12720) | 0) == 0) {
      label = 18;
      break;
     }
     if ((_strcmp(358776, 11720) | 0) == 0) {
      label = 8;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     if (($13 | 0) == 65) {
      label = 18;
      break;
     }
     if ((HEAP32[682] | 0) == 1 & ($13 | 0) == 66) {
      HEAP8[358776] = HEAP8[10064] | 0;
      HEAP8[358777] = HEAP8[10065] | 0;
      HEAP8[358778] = HEAP8[10066] | 0;
      HEAP8[358779] = HEAP8[10067] | 0;
      HEAP8[358780] = HEAP8[10068] | 0;
      label = 18;
      break;
     }
     if ((HEAP32[730] | 0) == 0) {
      if ((HEAP32[4] & 8 | 0) == 0) {
       break;
      }
      _cwarn(15432, 22344, 0, 13928);
      break;
     }
     if ((HEAP32[89550] | 0) == 0) {
      _cerror(15432, 22344, 0, 0);
      break;
     }
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     _cwarn(15432, 22344, 0, 0);
    }
   } while (0);
   L24 : do {
    if ((label | 0) == 18) {
     $51 = HEAP8[358776] | 0;
     if ((HEAP8[358777] | 0) == 0) {
      $58 = $51;
     } else {
      $58 = HEAP8[358778] << 1 ^ $51;
     }
     if ((_strlen(358776) | 0) >>> 0 > 7 >>> 0) {
      $hash_0 = HEAP8[358783] << 1 ^ $58;
     } else {
      $hash_0 = $58;
     }
     switch ($hash_0 | 0) {
     case 161:
      {
       $tp_0_ph = 7928;
       label = 35;
       break;
      }
     case 181:
      {
       $tp_0_ph = 7096;
       label = 35;
       break;
      }
     case 183:
      {
       $tp_0_ph = 22136;
       label = 35;
       break;
      }
     case 131:
      {
       $tp_0_ph = 21104;
       label = 35;
       break;
      }
     case 173:
      {
       $tp_0_ph = 20592;
       label = 35;
       break;
      }
     case 168:
      {
       $tp_0_ph = 20120;
       label = 35;
       break;
      }
     case 189:
      {
       $tp_0_ph = 19752;
       label = 35;
       break;
      }
     case 176:
      {
       $tp_0_ph = 10064;
       label = 35;
       break;
      }
     case 175:
      {
       $tp_0_ph = 19384;
       label = 35;
       break;
      }
     case 137:
      {
       $tp_0_ph = 19272;
       label = 35;
       break;
      }
     case 129:
      {
       $tp_0_ph = 18680;
       label = 35;
       break;
      }
     case 178:
      {
       $tp_0_ph = 17936;
       label = 35;
       break;
      }
     case 105:
      {
       $tp_0_ph = 8752;
       label = 35;
       break;
      }
     default:
      {
       $tp_1 = 0;
       $hash_1 = $hash_0;
      }
     }
     if ((label | 0) == 35) {
      $81 = (_strcmp(358776, $tp_0_ph | 0) | 0) == 0;
      $tp_1 = $81 ? $tp_0_ph : 0;
      $hash_1 = $81 ? $hash_0 : 0;
     }
     $83 = HEAP32[730] | 0;
     L48 : do {
      if (($83 | 0) == 0) {
       switch ($hash_1 | 0) {
       case 183:
        {
         if ((HEAP32[592] | 0) != 0) {
          HEAP32[89616] = 0;
          $154 = HEAP32[89668] | 0;
          label = 60;
          break L48;
         }
         if ((HEAP32[4] & 8 | 0) == 0) {
          break L24;
         }
         _do_old();
         break L24;
         break;
        }
       case 105:
       case 161:
       case 181:
        {
         $97 = (HEAP32[1502] | 0) + 12 | 0;
         HEAP32[1502] = $97;
         if ($97 >>> 0 > 5992 >>> 0) {
          label = 227;
          break L48;
         }
         do {
          if ((HEAP32[592] | 0) == 0) {
           $113 = $97;
          } else {
           if ((HEAP32[4] & 8 | 0) == 0) {
            $113 = $97;
            break;
           }
           $107 = HEAP32[588] | 0;
           if ((2920 + (($107 + 1 | 0) * 12 | 0) | 0) != ($97 | 0)) {
            $113 = $97;
            break;
           }
           _cwarn(19544, 0, $107, 13928);
           $113 = HEAP32[1502] | 0;
          }
         } while (0);
         HEAP32[$113 >> 2] = 0;
         HEAP32[(HEAP32[1502] | 0) + 4 >> 2] = HEAP32[23332];
         break L24;
         break;
        }
       case 131:
       case 173:
        {
         label = 51;
         break L48;
         break;
        }
       default:
        {
         if (($tp_1 | 0) != 0) {
          break L24;
         }
         if ((HEAP32[4] & 8 | 0) == 0) {
          break L24;
         }
         _do_old();
         break L24;
        }
       }
      } else {
       label = 51;
      }
     } while (0);
     L66 : do {
      if ((label | 0) == 51) {
       HEAP32[89616] = 0;
       $126 = HEAP32[89668] | 0;
       switch ($hash_1 | 0) {
       case 105:
       case 161:
       case 181:
        {
         $129 = (HEAP32[1502] | 0) + 12 | 0;
         HEAP32[1502] = $129;
         if ($129 >>> 0 > 5992 >>> 0) {
          label = 227;
          break L66;
         }
         do {
          if ((HEAP32[592] | 0) == 0) {
           $145 = $129;
          } else {
           if ((HEAP32[4] & 4 | 0) == 0) {
            $145 = $129;
            break;
           }
           $139 = HEAP32[588] | 0;
           if ((2920 + (($139 + 1 | 0) * 12 | 0) | 0) != ($129 | 0)) {
            $145 = $129;
            break;
           }
           _cwarn(19544, 0, $139, 0);
           $145 = HEAP32[1502] | 0;
          }
         } while (0);
         HEAP32[$145 >> 2] = 1;
         HEAP32[(HEAP32[1502] | 0) + 4 >> 2] = HEAP32[23332];
         $hash_2 = $hash_1;
         $171 = $126;
         label = 65;
         break L66;
         break;
        }
       case 183:
        {
         if ((HEAP32[592] | 0) != 0) {
          $154 = $126;
          label = 60;
          break L66;
         }
         _do_old();
         $hash_3 = $hash_1;
         $603 = $126;
         label = 211;
         break L66;
         break;
        }
       case 131:
        {
         $289 = HEAP32[1502] | 0;
         if (($289 | 0) == 2920) {
          label = 224;
          break L66;
         }
         do {
          if (($289 | 0) == (HEAP32[$126 + 20 >> 2] | 0)) {
           if ((HEAP32[592] | 0) != 0) {
            label = 223;
            break L66;
           }
           if ((HEAP32[4] & 1 | 0) == 0) {
            $304 = $289;
            break;
           }
           _cwarn(20848, 0, 0, 0);
           $304 = HEAP32[1502] | 0;
          } else {
           $304 = $289;
          }
         } while (0);
         $305 = $304 | 0;
         $306 = HEAP32[$305 >> 2] | 0;
         if (($306 & 2 | 0) != 0) {
          $637 = $304;
          label = 225;
          break L66;
         }
         HEAP32[$305 >> 2] = $306 | 2;
         HEAP32[(HEAP32[1502] | 0) + 8 >> 2] = HEAP32[23332];
         $315 = HEAP32[1502] | 0;
         $316 = HEAP32[$315 >> 2] | 0;
         L86 : do {
          if (($316 & 1 | 0) != 0) {
           do {
            if ((HEAP32[730] | 0) == 0) {
             if (($316 & 4 | 0) != 0) {
              break;
             }
             HEAP32[730] = 1;
             break L86;
            }
           } while (0);
           HEAP32[730] = 0;
          }
         } while (0);
         if ((HEAP32[89594] & 8 | 0) == 0) {
          break L66;
         }
         if ((HEAP32[$315 >> 2] & 1 | 0) == 0) {
          break L66;
         }
         $338 = HEAP32[89568] | 0;
         do {
          if ((HEAP32[5582] | 0) != 0 | ($338 | 0) > 10) {
           _sharp(0, 0);
          } else {
           HEAP32[89568] = $338 - 1;
           if (($338 | 0) <= 0) {
            break;
           }
           do {
            FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
            $_pr_i = HEAP32[89568] | 0;
            HEAP32[89568] = $_pr_i - 1;
           } while (($_pr_i | 0) > 0);
          }
         } while (0);
         HEAP32[89568] = -1;
         $351 = (HEAP32[730] | 0) != 0 ? 84 : 70;
         FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 14904, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23332], HEAP32[tempVarArgs + 8 >> 2] = $351, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         break L66;
         break;
        }
       case 173:
        {
         $354 = HEAP32[1502] | 0;
         if (($354 | 0) == 2920) {
          label = 224;
          break L66;
         }
         do {
          if ($354 >>> 0 > (HEAP32[$126 + 20 >> 2] | 0) >>> 0) {
           $369 = $83;
          } else {
           if ((HEAP32[592] | 0) != 0) {
            label = 223;
            break L66;
           }
           if ((HEAP32[4] & 1 | 0) == 0) {
            $369 = $83;
            break;
           }
           _cwarn(20848, 0, 0, 0);
           $369 = HEAP32[730] | 0;
          }
         } while (0);
         $371 = HEAP32[1502] | 0;
         do {
          if (($369 | 0) == 0) {
           if ((HEAP32[$371 >> 2] & 1 | 0) == 0) {
            break;
           }
           HEAP32[5582] = 1;
          }
         } while (0);
         $380 = HEAP32[$371 >> 2] & 1;
         HEAP32[730] = $380;
         if ((HEAP32[89594] & 8 | 0) != 0 & ($380 | 0) != 0) {
          $388 = HEAP32[89568] | 0;
          do {
           if ((HEAP32[5582] | 0) != 0 | ($388 | 0) > 10) {
            _sharp(0, 0);
           } else {
            HEAP32[89568] = $388 - 1;
            if (($388 | 0) <= 0) {
             break;
            }
            do {
             FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
             $_pr_i31 = HEAP32[89568] | 0;
             HEAP32[89568] = $_pr_i31 - 1;
            } while (($_pr_i31 | 0) > 0);
           }
          } while (0);
          HEAP32[89568] = -1;
          FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 14792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23332], tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
          $401 = HEAP32[1502] | 0;
         } else {
          $401 = $371;
         }
         HEAP32[1502] = $401 - 12;
         break L66;
         break;
        }
       case 168:
        {
         _do_define(0, 0) | 0;
         break L24;
         break;
        }
       case 189:
        {
         $405 = _skip_ws() | 0;
         if (($405 | 0) == 10) {
          _cerror(9072, 0, 0, 0);
          _unget_ch();
          break L66;
         }
         HEAP32[5584] = 22344;
         if ((_scan_token($405, 22336, $12) | 0) != 65) {
          _cerror(9200, 22344, 0, 0);
          _skip_nl();
          _unget_ch();
          break L66;
         }
         $413 = HEAP8[358776] | 0;
         if ($413 << 24 >> 24 == 0) {
          $np_0_lcssa_i_i_i38 = 358776;
          $hash_0_lcssa_i_i_i37 = 0;
         } else {
          $np_011_i_i_i35 = 358776;
          $hash_012_i_i_i34 = 0;
          $415 = $413;
          while (1) {
           $417 = $np_011_i_i_i35 + 1 | 0;
           $418 = ($415 << 24 >> 24) + $hash_012_i_i_i34 | 0;
           $419 = HEAP8[$417] | 0;
           if ($419 << 24 >> 24 == 0) {
            $np_0_lcssa_i_i_i38 = $417;
            $hash_0_lcssa_i_i_i37 = $418;
            break;
           } else {
            $np_011_i_i_i35 = $417;
            $hash_012_i_i_i34 = $418;
            $415 = $419;
           }
          }
         }
         $422 = $np_0_lcssa_i_i_i38 - 358776 | 0;
         $424 = $422 + 1 | 0;
         $prevp_0_i_i_i41 = 89200 + (($422 + $hash_0_lcssa_i_i_i37 & 1023) << 2) | 0;
         $cmp_0_load4_i_i40 = -1;
         while (1) {
          $428 = HEAP32[$prevp_0_i_i_i41 >> 2] | 0;
          if (($428 | 0) == 0) {
           $cmp_0_load5_i_i43 = $cmp_0_load4_i_i40;
           $_lcssa_i42 = 0;
           break;
          }
          $432 = _memcmp($428 + 25 | 0, 358776, $424 | 0) | 0;
          if (($432 | 0) > -1) {
           $cmp_0_load5_i_i43 = $432;
           $_lcssa_i42 = $428;
           break;
          } else {
           $prevp_0_i_i_i41 = $428 | 0;
           $cmp_0_load4_i_i40 = $432;
          }
         }
         $436 = (HEAP32[592] | 0) == 0;
         $437 = ($cmp_0_load5_i_i43 | 0) == 0;
         do {
          if ($436) {
           $_sink_i = $437;
           label = 144;
          } else {
           if (!$437) {
            break;
           }
           $_sink_i = (HEAP8[$_lcssa_i42 + 24 | 0] | 0) == 0;
           label = 144;
          }
         } while (0);
         do {
          if ((label | 0) == 144) {
           $__i_i45 = $_sink_i ? $_lcssa_i42 : 0;
           if (($__i_i45 | 0) == 0) {
            break;
           }
           if ($436) {
            _undefine(358776) | 0;
            break L66;
           }
           $451 = HEAP16[$__i_i45 + 4 >> 1] | 0;
           if ($451 << 16 >> 16 < -772 | $451 << 16 >> 16 == -769) {
            _cerror(11528, 358776, 0, 0);
            break L66;
           }
           $456 = _skip_ws() | 0;
           _unget_ch();
           if (($456 | 0) != 10) {
            break L66;
           }
           _undefine(358776) | 0;
           break L66;
          }
         } while (0);
         if ((HEAP32[4] & 8 | 0) == 0) {
          break L66;
         }
         _cwarn(11728, 358776, 0, 0);
         break L66;
         break;
        }
       case 176:
        {
         $462 = _skip_ws() | 0;
         L153 : do {
          if (($462 | 0) == 10) {
           _cerror(8432, 0, 0, 0);
           _unget_ch();
          } else {
           do {
            if ((HEAP32[592] | 0) == 0) {
             HEAP32[5584] = 22344;
             if ((_scan_token($462, 22336, $12) | 0) != 66) {
              label = 196;
             }
            } else {
             $469 = _get_unexpandable($462, 0) | 0;
             if ((HEAP32[89616] | 0) == -1) {
              break L153;
             }
             if (($469 | 0) == 66) {
              break;
             } else if (($469 | 0) != 0) {
              label = 196;
              break;
             }
             _cerror(8672, 0, 0, 0);
             break L153;
            }
           } while (0);
           if ((label | 0) == 196) {
            _cerror(8600, 22344, 0, 0);
            break;
           }
           HEAP32[5584] = 22344;
           $476 = HEAP8[22344] | 0;
           L164 : do {
            if ($476 << 24 >> 24 != 0) {
             $479 = $476;
             $478 = 22344;
             L165 : while (1) {
              do {
               if ((($479 & 255) - 48 | 0) >>> 0 < 10 >>> 0) {
                $491 = $478;
               } else {
                if ((HEAP32[592] | 0) != 0) {
                 break L165;
                }
                if ((HEAP32[4] & 1 | 0) == 0) {
                 $491 = $478;
                 break;
                }
                _cwarn(8976, 22344, 0, 0);
                $491 = HEAP32[5584] | 0;
               }
              } while (0);
              $478 = $491 + 1 | 0;
              HEAP32[5584] = $478;
              $479 = HEAP8[$478] | 0;
              if ($479 << 24 >> 24 == 0) {
               break L164;
              }
             }
             _cerror(8976, 22344, 0, 0);
             break L153;
            }
           } while (0);
           $495 = _eval_num(22344) | 0;
           if ((HEAP32[$495 + 8 >> 2] | 0) == -1) {
            break;
           }
           $500 = HEAP32[592] | 0;
           do {
            if (($500 | 0) == 0) {
             $532 = _skip_ws() | 0;
             label = 179;
            } else {
             $504 = HEAP32[591] | 0;
             $505$1 = ($504 | 0) < 0 | 0 ? -1 : 0;
             $506 = $495 | 0;
             $507$0 = HEAP32[$506 >> 2] | 0;
             $507$1 = HEAP32[$506 + 4 >> 2] | 0;
             $$etemp$3$1 = 0;
             if (($505$1 | 0) < ($507$1 | 0) | ($505$1 | 0) == ($507$1 | 0) & $504 >>> 0 < $507$0 >>> 0 | (($507$1 | 0) < ($$etemp$3$1 | 0) | ($507$1 | 0) == ($$etemp$3$1 | 0) & $507$0 >>> 0 < 1 >>> 0)) {
              $_off_i$0 = _i64Add($507$0, $507$1, -1, -1) | 0;
              $_off_i$1 = tempRet0;
              $$etemp$5$1 = 0;
              if (!($_off_i$1 >>> 0 < $$etemp$5$1 >>> 0 | $_off_i$1 >>> 0 == $$etemp$5$1 >>> 0 & $_off_i$0 >>> 0 < 2147483646 >>> 0)) {
               _cerror(8816, 22344, $504, 0);
               break L153;
              }
              if ((HEAP32[4] & 1 | 0) == 0) {
               $_pr_i52 = $500;
              } else {
               _cwarn(8816, 22344, $504, 0);
               $_pr_i52 = HEAP32[592] | 0;
              }
              $521 = _skip_ws() | 0;
              if (($_pr_i52 | 0) == 0) {
               $532 = $521;
               label = 179;
               break;
              } else {
               $523 = $521;
              }
             } else {
              $523 = _skip_ws() | 0;
             }
             $524 = _get_unexpandable($523, 0) | 0;
             if ((HEAP32[89616] | 0) == -1) {
              break L153;
             }
             if (($524 | 0) == 67) {
              label = 182;
              break;
             } else if (($524 | 0) != 0) {
              label = 197;
              break;
             }
             $_0_i53 = HEAP32[$506 >> 2] | 0;
            }
           } while (0);
           do {
            if ((label | 0) == 179) {
             if (($532 | 0) == 10) {
              _unget_ch();
              $_0_i53 = HEAP32[$495 >> 2] | 0;
              break;
             } else {
              HEAP32[5584] = 22344;
              if ((_scan_token($532, 22336, $12) | 0) == 67) {
               label = 182;
               break;
              } else {
               label = 197;
               break;
              }
             }
            }
           } while (0);
           if ((label | 0) == 197) {
            _cerror(8496, 22344, 0, 0);
            break;
           }
           if ((label | 0) == 182) {
            HEAP8[(HEAP32[5584] | 0) - 1 | 0] = 0;
            $544 = _save_string(22345) | 0;
            do {
             if ((HEAP32[592] | 0) == 0) {
              if ((HEAP32[682] | 0) == 1) {
               _skip_nl();
               _unget_ch();
               break;
              }
              $557 = _skip_ws() | 0;
              if (($557 | 0) == 10) {
               _unget_ch();
               break;
              }
              if ((HEAP32[4] & 1 | 0) != 0) {
               HEAP32[5584] = 22344;
               _scan_token($557, 22336, $12) | 0;
               _cwarn(8128, 22344, 0, 0);
              }
              _skip_nl();
              _unget_ch();
             } else {
              if ((_get_unexpandable(_skip_ws() | 0, 0) | 0) == 0) {
               break;
              }
              _cerror(8128, 22344, 0, 0);
              _free($544);
              break L153;
             }
            } while (0);
            $568 = HEAP32[89668] | 0;
            $570 = HEAP32[$568 + 48 >> 2] | 0;
            if (($570 | 0) == 0) {
             $574 = $568;
            } else {
             _free($570);
             $574 = HEAP32[89668] | 0;
            }
            HEAP32[$574 + 48 >> 2] = $544;
            $_0_i53 = HEAP32[$495 >> 2] | 0;
           }
           if (($_0_i53 | 0) <= 0) {
            break;
           }
           HEAP32[23332] = $_0_i53;
           _sharp(0, 0);
           $585 = (HEAP32[23332] | 0) - 1 | 0;
           HEAP32[23332] = $585;
           HEAP32[(HEAP32[89668] | 0) + 4 >> 2] = $585;
           HEAP32[89568] = -1;
           break L24;
          }
         } while (0);
         _skip_nl();
         break L24;
         break;
        }
       case 175:
        {
         HEAP32[89682] = 1;
         $590 = (_do_include(0) | 0) != 1;
         if (!($590 | ($126 | 0) == (HEAP32[89668] | 0))) {
          HEAP32[89568] = -1;
         }
         HEAP32[89682] = 0;
         label = 215;
         break L66;
         break;
        }
       case 129:
        {
         if ((HEAP32[592] | 0) == 0) {
          _do_old();
          label = 214;
          break L66;
         } else {
          _cerror(HEAP32[$126 + 52 >> 2] | 0, 0, 0, 0);
          label = 214;
          break L66;
         }
         break;
        }
       case 178:
        {
         if ((HEAP32[592] | 0) == 0) {
          _do_old();
          label = 215;
          break L66;
         } else {
          _do_pragma();
          HEAP32[89568] = -1;
          label = 215;
          break L66;
         }
         break;
        }
       default:
        {
         _do_old();
         $hash_3 = $hash_1;
         $603 = $126;
         label = 211;
         break L66;
        }
       }
      }
     } while (0);
     if ((label | 0) == 227) {
      _cfatal(19544, 0, 256, 0);
      break L4;
     }
     do {
      if ((label | 0) == 60) {
       $155 = HEAP32[1502] | 0;
       if (($155 | 0) == 2920) {
        label = 224;
        break;
       }
       if (($155 | 0) == (HEAP32[$154 + 20 >> 2] | 0)) {
        label = 223;
        break;
       }
       $163 = HEAP32[$155 >> 2] | 0;
       if (($163 & 2 | 0) != 0) {
        $637 = $155;
        label = 225;
        break;
       }
       if (($163 & 5 | 0) == 1) {
        $hash_2 = 105;
        $171 = $154;
        label = 65;
        break;
       }
       HEAP32[730] = 0;
       break L24;
      }
     } while (0);
     do {
      if ((label | 0) == 65) {
       $172 = _skip_ws() | 0;
       L242 : do {
        if (($172 | 0) == 10) {
         _unget_ch();
         _cerror(8432, 0, 0, 0);
         $_0_i = 0;
        } else {
         if ((HEAP32[89594] & 8 | 0) != 0) {
          $182 = HEAP32[89568] | 0;
          do {
           if ((HEAP32[5582] | 0) != 0 | ($182 | 0) > 10) {
            _sharp(0, 0);
           } else {
            HEAP32[89568] = $182 - 1;
            if (($182 | 0) <= 0) {
             break;
            }
            do {
             FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
             $_pr_i_i = HEAP32[89568] | 0;
             HEAP32[89568] = $_pr_i_i - 1;
            } while (($_pr_i_i | 0) > 0);
           }
          } while (0);
          HEAP32[89568] = -1;
          $192 = HEAP32[23332] | 0;
          FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 8384, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $tp_1, HEAP32[tempVarArgs + 8 >> 2] = $192, tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
         }
         do {
          if (($hash_2 | 0) == 105) {
           _unget_ch();
           $197$0 = _eval_if() | 0;
           $199 = (($197$0 | 0) != 0 | (tempRet0 | 0) != 0) & 1;
           if ((HEAP32[89594] & 8 | 0) == 0) {
            $found_0_i = $199;
            $_05_i = 161;
            break;
           }
           HEAP32[89684] = 0;
           $found_0_i = $199;
           $_05_i = 161;
          } else {
           HEAP32[5584] = 22344;
           if ((_scan_token($172, 22336, $12) | 0) != 65) {
            _cerror(9200, 22344, 0, 0);
            $_0_i = 0;
            break L242;
           }
           $209 = HEAP8[358776] | 0;
           if ($209 << 24 >> 24 == 0) {
            $np_0_lcssa_i_i_i = 358776;
            $hash_0_lcssa_i_i_i = 0;
           } else {
            $np_011_i_i_i = 358776;
            $hash_012_i_i_i = 0;
            $211 = $209;
            while (1) {
             $213 = $np_011_i_i_i + 1 | 0;
             $214 = ($211 << 24 >> 24) + $hash_012_i_i_i | 0;
             $215 = HEAP8[$213] | 0;
             if ($215 << 24 >> 24 == 0) {
              $np_0_lcssa_i_i_i = $213;
              $hash_0_lcssa_i_i_i = $214;
              break;
             } else {
              $np_011_i_i_i = $213;
              $hash_012_i_i_i = $214;
              $211 = $215;
             }
            }
           }
           $218 = $np_0_lcssa_i_i_i - 358776 | 0;
           $220 = $218 + 1 | 0;
           $prevp_0_i_i_i = 89200 + (($218 + $hash_0_lcssa_i_i_i & 1023) << 2) | 0;
           $cmp_0_load4_i_i = -1;
           while (1) {
            $224 = HEAP32[$prevp_0_i_i_i >> 2] | 0;
            if (($224 | 0) == 0) {
             $cmp_0_load5_i_i = $cmp_0_load4_i_i;
             $_lcssa_i = 0;
             break;
            }
            $228 = _memcmp($224 + 25 | 0, 358776, $220 | 0) | 0;
            if (($228 | 0) > -1) {
             $cmp_0_load5_i_i = $228;
             $_lcssa_i = $224;
             break;
            } else {
             $prevp_0_i_i_i = $224 | 0;
             $cmp_0_load4_i_i = $228;
            }
           }
           $233 = ($cmp_0_load5_i_i | 0) == 0;
           do {
            if ((HEAP32[592] | 0) == 0) {
             $240 = $233 ? $_lcssa_i : 0;
            } else {
             if (!$233) {
              $240 = 0;
              break;
             }
             $240 = (HEAP8[$_lcssa_i + 24 | 0] | 0) == 0 ? $_lcssa_i : 0;
            }
           } while (0);
           $241 = ($240 | 0) != 0;
           $242 = $241 & 1;
           if ((HEAP32[89594] & 8 | 0) == 0 | $241 ^ 1) {
            $found_0_i = $242;
            $_05_i = $hash_2;
            break;
           }
           FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 8304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $240 + 25, tempVarArgs) | 0) | 0;
           STACKTOP = tempVarArgs;
           $found_0_i = $242;
           $_05_i = $hash_2;
          }
         } while (0);
         if (($found_0_i | 0) == (($_05_i | 0) == 161 | 0)) {
          HEAP32[730] = 1;
          $256 = HEAP32[1502] | 0;
          HEAP32[$256 >> 2] = HEAP32[$256 >> 2] | 4;
         } else {
          HEAP32[730] = 0;
         }
         if ((HEAP32[89594] & 8 | 0) == 0) {
          $_0_i = 1;
          break;
         }
         FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 8208, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[730] | 0) != 0 ? 84 : 70, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $_0_i = 1;
        }
       } while (0);
       if ((HEAP32[89594] & 16 | 0) != 0) {
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 17088, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[730] | 0) != 0 ? 16384 : 15712, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $283 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 15144, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23332], HEAP32[tempVarArgs + 8 >> 2] = $283, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
       }
       if (($_0_i | 0) != 0) {
        $hash_3 = $hash_2;
        $603 = $171;
        label = 211;
        break;
       }
       HEAP32[730] = 0;
       break L24;
      } else if ((label | 0) == 223) {
       _cerror(20848, 0, 0, 0);
       break L24;
      } else if ((label | 0) == 224) {
       _cerror(14752, 0, 0, 0);
       break L24;
      } else if ((label | 0) == 225) {
       _cerror(14616, 0, HEAP32[$637 + 8 >> 2] | 0, 0);
       break L24;
      }
     } while (0);
     L289 : do {
      if ((label | 0) == 211) {
       switch ($hash_3 | 0) {
       case 137:
        {
         break;
        }
       case 129:
        {
         label = 214;
         break L289;
         break;
        }
       case 175:
       case 178:
        {
         label = 215;
         break L289;
         break;
        }
       case 105:
       case 183:
       case 168:
       case 176:
        {
         break L24;
         break;
        }
       default:
        {
         break L289;
        }
       }
       if (($603 | 0) == (HEAP32[89668] | 0)) {
        label = 214;
        break;
       }
       HEAP32[89568] = -1;
       label = 214;
      }
     } while (0);
     if ((label | 0) == 214) {
      if ((HEAP32[592] | 0) != 0) {
       break;
      }
     } else if ((label | 0) == 215) {
      if ((HEAP32[592] | 0) != 0) {
       break L4;
      }
     }
     do {
      if ((HEAP32[682] | 0) != 1) {
       if ((_skip_ws() | 0) == 10) {
        break;
       }
       if ((HEAP32[592] | 0) != 0) {
        _cerror(8128, (HEAP32[HEAP32[89668] >> 2] | 0) - 1 | 0, 0, 0);
        break;
       }
       if ((HEAP32[4] & 1 | 0) == 0) {
        break;
       }
       _cwarn(8128, (HEAP32[HEAP32[89668] >> 2] | 0) - 1 | 0, 0, 0);
      }
     } while (0);
     _skip_nl();
     break L4;
    }
   } while (0);
   _skip_nl();
  }
 } while (0);
 HEAP32[89688] = 0;
 $644 = (HEAP32[730] | 0) != 0;
 if ((HEAP32[89542] | 0) != 0 & $644) {
  $648 = (HEAP32[89566] | 0) == 0 | 0;
 } else {
  $648 = 0;
 }
 HEAP32[89624] = $648;
 HEAP32[89622] = (HEAP32[89543] | 0) == 0 ? 0 : $644 & 1;
 if ((HEAP32[5582] | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[89568] = (HEAP32[89568] | 0) + 1;
 STACKTOP = sp;
 return;
}
function _scan_token($c, $out_pp, $out_end) {
 $c = $c | 0;
 $out_pp = $out_pp | 0;
 $out_end = $out_end | 0;
 var $1 = 0, $2 = 0, $6 = 0, $15 = 0, $bp_0_i = 0, $uc2_0_i = 0, $uc4_0_i = 0, $bp_1_i = 0, $_0_i = 0, $bp_2_i = 0, $48 = 0, $cnt_0_i = 0, $55 = 0, $uc2_1_i = 0, $uc4_1_i = 0, $uc2_2_i = 0, $uc4_2_i = 0, $bp_3_i = 0, $65 = 0, $uc2_3_i = 0, $uc4_3_i = 0, $bp_4_i = 0, $86 = 0, $len_0_i = 0, $102 = 0, $126 = 0, $129 = 0, $136 = 0, $out_p_0_i = 0, $_0_i47 = 0, $139 = 0, $141 = 0, $145 = 0, $157 = 0, $cnt_0_i50 = 0, $162 = 0, $163 = 0, $out_p_1_i = 0, $_1_i = 0, $out_p_2_i = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $198 = 0, $199 = 0, $_041_ph59_i = 0, $_040_ph60_i = 0, $radix_0_ph61_i = 0, $expseen_0_ph_i = 0, $octal89_0_ph_i = 0, $dotflag_0_ph_i = 0, $_041_i = 0, $_040_i = 0, $radix_0_i = 0, $expseen_0_i = 0, $211 = 0, $212 = 0, $radix_0105_i = 0, $extract_t47_i = 0, $_142_i = 0, $_1_off0_i = 0, $radix_1_i = 0, $expseen_1_i = 0, $octal89_1_i = 0, $dotflag_1_i = 0, $_243_i = 0, $_2_i = 0, $dotflag_2_i = 0, $_3_i = 0, $radix_2_i = 0, $octal89_2_i = 0, $241 = 0, $249 = 0, $251 = 0, $254 = 0, $257 = 0, $306 = 0, $_054_i = 0, $_1_ph_i = 0, $395 = 0, $_1_i57 = 0, $_165_i = 0, $_159_i = 0, $_2_i59 = 0, $409 = 0, $411 = 0, $token_type_3 = 0, $422 = 0, $out_2 = 0, $token_type_4 = 0, $431 = 0, $442 = 0, label = 0;
 $1 = HEAP32[$out_pp >> 2] | 0;
 $2 = HEAP32[592] | 0;
 if (($2 | 0) != 0) {
  HEAP8[2896] = 1;
 }
 $6 = $c & 255;
 L4 : do {
  switch (HEAP16[(HEAP32[91636] | 0) + ($6 << 1) >> 1] & 255 | 0) {
  case 4:
   {
    $129 = _get_ch() | 0;
    _unget_ch();
    if ((HEAP16[(HEAP32[91636] | 0) + ($129 << 1) >> 1] & 2) == 0) {
     label = 89;
     break L4;
    }
    $136 = HEAP32[592] | 0;
    label = 45;
    break;
   }
  case 2:
   {
    $136 = $2;
    label = 45;
    break;
   }
  case 8:
   {
    label = 89;
    break;
   }
  case 16:
   {
    $126 = _scan_quote($6, $1, $out_end, 0) | 0;
    $token_type_4 = ($6 | 0) == 34 ? 67 : 69;
    $out_2 = $126;
    break;
   }
  case 1:
   {
    if (!(($6 | 0) == 76 & ($2 | 0) != 0)) {
     label = 7;
     break L4;
    }
    $15 = _get_ch() | 0;
    if ((HEAP16[(HEAP32[91636] | 0) + ($15 << 1) >> 1] & 16) == 0) {
     _unget_ch();
     label = 7;
     break L4;
    } else {
     HEAP8[$1] = 76;
     $token_type_4 = ($15 | 0) == 34 ? 68 : 70;
     $out_2 = _scan_quote($15, $1 + 1 | 0, $out_end, 0) | 0;
     break L4;
    }
    break;
   }
  default:
   {
    do {
     if ((HEAP32[682] | 0) == 3) {
      if (!(($6 | 0) == 92 & (HEAP32[23330] | 0) != 0)) {
       $411 = $2;
       break;
      }
      $409 = _get_ch() | 0;
      _unget_ch();
      if (($409 | 0) == 117 | ($409 | 0) == 85) {
       label = 7;
       break L4;
      }
      $411 = HEAP32[592] | 0;
     } else {
      $411 = $2;
     }
    } while (0);
    if (($411 | 0) == 0) {
     label = 182;
    } else {
     if (($6 - 29 | 0) >>> 0 < 2 >>> 0) {
      $token_type_3 = 73;
     } else {
      label = 182;
     }
    }
    if ((label | 0) == 182) {
     $token_type_3 = (HEAP16[(HEAP32[91636] | 0) + ($6 << 1) >> 1] & 32) == 0 ? 72 : 73;
    }
    $422 = $1 + 1 | 0;
    HEAP8[$1] = $c;
    HEAP8[$422] = 0;
    $token_type_4 = $token_type_3;
    $out_2 = $422;
   }
  }
 } while (0);
 L24 : do {
  if ((label | 0) == 45) {
   if (($136 | 0) != 0) {
    $_0_i47 = $6;
    $out_p_0_i = $1;
    L27 : while (1) {
     $139 = $out_p_0_i + 1 | 0;
     HEAP8[$out_p_0_i] = $_0_i47;
     L29 : do {
      if (($_0_i47 | 0) == 101 | ($_0_i47 | 0) == 69) {
       label = 49;
      } else {
       $141 = HEAP32[23328] | 0;
       if (($141 | 0) != 0) {
        if (($_0_i47 | 0) == 112 | ($_0_i47 | 0) == 80) {
         label = 49;
         break;
        }
       }
       do {
        if ((HEAP32[682] | 0) == 3) {
         if (!(($_0_i47 | 0) == 92 & ($141 | 0) != 0)) {
          break;
         }
         $157 = _get_ch() | 0;
         if (($157 | 0) == 85) {
          $cnt_0_i50 = 8;
         } else if (($157 | 0) == 117) {
          $cnt_0_i50 = 4;
         } else {
          label = 55;
          break L27;
         }
         $162 = $out_p_0_i + 2 | 0;
         HEAP8[$139] = $157;
         $163 = _scan_ucn($cnt_0_i50, $162) | 0;
         if (($163 | 0) == 0) {
          $out_p_2_i = $162;
          break L27;
         }
         $_1_i = _get_ch() | 0;
         $out_p_1_i = $163;
         break L29;
        }
       } while (0);
       $_1_i = _get_ch() | 0;
       $out_p_1_i = $139;
      }
     } while (0);
     do {
      if ((label | 0) == 49) {
       label = 0;
       $145 = _get_ch() | 0;
       if (!(($145 | 0) == 45 | ($145 | 0) == 43)) {
        $_1_i = $145;
        $out_p_1_i = $139;
        break;
       }
       HEAP8[$139] = $145;
       $_1_i = _get_ch() | 0;
       $out_p_1_i = $out_p_0_i + 2 | 0;
      }
     } while (0);
     if ((HEAP16[(HEAP32[91636] | 0) + ($_1_i << 1) >> 1] & 7) != 0) {
      $_0_i47 = $_1_i;
      $out_p_0_i = $out_p_1_i;
      continue;
     }
     if ((HEAP32[682] | 0) != 3) {
      $out_p_2_i = $out_p_1_i;
      break;
     }
     if (($_1_i | 0) == 92 & (HEAP32[23328] | 0) != 0) {
      $_0_i47 = $_1_i;
      $out_p_0_i = $out_p_1_i;
     } else {
      $out_p_2_i = $out_p_1_i;
      break;
     }
    }
    if ((label | 0) == 55) {
     _unget_ch();
     $out_p_2_i = $out_p_0_i;
    }
    HEAP8[$out_p_2_i] = 0;
    if ($out_p_2_i >>> 0 > $out_end >>> 0) {
     _cfatal(21152, $1, 0, 0);
     return 0;
    } else {
     _unget_ch();
     $token_type_4 = 66;
     $out_2 = $out_p_2_i;
     break;
    }
   }
   $185 = ($6 | 0) == 46;
   $186 = $185 & 1;
   do {
    if ($185) {
     $188 = $1 + 1 | 0;
     HEAP8[$1] = 46;
     $189 = _get_ch() | 0;
     if ((HEAP16[(HEAP32[91636] | 0) + ($189 << 1) >> 1] & 2) == 0) {
      $octal89_2_i = 0;
      $radix_2_i = 10;
      $_3_i = $188;
     } else {
      $dotflag_0_ph_i = $186;
      $octal89_0_ph_i = 0;
      $expseen_0_ph_i = 0;
      $radix_0_ph61_i = 10;
      $_040_ph60_i = $189;
      $_041_ph59_i = $188;
      label = 70;
     }
    } else {
     if (($6 | 0) != 48) {
      $dotflag_0_ph_i = $186;
      $octal89_0_ph_i = 0;
      $expseen_0_ph_i = 0;
      $radix_0_ph61_i = 10;
      $_040_ph60_i = $6;
      $_041_ph59_i = $1;
      label = 70;
      break;
     }
     $198 = $1 + 1 | 0;
     HEAP8[$1] = 48;
     $199 = _get_ch() | 0;
     if (!(($199 | 0) == 120 | ($199 | 0) == 88)) {
      $dotflag_0_ph_i = $186;
      $octal89_0_ph_i = 0;
      $expseen_0_ph_i = 0;
      $radix_0_ph61_i = 8;
      $_040_ph60_i = $199;
      $_041_ph59_i = $198;
      label = 70;
      break;
     }
     HEAP8[$198] = $199;
     $dotflag_0_ph_i = $186;
     $octal89_0_ph_i = 0;
     $expseen_0_ph_i = 0;
     $radix_0_ph61_i = 16;
     $_040_ph60_i = _get_ch() | 0;
     $_041_ph59_i = $1 + 2 | 0;
     label = 70;
    }
   } while (0);
   L60 : do {
    if ((label | 0) == 70) {
     L61 : while (1) {
      label = 0;
      $expseen_0_i = $expseen_0_ph_i;
      $radix_0_i = $radix_0_ph61_i;
      $_040_i = $_040_ph60_i;
      $_041_i = $_041_ph59_i;
      while (1) {
       if (($radix_0_i | 0) == 16) {
        $radix_0105_i = 16;
        label = 76;
        break;
       }
       if (($_040_i | 0) == 46) {
        label = 75;
        break;
       } else if (!(($_040_i | 0) == 101 | ($_040_i | 0) == 69)) {
        $radix_0105_i = $radix_0_i;
        label = 76;
        break;
       }
       if (($expseen_0_i | 0) != 0) {
        $octal89_2_i = $octal89_0_ph_i;
        $radix_2_i = $radix_0_i;
        $_3_i = $_041_i;
        break L60;
       }
       $211 = $_041_i + 1 | 0;
       HEAP8[$_041_i] = $_040_i;
       $212 = _get_ch() | 0;
       if (($212 | 0) == 43 | ($212 | 0) == 45) {
        $dotflag_1_i = $dotflag_0_ph_i;
        $octal89_1_i = $octal89_0_ph_i;
        $expseen_1_i = 1;
        $radix_1_i = 10;
        $_1_off0_i = $212 & 255;
        $_142_i = $211;
        break;
       } else {
        $expseen_0_i = 1;
        $radix_0_i = 10;
        $_040_i = $212;
        $_041_i = $211;
       }
      }
      L68 : do {
       if ((label | 0) == 75) {
        label = 0;
        if (($dotflag_0_ph_i | 0) == 0) {
         $dotflag_1_i = 1;
         $octal89_1_i = $octal89_0_ph_i;
         $expseen_1_i = $expseen_0_i;
         $radix_1_i = 10;
         $_1_off0_i = 46;
         $_142_i = $_041_i;
        } else {
         $octal89_2_i = $octal89_0_ph_i;
         $radix_2_i = $radix_0_i;
         $_3_i = $_041_i;
         break L60;
        }
       } else if ((label | 0) == 76) {
        label = 0;
        $extract_t47_i = $_040_i & 255;
        switch ($_040_i | 0) {
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
         {
          $dotflag_1_i = $dotflag_0_ph_i;
          $octal89_1_i = $octal89_0_ph_i;
          $expseen_1_i = $expseen_0_i;
          $radix_1_i = $radix_0105_i;
          $_1_off0_i = $extract_t47_i;
          $_142_i = $_041_i;
          break L68;
          break;
         }
        case 56:
        case 57:
         {
          $dotflag_1_i = $dotflag_0_ph_i;
          $octal89_1_i = 1;
          $expseen_1_i = $expseen_0_i;
          $radix_1_i = $radix_0105_i;
          $_1_off0_i = $extract_t47_i;
          $_142_i = $_041_i;
          break L68;
          break;
         }
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
         {
          if (($radix_0105_i | 0) == 16) {
           $dotflag_1_i = $dotflag_0_ph_i;
           $octal89_1_i = $octal89_0_ph_i;
           $expseen_1_i = $expseen_0_i;
           $radix_1_i = 16;
           $_1_off0_i = $extract_t47_i;
           $_142_i = $_041_i;
           break L68;
          } else {
           break L61;
          }
          break;
         }
        default:
         {
          break L61;
         }
        }
       }
      } while (0);
      HEAP8[$_142_i] = $_1_off0_i;
      $dotflag_0_ph_i = $dotflag_1_i;
      $octal89_0_ph_i = $octal89_1_i;
      $expseen_0_ph_i = $expseen_1_i;
      $radix_0_ph61_i = $radix_1_i;
      $_040_ph60_i = _get_ch() | 0;
      $_041_ph59_i = $_142_i + 1 | 0;
      label = 70;
     }
     if (($expseen_0_i | $dotflag_0_ph_i | 0) == 0) {
      $dotflag_2_i = $dotflag_0_ph_i;
      $_2_i = $_040_i;
      $_243_i = $_041_i;
     } else {
      $octal89_2_i = $octal89_0_ph_i;
      $radix_2_i = $radix_0105_i;
      $_3_i = $_041_i;
      break;
     }
     while (1) {
      if (!(($_2_i | 0) == 108 | ($_2_i | 0) == 76)) {
       $octal89_2_i = $octal89_0_ph_i;
       $radix_2_i = $radix_0105_i;
       $_3_i = $_243_i;
       break L60;
      }
      if (($dotflag_2_i | 0) != 0) {
       $octal89_2_i = $octal89_0_ph_i;
       $radix_2_i = $radix_0105_i;
       $_3_i = $_243_i;
       break L60;
      }
      HEAP8[$_243_i] = $_2_i;
      $dotflag_2_i = 1;
      $_2_i = _get_ch() | 0;
      $_243_i = $_243_i + 1 | 0;
     }
    }
   } while (0);
   HEAP8[$_3_i] = 0;
   if ($_3_i >>> 0 > $out_end >>> 0) {
    _cfatal(21264, $1, 0, 0);
    return 0;
   }
   _unget_ch();
   if (!(($octal89_2_i | 0) != 0 & ($radix_2_i | 0) == 8)) {
    $token_type_4 = 66;
    $out_2 = $_3_i;
    break;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    $token_type_4 = 66;
    $out_2 = $_3_i;
    break;
   }
   _do_msg(12448, 21336, $1, 0, 0);
   $token_type_4 = 66;
   $out_2 = $_3_i;
  } else if ((label | 0) == 7) {
   if (($6 | 0) == 26) {
    HEAP8[358776] = 26;
    if ((HEAP32[89594] & 8 | 0) == 0 | (HEAP32[89688] | 0) != 0) {
     $bp_0_i = 358777;
    } else {
     HEAP8[358777] = _get_ch() | 0;
     HEAP8[358778] = _get_ch() | 0;
     $bp_0_i = 358779;
    }
    $_0_i = _get_ch() | 0;
    $bp_1_i = $bp_0_i;
    $uc4_0_i = 0;
    $uc2_0_i = 0;
   } else {
    $_0_i = $6;
    $bp_1_i = 358776;
    $uc4_0_i = 0;
    $uc2_0_i = 0;
   }
   L92 : while (1) {
    if ($bp_1_i >>> 0 < 359800 >>> 0) {
     HEAP8[$bp_1_i] = $_0_i;
     $bp_2_i = $bp_1_i + 1 | 0;
    } else {
     $bp_2_i = $bp_1_i;
    }
    do {
     if ((HEAP32[682] | 0) == 3) {
      if (!(($_0_i | 0) == 92 & (HEAP32[23330] | 0) != 0)) {
       $bp_3_i = $bp_2_i;
       $uc4_2_i = $uc4_0_i;
       $uc2_2_i = $uc2_0_i;
       break;
      }
      $48 = _get_ch() | 0;
      if (($48 | 0) == 85) {
       $cnt_0_i = 8;
      } else if (($48 | 0) == 117) {
       $cnt_0_i = 4;
      } else {
       label = 17;
       break L92;
      }
      HEAP8[$bp_2_i] = $48;
      $55 = _scan_ucn($cnt_0_i, $bp_2_i + 1 | 0) | 0;
      if (($55 | 0) == 0) {
       break L92;
      }
      if (($cnt_0_i | 0) == 4) {
       $uc4_1_i = $uc4_0_i;
       $uc2_1_i = $uc2_0_i + 1 | 0;
      } else if (($cnt_0_i | 0) == 8) {
       $uc4_1_i = $uc4_0_i + 1 | 0;
       $uc2_1_i = $uc2_0_i;
      } else {
       $uc4_1_i = $uc4_0_i;
       $uc2_1_i = $uc2_0_i;
      }
      $bp_3_i = $bp_2_i >>> 0 < 359800 >>> 0 ? $55 : $bp_2_i;
      $uc4_2_i = $uc4_1_i;
      $uc2_2_i = $uc2_1_i;
     } else {
      $bp_3_i = $bp_2_i;
      $uc4_2_i = $uc4_0_i;
      $uc2_2_i = $uc2_0_i;
     }
    } while (0);
    $65 = _get_ch() | 0;
    if ((HEAP16[(HEAP32[91636] | 0) + ($65 << 1) >> 1] & 3) != 0) {
     $_0_i = $65;
     $bp_1_i = $bp_3_i;
     $uc4_0_i = $uc4_2_i;
     $uc2_0_i = $uc2_2_i;
     continue;
    }
    if ((HEAP32[682] | 0) != 3) {
     $bp_4_i = $bp_3_i;
     $uc4_3_i = $uc4_2_i;
     $uc2_3_i = $uc2_2_i;
     label = 26;
     break;
    }
    if (($65 | 0) == 92 & (HEAP32[23330] | 0) != 0) {
     $_0_i = $65;
     $bp_1_i = $bp_3_i;
     $uc4_0_i = $uc4_2_i;
     $uc2_0_i = $uc2_2_i;
    } else {
     $bp_4_i = $bp_3_i;
     $uc4_3_i = $uc4_2_i;
     $uc2_3_i = $uc2_2_i;
     label = 26;
     break;
    }
   }
   if ((label | 0) == 17) {
    _unget_ch();
    $bp_4_i = $bp_2_i - 1 | 0;
    $uc4_3_i = $uc4_0_i;
    $uc2_3_i = $uc2_0_i;
    label = 26;
   }
   do {
    if ((label | 0) == 26) {
     _unget_ch();
     HEAP8[$bp_4_i] = 0;
     do {
      if ($bp_4_i >>> 0 >= 359800 >>> 0) {
       if ((HEAP32[4] & 1 | 0) == 0) {
        break;
       }
       _do_msg(12448, 20992, 358776, 0, 0);
      }
     } while (0);
     $86 = $bp_4_i - 358776 | 0;
     if ((HEAP32[682] | 0) == 3) {
      $len_0_i = ($uc4_3_i * 9 | 0) + ($uc2_3_i * -5 | 0) + $86 | 0;
     } else {
      $len_0_i = $86;
     }
     do {
      if ((HEAP32[592] | 0) != 0) {
       if ((HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) == 0) {
        break;
       }
       $102 = HEAP32[585] | 0;
       if ($len_0_i >>> 0 <= $102 >>> 0) {
        break;
       }
       if ((HEAP32[4] & 4 | 0) == 0) {
        break;
       }
       _do_msg(12448, 20904, 0, $102, 358776);
      }
     } while (0);
     if (!((HEAP32[89552] | 0) != 0 & (HEAP8[2544] ^ 1))) {
      break;
     }
     if ((HEAP32[4] & 2 | 0) == 0) {
      break;
     }
     if ((_strchr(358776, 36) | 0) == 0) {
      break;
     }
     _do_msg(12448, 20824, 358776, 0, 0);
     HEAP8[2544] = 1;
    }
   } while (0);
   $token_type_4 = 65;
   $out_2 = _stpcpy($1 | 0, 358776) | 0;
  } else if ((label | 0) == 89) {
   $241 = $1 + 1 | 0;
   HEAP8[$1] = $c;
   switch ($6 | 0) {
   case 126:
    {
     HEAP32[89554] = 5;
     break;
    }
   case 40:
    {
     HEAP32[89554] = 2;
     break;
    }
   case 41:
    {
     HEAP32[89554] = 27;
     break;
    }
   case 63:
    {
     HEAP32[89554] = 25;
     break;
    }
   case 59:
   case 91:
   case 93:
   case 123:
   case 125:
   case 44:
    {
     HEAP32[89554] = 33;
     break;
    }
   default:
    {
     HEAP32[89554] = 34;
     $249 = _get_ch() | 0;
     $251 = $1 + 2 | 0;
     HEAP8[$241] = $249;
     L140 : do {
      switch ($6 | 0) {
      case 61:
       {
        $254 = ($249 | 0) == 61 ? 18 : 33;
        HEAP32[89554] = $254;
        $_1_i57 = $251;
        $395 = $254;
        label = 172;
        break;
       }
      case 33:
       {
        $257 = ($249 | 0) == 61 ? 19 : 6;
        HEAP32[89554] = $257;
        $_1_i57 = $251;
        $395 = $257;
        label = 172;
        break;
       }
      case 38:
       {
        if (($249 | 0) == 38) {
         HEAP32[89554] = 23;
         $_2_i59 = $251;
         break L140;
        } else if (($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        } else {
         HEAP32[89554] = 20;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        break;
       }
      case 42:
       {
        if (($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        HEAP32[89554] = 7;
        $_159_i = $251;
        label = 174;
        break;
       }
      case 62:
       {
        if (($249 | 0) == 62) {
         if ((_get_ch() | 0) == 61) {
          HEAP32[89554] = 35;
          HEAP8[$251] = 61;
          $_1_ph_i = $1 + 3 | 0;
          label = 171;
          break L140;
         } else {
          HEAP32[89554] = 13;
          _unget_ch();
          $_1_ph_i = $251;
          label = 171;
          break L140;
         }
        } else if (($249 | 0) == 61) {
         HEAP32[89554] = 17;
         $_2_i59 = $251;
         break L140;
        } else {
         HEAP32[89554] = 16;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        break;
       }
      case 35:
       {
        do {
         if ((HEAP32[592] | 0) != 0) {
          if ((HEAP32[89616] | HEAP32[89690] | 0) == 0) {
           break;
          }
          $306 = ($249 | 0) == 35 ? 31 : 30;
          HEAP32[89554] = $306;
          $_1_i57 = $251;
          $395 = $306;
          label = 172;
          break L140;
         }
        } while (0);
        HEAP32[89554] = 33;
        $_159_i = $251;
        label = 174;
        break;
       }
      case 47:
       {
        if (($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        HEAP32[89554] = 8;
        $_159_i = $251;
        label = 174;
        break;
       }
      case 94:
       {
        if (($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        HEAP32[89554] = 21;
        $_159_i = $251;
        label = 174;
        break;
       }
      case 46:
       {
        if ((HEAP32[592] | 0) == 0) {
         HEAP32[89554] = 33;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        if (($249 | 0) != 46) {
         if ((HEAP32[91372] | 0) != 0 & ($249 | 0) == 42) {
          $_1_ph_i = $251;
          label = 171;
          break L140;
         }
         HEAP32[89554] = 33;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        if ((_get_ch() | 0) == 46) {
         HEAP32[89554] = 32;
         HEAP8[$251] = 46;
         $_1_ph_i = $1 + 3 | 0;
         label = 171;
         break L140;
        } else {
         _unget_ch();
         HEAP32[89554] = 33;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        break;
       }
      case 43:
       {
        if (($249 | 0) == 43 | ($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        HEAP32[89554] = 10;
        $_159_i = $251;
        label = 174;
        break;
       }
      case 45:
       {
        if (($249 | 0) == 45 | ($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        } else if (($249 | 0) != 62) {
         HEAP32[89554] = 11;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        if ((HEAP32[91372] | 0) == 0) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        if ((_get_ch() | 0) == 42) {
         HEAP32[89554] = 35;
         HEAP8[$251] = 42;
         $_1_ph_i = $1 + 3 | 0;
         label = 171;
         break L140;
        } else {
         _unget_ch();
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        break;
       }
      case 37:
       {
        if (($249 | 0) == 58) {
         if (!((HEAP32[682] | 0) == 3 & (HEAP32[89549] | 0) != 0)) {
          HEAP32[89554] = 9;
          $_159_i = $251;
          label = 174;
          break L140;
         }
         do {
          if ((_get_ch() | 0) == 37) {
           if ((_get_ch() | 0) == 58) {
            HEAP32[89554] = 69;
            HEAP8[$251] = 37;
            HEAP8[$1 + 3 | 0] = 58;
            $_054_i = $1 + 4 | 0;
            break;
           } else {
            _unget_ch();
            _unget_ch();
            HEAP32[89554] = 68;
            $_054_i = $251;
            break;
           }
          } else {
           _unget_ch();
           HEAP32[89554] = 68;
           $_054_i = $251;
          }
         } while (0);
         if ((HEAP32[89690] | 0) == 0) {
          $_1_ph_i = $_054_i;
          label = 171;
          break L140;
         }
         if ((HEAP32[89554] | 0) == 69) {
          HEAP32[89554] = 31;
          $_2_i59 = $_054_i;
          break L140;
         } else {
          HEAP32[89554] = 30;
          $_165_i = $_054_i;
          label = 173;
          break L140;
         }
        } else if (($249 | 0) == 62) {
         if ((HEAP32[682] | 0) == 3 & (HEAP32[89549] | 0) != 0) {
          HEAP32[89554] = 65;
          $_2_i59 = $251;
          break L140;
         } else {
          HEAP32[89554] = 9;
          $_159_i = $251;
          label = 174;
          break L140;
         }
        } else if (($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        } else {
         HEAP32[89554] = 9;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        break;
       }
      case 124:
       {
        if (($249 | 0) == 124) {
         HEAP32[89554] = 24;
         $_2_i59 = $251;
         break L140;
        } else if (($249 | 0) == 61) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        } else {
         HEAP32[89554] = 22;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        break;
       }
      case 60:
       {
        if (($249 | 0) == 61) {
         HEAP32[89554] = 15;
         $_2_i59 = $251;
         break L140;
        } else if (($249 | 0) == 58) {
         if ((HEAP32[682] | 0) == 3 & (HEAP32[89549] | 0) != 0) {
          HEAP32[89554] = 66;
          $_2_i59 = $251;
          break L140;
         } else {
          HEAP32[89554] = 14;
          $_159_i = $251;
          label = 174;
          break L140;
         }
        } else if (($249 | 0) == 37) {
         if ((HEAP32[682] | 0) == 3 & (HEAP32[89549] | 0) != 0) {
          HEAP32[89554] = 64;
          $_2_i59 = $251;
          break L140;
         } else {
          HEAP32[89554] = 14;
          $_159_i = $251;
          label = 174;
          break L140;
         }
        } else if (($249 | 0) == 60) {
         if ((_get_ch() | 0) == 61) {
          HEAP32[89554] = 35;
          HEAP8[$251] = 61;
          $_1_ph_i = $1 + 3 | 0;
          label = 171;
          break L140;
         } else {
          HEAP32[89554] = 12;
          _unget_ch();
          $_1_ph_i = $251;
          label = 171;
          break L140;
         }
        } else {
         HEAP32[89554] = 14;
         $_159_i = $251;
         label = 174;
         break L140;
        }
        break;
       }
      case 58:
       {
        if ((HEAP32[91372] | 0) != 0 & ($249 | 0) == 58) {
         $_1_ph_i = $251;
         label = 171;
         break L140;
        }
        do {
         if ((HEAP32[682] | 0) == 3) {
          if (!(($249 | 0) == 62 & (HEAP32[89549] | 0) != 0)) {
           break;
          }
          HEAP32[89554] = 67;
          $_2_i59 = $251;
          break L140;
         }
        } while (0);
        HEAP32[89554] = 26;
        $_159_i = $251;
        label = 174;
        break;
       }
      default:
       {
        _cfatal(21704, 0, $6, 0);
        return 0;
       }
      }
     } while (0);
     if ((label | 0) == 171) {
      $_1_i57 = $_1_ph_i;
      $395 = HEAP32[89554] | 0;
      label = 172;
     }
     if ((label | 0) == 172) {
      switch ($395 | 0) {
      case 33:
      case 6:
      case 20:
      case 22:
      case 14:
      case 16:
      case 10:
      case 11:
      case 9:
      case 7:
      case 8:
      case 21:
      case 5:
      case 26:
       {
        $_159_i = $_1_i57;
        label = 174;
        break;
       }
      case 30:
       {
        $_165_i = $_1_i57;
        label = 173;
        break;
       }
      default:
       {
        $_2_i59 = $_1_i57;
       }
      }
     }
     if ((label | 0) == 173) {
      if ((HEAP32[682] | 0) == 3 & ($6 | 0) == 37) {
       $_2_i59 = $_165_i;
      } else {
       $_159_i = $_165_i;
       label = 174;
      }
     }
     if ((label | 0) == 174) {
      _unget_ch();
      $_2_i59 = $_159_i - 1 | 0;
     }
     HEAP8[$_2_i59] = 0;
     $token_type_4 = 71;
     $out_2 = $_2_i59;
     break L24;
    }
   }
   HEAP8[$241] = 0;
   $token_type_4 = 71;
   $out_2 = $241;
  }
 } while (0);
 if ($out_2 >>> 0 > $out_end >>> 0) {
  _cfatal(8688, HEAP32[$out_pp >> 2] | 0, 0, 0);
  return 0;
 }
 if ((HEAP32[89594] & 2 | 0) != 0) {
  $431 = HEAP32[$out_pp >> 2] | 0;
  FUNCTION_TABLE_iii[HEAP32[686] & 15](8656, 2) | 0;
  _dump_string(HEAP32[6320 + ($token_type_4 - 65 << 2) >> 2] | 0, $431);
 }
 if ((HEAP32[682] | 0) != 9 | ($token_type_4 | 0) == 73) {
  HEAP32[$out_pp >> 2] = $out_2;
  HEAP8[2896] = 0;
  return $token_type_4 | 0;
 }
 $442 = HEAP32[89668] | 0;
 if ((HEAP32[$442 + 8 >> 2] | 0) == 0) {
  HEAP32[$out_pp >> 2] = $out_2;
  HEAP8[2896] = 0;
  return $token_type_4 | 0;
 }
 if ((HEAP16[(HEAP32[91636] | 0) + ((HEAPU8[HEAP32[$442 >> 2] | 0] | 0) << 1) >> 1] & 32) != 0) {
  HEAP32[$out_pp >> 2] = $out_2;
  HEAP8[2896] = 0;
  return $token_type_4 | 0;
 }
 HEAP32[89666] = 1;
 HEAP32[$out_pp >> 2] = $out_2;
 HEAP8[2896] = 0;
 return $token_type_4 | 0;
}
function _replace($defp, $out, $out_end, $outer, $rt_file, $line_col_0, $line_col_1, $in_src_n) {
 $defp = $defp | 0;
 $out = $out | 0;
 $out_end = $out_end | 0;
 $outer = $outer | 0;
 $rt_file = $rt_file | 0;
 $line_col_0 = $line_col_0 | 0;
 $line_col_1 = $line_col_1 | 0;
 $in_src_n = $in_src_n | 0;
 var $line_col = 0, $_01 = 0, $_1 = 0, $1 = 0, $2 = 0, $cmp_i = 0, $3 = 0, $9 = 0, $_pre59 = 0, $25 = 0, $30 = 0, $39 = 0, $46 = 0, $47 = 0, $57 = 0, $58 = 0, $59 = 0, $77 = 0, $recurs_030 = 0, $num_029 = 0, $_recurs_0 = 0, $83 = 0, $recurs_0_lcssa = 0, $86 = 0, $cur_out_0 = 0, $m_num_0 = 0, $m_inf_0 = 0, $87 = 0, $90 = 0, $91 = 0, $96 = 0, $107 = 0, $112 = 0, $file_0_in_i = 0, $file_0_i = 0, $132 = 0, $_0_i = 0, $141 = 0, $142 = 0, $cur_out_1 = 0, $163 = 0, $167 = 0, $168 = 0, $170 = 0, $183 = 0, $205 = 0, $arglist_0 = 0, $206 = 0, $217 = 0, $230 = 0, $file_0_ph_i = 0, $236 = 0, $237 = 0, $238 = 0, $_ph_i = 0, $horiz_space_0_ph_i = 0, $240 = 0, $247 = 0, $248 = 0, $253 = 0, $260 = 0, $horiz_space_1_i = 0, $__i = 0, $264 = 0, $268 = 0, $horiz_space_2_i = 0, $270 = 0, $275 = 0, $horiz_space_3_i = 0, $284 = 0, $argp_0_i_i = 0, $290 = 0, $300 = 0, $301 = 0, $304 = 0, $305 = 0, $307 = 0, $prev_token_0_lcssa_i_i = 0, $314 = 0, $316 = 0, $prev_token_165_i_i = 0, $317 = 0, $319 = 0, $prev_token_1_lcssa_i_i = 0, $prev_prev_token_0_lcssa_i_i = 0, $prev_token_2_i_i = 0, $325 = 0, $len_0_i_i = 0, $339 = 0, $prev_token_3_i_i = 0, $344 = 0, $350 = 0, $357 = 0, $argp_1_i_i = 0, $363 = 0, $377 = 0, $c_0_i_i = 0, $c_1_i_i = 0, $in_arg_0_i_i = 0, $409 = 0, $445 = 0, $446 = 0, $457 = 0, $466 = 0, $467 = 0, $470 = 0, $471 = 0, $473 = 0, $prev_token_4_lcssa_i_i = 0, $477 = 0, $479 = 0, $prev_token_5_ph_i_i = 0, $prev_token_6_i_i = 0, $481 = 0, $482 = 0, $491 = 0, $494 = 0, $495 = 0, $498 = 0, $505 = 0, $508 = 0, $horiz_space_4_i = 0, $527 = 0, $537 = 0, $545 = 0, $_019_i = 0, $_018_i = 0, $546 = 0, $547 = 0, $551 = 0, $559 = 0, $_pre_phi64 = 0, $563 = 0, $_0_i139 = 0, $574 = 0, $expbuf_0 = 0, $out_p_0 = 0, $589 = 0, $out_p_2 = 0, $out_p_3_ph = 0, $cur_out_3_ph = 0, $cur_out_3_us = 0, $610 = 0, $611 = 0, $614 = 0, $cur_out_4_us = 0, $cur_out_5_us = 0, $cur_out_3 = 0, $620 = 0, $621 = 0, $_lcssa11 = 0, $_lcssa = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $line_col = sp | 0;
 $_01 = $line_col | 0;
 HEAP32[$_01 >> 2] = $line_col_0;
 $_1 = $line_col + 4 | 0;
 HEAP32[$_1 >> 2] = $line_col_1;
 $1 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $2 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $cmp_i = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $3 = HEAP32[89594] | 0;
 if (($3 & 4 | 0) == 0) {
  $9 = $3;
 } else {
  _dump_a_def(13200, $defp, 0, 1, HEAP32[89996] | 0);
  _dump_unget(13200);
  $9 = HEAP32[89594] | 0;
 }
 if (($9 & 8 | 0) != 0 & (HEAP32[89684] | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 13048, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $defp + 25, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 $_pre59 = $defp + 4 | 0;
 do {
  if ((HEAP32[22292] | 0) == 0) {
   $m_inf_0 = 0;
   $m_num_0 = 0;
   $cur_out_0 = $out;
   $86 = 0;
  } else {
   if ((HEAP16[$_pre59 >> 1] | 0) == -769) {
    $m_inf_0 = 0;
    $m_num_0 = 0;
    $cur_out_0 = $out;
    $86 = 0;
    break;
   }
   $25 = HEAP32[89618] | 0;
   if (($25 | 0) > 4094) {
    _cerror(12936, $defp + 25 | 0, 0, 0);
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   }
   $30 = HEAP32[89606] | 0;
   if (($25 | 0) < ($30 - 1 | 0)) {
    $46 = $25;
   } else {
    $39 = _xrealloc(HEAP32[89620] | 0, $30 * 72 | 0) | 0;
    HEAP32[89620] = $39;
    _memset($39 + ((HEAP32[89606] | 0) * 36 | 0) | 0, 0, $30 * 36 | 0 | 0) | 0;
    HEAP32[89606] = HEAP32[89606] << 1;
    $46 = HEAP32[89618] | 0;
   }
   $47 = $46 + 1 | 0;
   HEAP32[89618] = $47;
   HEAP8[$out] = 24;
   HEAP8[$out + 1 | 0] = 1;
   HEAP8[$out + 2 | 0] = (($47 | 0) / 255 | 0) + 1;
   $57 = $out + 4 | 0;
   HEAP8[$out + 3 | 0] = (($47 | 0) % 255 | 0) + 1;
   HEAP8[$57] = 0;
   $58 = HEAP32[89620] | 0;
   $59 = $58 + ($47 * 36 | 0) | 0;
   HEAP32[$59 >> 2] = $defp;
   HEAP32[$58 + ($47 * 36 | 0) + 8 >> 2] = 0;
   if ((HEAP32[$_01 >> 2] | 0) == 0) {
    HEAP32[$58 + ($47 * 36 | 0) + 16 >> 2] = 0;
    HEAP32[$58 + ($47 * 36 | 0) + 20 >> 2] = 0;
   } else {
    _get_src_location($line_col) | 0;
    HEAP32[$58 + ($47 * 36 | 0) + 16 >> 2] = HEAP32[$_01 >> 2];
    HEAP32[$58 + ($47 * 36 | 0) + 20 >> 2] = HEAP32[$_1 >> 2];
   }
   HEAP32[$58 + ($47 * 36 | 0) + 32 >> 2] = 0;
   HEAP32[$58 + ($47 * 36 | 0) + 4 >> 2] = 0;
   if (($46 | 0) > 0) {
    $77 = HEAP32[89620] | 0;
    $num_029 = 1;
    $recurs_030 = 0;
    while (1) {
     $_recurs_0 = ((HEAP32[$77 + ($num_029 * 36 | 0) >> 2] | 0) == ($defp | 0)) + $recurs_030 | 0;
     $83 = $num_029 + 1 | 0;
     if (($83 | 0) < ($47 | 0)) {
      $num_029 = $83;
      $recurs_030 = $_recurs_0;
     } else {
      $recurs_0_lcssa = $_recurs_0;
      break;
     }
    }
   } else {
    $recurs_0_lcssa = 0;
   }
   HEAP32[$58 + ($47 * 36 | 0) + 12 >> 2] = $recurs_0_lcssa;
   $m_inf_0 = $59;
   $m_num_0 = $47;
   $cur_out_0 = $57;
   $86 = 1;
  }
 } while (0);
 $87 = HEAP16[$_pre59 >> 1] | 0;
 L27 : do {
  if ($87 << 16 >> 16 == -769) {
   $163 = 1;
   label = 41;
  } else {
   $90 = $87 << 16 >> 16;
   $91 = $90 & -769;
   if (($91 | 0) >= -774) {
    do {
     if (($91 | 0) == -771 & (HEAP32[592] | 0) != 0) {
      if ((HEAP32[4] & 1 | 0) == 0) {
       break;
      }
      _cwarn(12800, $defp + 25 | 0, 0, 0);
      $arglist_0 = 0;
      $205 = -771;
      break L27;
     }
    } while (0);
    if (($91 | 0) > -1) {
     $163 = $91;
     label = 41;
     break;
    } else {
     $arglist_0 = 0;
     $205 = $91;
     break;
    }
   }
   L36 : do {
    if (($90 | 0) == (-775 | 0)) {
     $96 = HEAP32[23332] | 0;
     do {
      if (($96 | 0) > (HEAP32[591] | 0) | ($96 | 0) < 1) {
       if ((HEAP32[4] & 1 | 0) == 0) {
        $112 = $96;
        break;
       }
       do {
        if (($defp | 0) != 0) {
         $107 = $defp + 25 | 0;
         if (($107 | 0) == (HEAP32[89614] | 0)) {
          break;
         }
         _expanding($107, 0);
        }
       } while (0);
       _cwarn(10304, 0, $96, 0);
       $112 = HEAP32[23332] | 0;
      } else {
       $112 = $96;
      }
     } while (0);
     _sprintf(HEAP32[$defp + 12 >> 2] | 0, 10160, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $112, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $_0_i = $defp;
    } else if (($90 | 0) == (-776 | 0)) {
     $file_0_in_i = 358672;
     while (1) {
      $file_0_i = HEAP32[$file_0_in_i >> 2] | 0;
      if (($file_0_i | 0) == 0) {
       $_0_i = $defp;
       break L36;
      }
      if ((HEAP32[$file_0_i + 8 >> 2] | 0) == 0) {
       $file_0_in_i = $file_0_i + 16 | 0;
      } else {
       break;
      }
     }
     _sprintf(22344, 9976, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$file_0_i + 48 >> 2], tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     if ((_strcmp(22344, HEAP32[$defp + 12 >> 2] | 0) | 0) == 0) {
      $_0_i = $defp;
      break;
     }
     HEAP16[$_pre59 >> 1] = -770;
     $132 = _look_prev($defp + 25 | 0, $cmp_i) | 0;
     $_0_i = _install_macro(9768, -776, 368664, 22344, $132, HEAP32[$cmp_i >> 2] | 0, 0) | 0;
    } else {
     $_0_i = $defp;
    }
   } while (0);
   if ((HEAP32[682] | 0) == 3) {
    HEAP8[$cur_out_0] = 31;
    $141 = _stpcpy($cur_out_0 + 1 | 0, HEAP32[$_0_i + 12 >> 2] | 0) | 0;
    $142 = $141 + 1 | 0;
    HEAP8[$141] = 31;
    HEAP8[$142] = 0;
    $cur_out_1 = $142;
   } else {
    $cur_out_1 = _stpcpy($cur_out_0 | 0, HEAP32[$_0_i + 12 >> 2] | 0) | 0;
   }
   if (!$86) {
    $_0 = $cur_out_1;
    STACKTOP = sp;
    return $_0 | 0;
   }
   HEAP32[$m_inf_0 >> 2] = $_0_i;
   $_0 = _close_macro_inf($cur_out_1, $m_num_0, $in_src_n) | 0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 do {
  if ((label | 0) == 41) {
   _squeeze_ws(0, 0, 0) | 0;
   $167 = _xmalloc(($163 << 2) + 4 | 0) | 0;
   $168 = $167;
   HEAP32[$168 >> 2] = _xmalloc(264192) | 0;
   $170 = _collect_args($defp, $168, $m_num_0) | 0;
   if (($170 | 0) == -255) {
    _free(HEAP32[$168 >> 2] | 0);
    _free($167);
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   }
   if ($86) {
    HEAP32[$m_inf_0 + 4 >> 2] = HEAP32[$168 >> 2];
    HEAP32[$m_inf_0 + 8 >> 2] = $170;
   }
   if ((HEAP32[682] | 0) != 3) {
    $arglist_0 = $168;
    $205 = $163;
    break;
   }
   $183 = ($outer | 0) != 0;
   if ((HEAP32[89668] | 0) == ($rt_file | 0) | $183 ^ 1) {
    $arglist_0 = $168;
    $205 = $163;
    break;
   }
   if ((HEAP32[91374] | 0) == 0) {
    HEAP32[93388 + ((HEAP32[23344] | 0) - 1 << 3) >> 2] = 2;
    $arglist_0 = $168;
    $205 = $163;
    break;
   }
   if (($outer | 0) != 0) {
    HEAP32[93384 + ((HEAP32[23344] | 0) - 1 << 3) >> 2] = 0;
   }
   if ((HEAP32[89594] & 4 | 0) == 0) {
    $arglist_0 = $168;
    $205 = $163;
    break;
   }
   _dump_string(12640, $183 ? $outer + 25 | 0 : 12456);
   $arglist_0 = $168;
   $205 = $163;
  }
 } while (0);
 $206 = _xmalloc(263168) | 0;
 if ((HEAP32[89594] & 4 | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12400, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $defp + 25, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _dump_string(12312, HEAP32[$defp + 12 >> 2] | 0);
 }
 $217 = $206 + 262144 | 0;
 HEAP32[$2 >> 2] = $206;
 if ((HEAP32[682] | 0) == 9) {
  $file_0_ph_i = _unget_string(HEAP32[$defp + 12 >> 2] | 0, $defp + 25 | 0) | 0;
 } else {
  HEAP32[$2 >> 2] = $206 + 1;
  HEAP8[$206] = 31;
  HEAP32[5584] = 22344;
  $230 = _stpcpy(22344, HEAP32[$defp + 12 >> 2] | 0) | 0;
  HEAP32[5584] = $230 + 1;
  HEAP8[$230] = 31;
  HEAP8[HEAP32[5584] | 0] = 0;
  $file_0_ph_i = _unget_string(22344, $defp + 25 | 0) | 0;
 }
 $236 = HEAP32[2] | 0;
 $237 = ($defp | 0) == 0;
 $238 = $defp + 25 | 0;
 $horiz_space_0_ph_i = 0;
 $_ph_i = 0;
 L86 : while (1) {
  L88 : while (1) {
   $240 = _get_ch() | 0;
   if (($file_0_ph_i | 0) != (HEAP32[89668] | 0)) {
    break L86;
   }
   switch ($240 | 0) {
   case 29:
    {
     label = 62;
     break L88;
     break;
    }
   case 30:
    {
     label = 63;
     break L88;
     break;
    }
   case 127:
    {
     label = 137;
     break L88;
     break;
    }
   case 31:
   case 32:
   case 9:
    {
     break;
    }
   default:
    {
     label = 140;
     break L88;
    }
   }
   $498 = HEAP32[$2 >> 2] | 0;
   if (($498 - 1 | 0) != ($horiz_space_0_ph_i | 0)) {
    label = 139;
    break;
   }
  }
  if ((label | 0) == 62) {
   label = 0;
   _skip_ws() | 0;
   $247 = (_get_ch() | 0) - 1 | 0;
   $248 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = _stringize($defp, HEAP32[$arglist_0 + ($247 << 2) >> 2] | 0, $248) | 0;
   $horiz_space_4_i = 0;
   $508 = $248;
  } else if ((label | 0) == 63) {
   label = 0;
   $253 = HEAP8[$_ph_i] | 0;
   if (($253 - 25 & 255) >>> 0 < 2 >>> 0) {
    if (($horiz_space_0_ph_i | 0) == ((HEAP32[$2 >> 2] | 0) - 1 | 0)) {
     HEAP32[$2 >> 2] = $horiz_space_0_ph_i;
     HEAP8[$horiz_space_0_ph_i] = 0;
     $horiz_space_1_i = 0;
     $260 = HEAP8[$_ph_i] | 0;
    } else {
     $horiz_space_1_i = $horiz_space_0_ph_i;
     $260 = $253;
    }
    $__i = $260 << 24 >> 24 == 26 & (HEAP32[22292] | 0) != 0 ? 3 : 1;
    $264 = $_ph_i + $__i | 0;
    _memmove($_ph_i | 0, $264 | 0, _strlen($264 | 0) | 0) | 0;
    $268 = (HEAP32[$2 >> 2] | 0) + (-$__i | 0) | 0;
    HEAP32[$2 >> 2] = $268;
    HEAP8[$268] = 0;
    $horiz_space_2_i = $horiz_space_1_i;
   } else {
    $horiz_space_2_i = $horiz_space_0_ph_i;
   }
   $270 = HEAP32[$2 >> 2] | 0;
   if (($horiz_space_2_i | 0) == ($270 - 1 | 0)) {
    HEAP32[$2 >> 2] = $horiz_space_2_i;
    HEAP8[$horiz_space_2_i] = 0;
    $horiz_space_3_i = 0;
    $275 = HEAP32[$2 >> 2] | 0;
   } else {
    $horiz_space_3_i = $horiz_space_2_i;
    $275 = $270;
   }
   HEAP32[$1 >> 2] = $275;
   do {
    if ((HEAP8[$_ph_i] | 0) == 127) {
     $284 = HEAP32[$arglist_0 + ((HEAPU8[$_ph_i + 1 | 0] | 0) - 1 << 2) >> 2] | 0;
     HEAP32[$1 >> 2] = $_ph_i;
     if ((HEAP32[22292] | 0) == 0) {
      $argp_0_i_i = $284;
     } else {
      $argp_0_i_i = _remove_magics($284, 1) | 0;
     }
     $290 = HEAP32[682] | 0;
     do {
      if (($290 | 0) == 9) {
       if ((HEAP8[$argp_0_i_i] | 0) == 0) {
        label = 76;
        break;
       }
       $300 = _unget_string($argp_0_i_i, 0) | 0;
       $301 = _get_ch() | 0;
       if (($300 | 0) == (HEAP32[89668] | 0)) {
        $304 = $301;
        while (1) {
         $305 = HEAP32[$1 >> 2] | 0;
         _scan_token($304, $1, $217) | 0;
         $307 = _get_ch() | 0;
         if (($300 | 0) == (HEAP32[89668] | 0)) {
          $304 = $307;
         } else {
          $prev_token_0_lcssa_i_i = $305;
          break;
         }
        }
       } else {
        $prev_token_0_lcssa_i_i = $_ph_i;
       }
       _unget_ch();
       $prev_token_2_i_i = $prev_token_0_lcssa_i_i;
      } else if (($290 | 0) == 3) {
       if ((HEAP8[$argp_0_i_i] | 0) == 28) {
        label = 76;
        break;
       }
       _unget_string($argp_0_i_i, 0) | 0;
       label = 81;
      } else {
       _unget_string($argp_0_i_i, 0) | 0;
       label = 81;
      }
     } while (0);
     if ((label | 0) == 76) {
      label = 0;
      HEAP8[HEAP32[$1 >> 2] | 0] = 0;
      $prev_token_3_i_i = $_ph_i;
      break;
     }
     do {
      if ((label | 0) == 81) {
       label = 0;
       if ((HEAP32[22292] | 0) != 0) {
        _free($argp_0_i_i);
       }
       $314 = _get_ch() | 0;
       if (($314 | 0) == 28) {
        $prev_prev_token_0_lcssa_i_i = 0;
        $prev_token_1_lcssa_i_i = $_ph_i;
       } else {
        $prev_token_165_i_i = $_ph_i;
        $316 = $314;
        while (1) {
         $317 = HEAP32[$1 >> 2] | 0;
         _scan_token($316, $1, $217) | 0;
         $319 = _get_ch() | 0;
         if (($319 | 0) == 28) {
          $prev_prev_token_0_lcssa_i_i = $prev_token_165_i_i;
          $prev_token_1_lcssa_i_i = $317;
          break;
         } else {
          $prev_token_165_i_i = $317;
          $316 = $319;
         }
        }
       }
       if ((HEAP8[$prev_token_1_lcssa_i_i] | 0) != 31) {
        $prev_token_2_i_i = $prev_token_1_lcssa_i_i;
        break;
       }
       HEAP32[$1 >> 2] = $prev_token_1_lcssa_i_i;
       $prev_token_2_i_i = $prev_prev_token_0_lcssa_i_i;
      }
     } while (0);
     $325 = HEAP8[$prev_token_2_i_i] | 0;
     if ($325 << 24 >> 24 != 25) {
      if (!((HEAP32[682] | 0) == 3 & $325 << 24 >> 24 == 26)) {
       $prev_token_3_i_i = $prev_token_2_i_i;
       break;
      }
     }
     if ((HEAP32[22292] | 0) == 0) {
      $len_0_i_i = 1;
     } else {
      $len_0_i_i = $325 << 24 >> 24 == 26 ? 3 : 1;
     }
     $339 = (HEAP32[$1 >> 2] | 0) + (-$len_0_i_i | 0) | 0;
     HEAP32[$1 >> 2] = $339;
     _memmove($prev_token_2_i_i | 0, $prev_token_2_i_i + $len_0_i_i | 0, $339 - $prev_token_2_i_i | 0) | 0;
     $prev_token_3_i_i = $prev_token_2_i_i;
    } else {
     $prev_token_3_i_i = $_ph_i;
    }
   } while (0);
   $344 = _skip_ws() | 0;
   do {
    if (($344 | 0) == 29) {
     _skip_ws() | 0;
     $350 = HEAP32[$arglist_0 + ((_get_ch() | 0) - 1 << 2) >> 2] | 0;
     HEAP32[$1 >> 2] = _stringize($defp, $350, HEAP32[$1 >> 2] | 0) | 0;
     $in_arg_0_i_i = 0;
    } else if (($344 | 0) == 127) {
     $357 = HEAP32[$arglist_0 + ((_get_ch() | 0) - 1 << 2) >> 2] | 0;
     if ((HEAP32[22292] | 0) == 0) {
      $argp_1_i_i = $357;
     } else {
      $argp_1_i_i = _remove_magics($357, 0) | 0;
     }
     $363 = HEAP32[682] | 0;
     if (($363 | 0) == 9) {
      if ((HEAP8[$argp_1_i_i] | 0) == 0) {
       label = 99;
      }
     } else if (($363 | 0) == 3) {
      if ((HEAP8[$argp_1_i_i] | 0) == 28) {
       label = 99;
      }
     }
     if ((label | 0) == 99) {
      label = 0;
      HEAP8[HEAP32[$1 >> 2] | 0] = 0;
      $in_arg_0_i_i = 0;
      break;
     }
     _unget_string($argp_1_i_i, 0) | 0;
     if ((HEAP32[22292] | 0) != 0) {
      _free($argp_1_i_i);
     }
     $377 = _get_ch() | 0;
     if (($377 | 0) == 25) {
      $c_0_i_i = _get_ch() | 0;
     } else if (($377 | 0) == 26) {
      if ((HEAP32[22292] | 0) != 0) {
       _get_ch() | 0;
       _get_ch() | 0;
      }
      $c_0_i_i = _get_ch() | 0;
     } else {
      $c_0_i_i = $377;
     }
     _scan_token($c_0_i_i, $1, $217) | 0;
     $in_arg_0_i_i = (HEAP8[HEAP32[HEAP32[89668] >> 2] | 0] | 0) != 0 | 0;
    } else if (($344 | 0) == 26) {
     if ((HEAP32[22292] | 0) == 0) {
      label = 110;
      break;
     }
     _get_ch() | 0;
     _get_ch() | 0;
     label = 110;
    } else if (($344 | 0) == 25) {
     label = 110;
    } else {
     $c_1_i_i = $344;
     label = 111;
    }
   } while (0);
   if ((label | 0) == 110) {
    label = 0;
    $c_1_i_i = _get_ch() | 0;
    label = 111;
   }
   if ((label | 0) == 111) {
    label = 0;
    _scan_token($c_1_i_i, $1, $217) | 0;
    $in_arg_0_i_i = 0;
   }
   if ((HEAP8[$prev_token_3_i_i] | 0) != 0) {
    _unget_string($prev_token_3_i_i, 0) | 0;
    $409 = _get_ch() | 0;
    HEAP32[(HEAP32[89668] | 0) + 8 >> 2] = -1;
    if ((HEAP32[89594] & 4 | 0) != 0) {
     _dump_string(10888, HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0);
    }
    HEAP32[5584] = 22344;
    _scan_token($409, 22336, $236) | 0;
    HEAP32[(HEAP32[89668] | 0) + 8 >> 2] = 0;
    if ((HEAP8[HEAP32[HEAP32[89668] >> 2] | 0] | 0) != 0) {
     do {
      if ((HEAP32[89550] | 0) == 0) {
       if (!($237 | ($238 | 0) == (HEAP32[89614] | 0))) {
        _expanding($238, 0);
       }
       _cerror(11032, $prev_token_3_i_i, 0, 0);
      } else {
       if ((HEAP32[4] & 2 | 0) == 0) {
        break;
       }
       if (!($237 | ($238 | 0) == (HEAP32[89614] | 0))) {
        _expanding($238, 0);
       }
       _cwarn(11032, $prev_token_3_i_i, 0, 0);
      }
     } while (0);
     $445 = HEAP32[89668] | 0;
     $446 = HEAP32[$445 >> 2] | 0;
     HEAP32[$445 >> 2] = $446 + (_strlen($446 | 0) | 0);
    }
    _get_ch() | 0;
    _unget_ch();
   }
   if (!((HEAP32[682] | 0) != 3 | (HEAP32[89550] | 0) != 0)) {
    $457 = HEAP32[$1 >> 2] | 0;
    HEAP32[$1 >> 2] = $457 + 1;
    HEAP8[$457] = 31;
    HEAP8[HEAP32[$1 >> 2] | 0] = 0;
   }
   L191 : do {
    if (($in_arg_0_i_i | 0) == 0) {
     $prev_token_6_i_i = $prev_token_3_i_i;
    } else {
     if ((HEAP32[682] | 0) == 9) {
      $466 = HEAP32[89668] | 0;
      $467 = _get_ch() | 0;
      if (($466 | 0) == (HEAP32[89668] | 0)) {
       $470 = $467;
       while (1) {
        $471 = HEAP32[$1 >> 2] | 0;
        _scan_token($470, $1, $217) | 0;
        $473 = _get_ch() | 0;
        if (($466 | 0) == (HEAP32[89668] | 0)) {
         $470 = $473;
        } else {
         $prev_token_4_lcssa_i_i = $471;
         break;
        }
       }
      } else {
       $prev_token_4_lcssa_i_i = $prev_token_3_i_i;
      }
      _unget_ch();
      $prev_token_6_i_i = $prev_token_4_lcssa_i_i;
      break;
     } else {
      $prev_token_5_ph_i_i = $prev_token_3_i_i;
      while (1) {
       while (1) {
        $477 = _get_ch() | 0;
        if (($477 | 0) == 28) {
         $prev_token_6_i_i = $prev_token_5_ph_i_i;
         break L191;
        } else if (($477 | 0) != 31) {
         break;
        }
       }
       $479 = HEAP32[$1 >> 2] | 0;
       _scan_token($477, $1, $217) | 0;
       $prev_token_5_ph_i_i = $479;
      }
     }
    }
   } while (0);
   $481 = HEAP32[$1 >> 2] | 0;
   HEAP32[$2 >> 2] = $481;
   $482 = $481 - 1 | 0;
   $horiz_space_4_i = (HEAP16[(HEAP32[91636] | 0) + (HEAPU8[$482] << 1) >> 1] & 64) == 0 ? $horiz_space_3_i : $482;
   $508 = $prev_token_6_i_i;
  } else if ((label | 0) == 137) {
   label = 0;
   $491 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $491 + 1;
   HEAP8[$491] = 127;
   $494 = (_get_ch() | 0) & 255;
   $495 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $495 + 1;
   HEAP8[$495] = $494;
   $horiz_space_4_i = $horiz_space_0_ph_i;
   $508 = $491;
  } else if ((label | 0) == 139) {
   label = 0;
   HEAP32[$2 >> 2] = $498 + 1;
   HEAP8[$498] = $240;
   $horiz_space_4_i = $498;
   $508 = $_ph_i;
  } else if ((label | 0) == 140) {
   label = 0;
   $505 = HEAP32[$2 >> 2] | 0;
   _scan_token($240, $2, $217) | 0;
   $horiz_space_4_i = $horiz_space_0_ph_i;
   $508 = $505;
  }
  HEAP8[HEAP32[$2 >> 2] | 0] = 0;
  if ((HEAP32[$2 >> 2] | 0) >>> 0 < $217 >>> 0) {
   $horiz_space_0_ph_i = $horiz_space_4_i;
   $_ph_i = $508;
  } else {
   label = 142;
   break;
  }
 }
 if ((label | 0) == 142) {
  if (!($237 | ($238 | 0) == (HEAP32[89614] | 0))) {
   _expanding($238, 0);
  }
  _cerror(15464, $238, 0, $206);
  if (($205 | 0) > -1) {
   if (!$86) {
    _free(HEAP32[$arglist_0 >> 2] | 0);
   }
   _free($arglist_0);
  }
  _free($206);
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 HEAP8[HEAP32[$2 >> 2] | 0] = 0;
 _unget_ch();
 $527 = _xrealloc($206, (_strlen($206 | 0) | 0) + 1 | 0) | 0;
 if ((HEAP32[89594] & 4 | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12400, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $238, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _dump_string(12232, $527);
 }
 do {
  if (($205 | 0) > 0) {
   $537 = _xmalloc(263168) | 0;
   if ((HEAP32[89594] & 4 | 0) != 0) {
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12400, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $238, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    _dump_string(12144, $527);
   }
   $545 = $537 + 262144 | 0;
   HEAP8[$537] = 0;
   $_018_i = $527;
   $_019_i = $537;
   while (1) {
    $546 = $_018_i + 1 | 0;
    $547 = HEAP8[$_018_i] | 0;
    if (($547 << 24 >> 24 | 0) == 0) {
     label = 161;
     break;
    } else if (($547 << 24 >> 24 | 0) != 127) {
     HEAP8[$_019_i] = $547;
     $_018_i = $546;
     $_019_i = $_019_i + 1 | 0;
     continue;
    }
    $551 = HEAPU8[$546] | 0;
    if ((HEAP32[89594] & 4 | 0) == 0) {
     $_pre_phi64 = $arglist_0 + ($551 - 1 << 2) | 0;
    } else {
     FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 11176, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $551, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $559 = $arglist_0 + ($551 - 1 << 2) | 0;
     _dump_string(0, HEAP32[$559 >> 2] | 0);
     $_pre_phi64 = $559;
    }
    $563 = _rescan(0, HEAP32[$_pre_phi64 >> 2] | 0, $_019_i, $545) | 0;
    if (($563 | 0) == 0) {
     $_0_i139 = 0;
     break;
    } else {
     $_018_i = $_018_i + 2 | 0;
     $_019_i = $563;
    }
   }
   if ((label | 0) == 161) {
    HEAP8[$_019_i] = 0;
    $_0_i139 = $_019_i;
   }
   if (!$86) {
    _free(HEAP32[$arglist_0 >> 2] | 0);
   }
   _free($arglist_0);
   _free($527);
   $574 = _xrealloc($537, (_strlen($537 | 0) | 0) + 1 | 0) | 0;
   if ((HEAP32[89594] & 4 | 0) == 0) {
    $out_p_0 = $_0_i139;
    $expbuf_0 = $574;
    break;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12400, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $238, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   _dump_string(12088, $574);
   $out_p_0 = $_0_i139;
   $expbuf_0 = $574;
  } else {
   if (!(($205 | 0) != 0 | $86)) {
    _free(HEAP32[$arglist_0 >> 2] | 0);
   }
   _free($arglist_0);
   $out_p_0 = $527;
   $expbuf_0 = $527;
  }
 } while (0);
 do {
  if (($out_p_0 | 0) == 0) {
   label = 173;
  } else {
   $589 = _rescan($defp, $expbuf_0, $cur_out_0, $out_end) | 0;
   if (($589 | 0) == 0) {
    label = 173;
    break;
   }
   if ((HEAP16[$_pre59 >> 1] | 0) == -769) {
    HEAP8[6112] = 1;
   }
   _free($expbuf_0);
   if (!$86) {
    $out_p_2 = $589;
    break;
   }
   $out_p_2 = _close_macro_inf($589, $m_num_0, $in_src_n) | 0;
  }
 } while (0);
 if ((label | 0) == 173) {
  _free($expbuf_0);
  $out_p_2 = 0;
 }
 if ((HEAP32[89594] & 4 | 0) != 0) {
  _dump_string(12e3, $out);
 }
 if ((HEAP32[22292] | 0) == 0) {
  $_0 = $out_p_2;
  STACKTOP = sp;
  return $_0 | 0;
 }
 if ((HEAP16[$_pre59 >> 1] | 0) == -769) {
  $cur_out_3_ph = $out;
  $out_p_3_ph = $out;
 } else {
  $_0 = $out_p_2;
  STACKTOP = sp;
  return $_0 | 0;
 }
 L269 : while (1) {
  L271 : do {
   if ((HEAP32[89547] | 0) == 0) {
    $cur_out_3_us = $cur_out_3_ph;
    while (1) {
     $610 = $cur_out_3_us + 1 | 0;
     $611 = HEAP8[$cur_out_3_us] | 0;
     if (($611 << 24 >> 24 | 0) == 0) {
      break L269;
     } else if (($611 << 24 >> 24 | 0) != 24) {
      $_lcssa = $610;
      $_lcssa11 = $611;
      break L271;
     }
     $614 = HEAP8[$610] | 0;
     if (($614 | 0) == 3) {
      $cur_out_4_us = $cur_out_3_us + 2 | 0;
      label = 184;
     } else if (($614 | 0) == 1) {
      $cur_out_4_us = $610;
      label = 184;
     } else {
      $cur_out_5_us = $610;
     }
     if ((label | 0) == 184) {
      label = 0;
      $cur_out_5_us = $cur_out_4_us + 2 | 0;
     }
     $cur_out_3_us = $cur_out_5_us + 1 | 0;
    }
   } else {
    $cur_out_3 = $cur_out_3_ph;
    while (1) {
     $620 = $cur_out_3 + 1 | 0;
     $621 = HEAP8[$cur_out_3] | 0;
     if (($621 << 24 >> 24 | 0) == 0) {
      break L269;
     } else if (($621 << 24 >> 24 | 0) != 24) {
      $_lcssa = $620;
      $_lcssa11 = $621;
      break L271;
     }
     $cur_out_3 = (((HEAP8[$620] | 0) - 3 | 0) >>> 0 < 2 >>> 0 ? $cur_out_3 + 2 | 0 : $620) + 3 | 0;
    }
   }
  } while (0);
  HEAP8[$out_p_3_ph] = $_lcssa11;
  $cur_out_3_ph = $_lcssa;
  $out_p_3_ph = $out_p_3_ph + 1 | 0;
 }
 HEAP8[$out_p_3_ph] = 0;
 $_0 = $out_p_3_ph;
 STACKTOP = sp;
 return $_0 | 0;
}
function _expand_prestd($defp, $out, $out_end, $line_col, $pragma_op) {
 $defp = $defp | 0;
 $out = $out | 0;
 $out_end = $out_end | 0;
 $line_col = $line_col | 0;
 $pragma_op = $pragma_op | 0;
 var $cp_i = 0, $macrobuf = 0, $1 = 0, $2 = 0, $6 = 0, $8 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $29 = 0, $mp_056 = 0, $mp_1 = 0, $c_0 = 0, $36 = 0, $37 = 0, $38 = 0, $_0_i = 0, $45 = 0, $48 = 0, $58 = 0, $61 = 0, $66 = 0, $67 = 0, $70 = 0, $77 = 0, $82 = 0, $83 = 0, $88 = 0, $91 = 0, $92 = 0, $95 = 0, $96 = 0, $97 = 0, $in_p_0_i_i_i = 0, $out_p_0_i_i_i = 0, $99 = 0, $100 = 0, $106 = 0, $107 = 0, $111 = 0, $112 = 0, $in_p_1_i_i_i = 0, $out_p_1_i_i_i = 0, $118 = 0, $119 = 0, $121 = 0, $out_p_2_i_i_i = 0, $128 = 0, $147 = 0, $148 = 0, $151 = 0, $mp_2 = 0, $169 = 0, $mp_3 = 0, $mp_429 = 0, $172 = 0, $173 = 0, $mp_4_lcssa = 0, $185 = 0, label = 0, setjmpLabel = 0, setjmpTable = 0, tempParam = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 263176 | 0;
 tempParam = $line_col;
 $line_col = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 HEAP32[$line_col >> 2] = HEAP32[tempParam >> 2];
 HEAP32[$line_col + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
 label = 1;
 setjmpLabel = 0;
 setjmpTable = STACKTOP;
 STACKTOP = STACKTOP + 168 | 0;
 HEAP32[setjmpTable >> 2] = 0;
 while (1) switch (label | 0) {
 case 1:
  $cp_i = sp | 0;
  $macrobuf = sp + 8 | 0;
  $1 = $macrobuf + 262144 | 0;
  $2 = $macrobuf | 0;
  HEAP32[89616] = HEAP32[23332];
  invoke_iii(2, 358776, 358776) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89614] = $defp + 25;
  HEAP32[23344] = 0;
  $6 = _saveSetjmp(358504, label, setjmpTable) | 0;
  label = 66;
  break;
 case 66:
  if (($6 | 0) == 1) {
   label = 4;
   break;
  } else {
   label = 2;
   break;
  }
 case 2:
  $8 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($8 | 0) == 0) {
   $mp_3 = $2;
   label = 58;
   break;
  } else {
   label = 3;
   break;
  }
 case 3:
  $mp_056 = $2;
  $29 = $8;
  label = 9;
  break;
 case 4:
  $12 = HEAP32[89668] | 0;
  if (($12 | 0) == 0) {
   label = 8;
   break;
  } else {
   label = 5;
   break;
  }
 case 5:
  if ((HEAP32[$12 + 8 >> 2] | 0) == 0) {
   $18 = $12;
   label = 6;
   break;
  } else {
   label = 8;
   break;
  }
 case 6:
  $19 = $18 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = invoke_ii(2, $20 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[$19 >> 2] = $20 + $21;
  invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $24 = HEAP32[89668] | 0;
  if ((HEAP32[$24 + 8 >> 2] | 0) == 0) {
   $18 = $24;
   label = 6;
   break;
  } else {
   label = 7;
   break;
  }
 case 7:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 8;
  break;
 case 8:
  HEAP8[$2] = 0;
  HEAP32[89616] = -1;
  label = 63;
  break;
 case 9:
  if ((HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) == 0) {
   $c_0 = $29;
   $mp_1 = $mp_056;
   label = 10;
   break;
  } else {
   $mp_3 = $mp_056;
   label = 58;
   break;
  }
 case 10:
  if (($c_0 | 0) == 32 | ($c_0 | 0) == 9) {
   label = 11;
   break;
  } else {
   $_0_i = $c_0;
   label = 13;
   break;
  }
 case 11:
  $36 = $mp_1 + 1 | 0;
  HEAP8[$mp_1] = $c_0;
  $37 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $38 = HEAP32[89668] | 0;
  if (($38 | 0) == 0) {
   $mp_3 = $36;
   label = 58;
   break;
  } else {
   label = 12;
   break;
  }
 case 12:
  if ((HEAP32[$38 + 8 >> 2] | 0) == 0) {
   $c_0 = $37;
   $mp_1 = $36;
   label = 10;
   break;
  } else {
   $mp_3 = $36;
   label = 58;
   break;
  }
 case 13:
  HEAP32[$cp_i >> 2] = $mp_1;
  $45 = invoke_iiii(8, $_0_i | 0, $cp_i | 0, $1 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($45 | 0) == 65) {
   label = 14;
   break;
  } else {
   label = 49;
   break;
  }
 case 14:
  $48 = invoke_ii(4, 358776) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($48 | 0) == 0) {
   label = 50;
   break;
  } else {
   label = 15;
   break;
  }
 case 15:
  if ((HEAP32[89594] & 4 | 0) == 0) {
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 case 16:
  invoke_viiiii(4, 13952, $48 | 0, 0, 1, HEAP32[89996] | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vi(6, 13952);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 17;
  break;
 case 17:
  $58 = (HEAP32[23344] | 0) + 1 | 0;
  HEAP32[23344] = $58;
  if (($58 | 0) > 255) {
   label = 18;
   break;
  } else {
   label = 21;
   break;
  }
 case 18:
  $61 = $48 + 25 | 0;
  if (($61 | 0) == (HEAP32[89614] | 0)) {
   label = 20;
   break;
  } else {
   label = 19;
   break;
  }
 case 19:
  invoke_vii(4, $61 | 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 20;
  break;
 case 20:
  invoke_viiii(6, 12728, $61 | 0, 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vii(6, 358504, 1);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  return 0;
 case 21:
  $66 = $48 + 4 | 0;
  $67 = HEAP16[$66 >> 1] | 0;
  if ((($67 << 16 >> 16) + 772 | 0) >>> 0 < 3 >>> 0) {
   $88 = $67;
   label = 30;
   break;
  } else {
   label = 22;
   break;
  }
 case 22:
  $70 = invoke_iiii(10, 0, 0, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($70 | 0) == 40) {
   label = 27;
   break;
  } else {
   label = 23;
   break;
  }
 case 23:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[4] & 8 | 0) == 0) {
   label = 50;
   break;
  } else {
   label = 24;
   break;
  }
 case 24:
  $77 = $48 + 25 | 0;
  if (($77 | 0) == (HEAP32[89614] | 0)) {
   label = 26;
   break;
  } else {
   label = 25;
   break;
  }
 case 25:
  invoke_vii(4, $77 | 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 26;
  break;
 case 26:
  invoke_viiii(2, 14584, $77 | 0, 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 50;
  break;
 case 27:
  $82 = invoke_ii(10, 264192) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[91904] = $82;
  $83 = invoke_iiii(12, $48 | 0, 367616, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($83 | 0) == -255) {
   label = 28;
   break;
  } else {
   label = 29;
   break;
  }
 case 28:
  invoke_vi(2, HEAP32[91904] | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vii(6, 358504, 1);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  return 0;
 case 29:
  $88 = HEAP16[$66 >> 1] | 0;
  label = 30;
  break;
 case 30:
  if ($88 << 16 >> 16 > 0) {
   label = 31;
   break;
  } else {
   label = 42;
   break;
  }
 case 31:
  $91 = $48 + 25 | 0;
  $92 = invoke_iiiiii(6, $91 | 0, 0, 0, 262145, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $95 = $92 + 52 | 0;
  $96 = HEAP32[$95 >> 2] | 0;
  $97 = $96 + 262144 | 0;
  $out_p_0_i_i_i = $96;
  $in_p_0_i_i_i = HEAP32[$48 + 12 >> 2] | 0;
  label = 32;
  break;
 case 32:
  $99 = $in_p_0_i_i_i + 1 | 0;
  $100 = HEAP8[$in_p_0_i_i_i] | 0;
  if (($100 << 24 >> 24 | 0) == 127) {
   label = 33;
   break;
  } else if (($100 << 24 >> 24 | 0) == 0) {
   label = 37;
   break;
  } else {
   label = 35;
   break;
  }
 case 33:
  $106 = HEAP32[367616 + ((HEAPU8[$99] | 0) - 1 << 2) >> 2] | 0;
  $107 = invoke_ii(2, $106 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ($97 >>> 0 > ($out_p_0_i_i_i + $107 | 0) >>> 0) {
   label = 34;
   break;
  } else {
   $out_p_2_i_i_i = $out_p_0_i_i_i;
   label = 39;
   break;
  }
 case 34:
  $111 = $in_p_0_i_i_i + 2 | 0;
  $112 = invoke_iii(12, $out_p_0_i_i_i | 0, $106 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $out_p_1_i_i_i = $112;
  $in_p_1_i_i_i = $111;
  label = 36;
  break;
 case 35:
  HEAP8[$out_p_0_i_i_i] = $100;
  $out_p_1_i_i_i = $out_p_0_i_i_i + 1 | 0;
  $in_p_1_i_i_i = $99;
  label = 36;
  break;
 case 36:
  if ($97 >>> 0 > $out_p_1_i_i_i >>> 0) {
   $out_p_0_i_i_i = $out_p_1_i_i_i;
   $in_p_0_i_i_i = $in_p_1_i_i_i;
   label = 32;
   break;
  } else {
   $out_p_2_i_i_i = $out_p_1_i_i_i;
   label = 39;
   break;
  }
 case 37:
  HEAP8[$out_p_0_i_i_i] = 0;
  $118 = HEAP32[$95 >> 2] | 0;
  $119 = invoke_ii(2, $118 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $121 = invoke_iii(4, $118 | 0, $119 + 1 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[$95 >> 2] = $121;
  HEAP32[$92 >> 2] = $121;
  if ((HEAP32[89594] & 4 | 0) == 0) {
   label = 43;
   break;
  } else {
   label = 38;
   break;
  }
 case 38:
  invoke_vii(8, 10104, $121 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 43;
  break;
 case 39:
  HEAP8[$out_p_2_i_i_i] = 0;
  $128 = HEAP32[$95 >> 2] | 0;
  if (($91 | 0) == (HEAP32[89614] | 0)) {
   label = 41;
   break;
  } else {
   label = 40;
   break;
  }
 case 40:
  invoke_vii(4, $91 | 0, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 41;
  break;
 case 41:
  invoke_viiii(6, 15464, $91 | 0, 0, $128 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vii(6, 358504, 1);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  return 0;
 case 42:
  invoke_iii(2, HEAP32[$48 + 12 >> 2] | 0, $48 + 25 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 43;
  break;
 case 43:
  if ((HEAP32[89594] & 4 | 0) == 0) {
   label = 45;
   break;
  } else {
   label = 44;
   break;
  }
 case 44:
  invoke_vi(6, 11752);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 45;
  break;
 case 45:
  if ((HEAP16[$66 >> 1] | 0) > -1) {
   label = 46;
   break;
  } else {
   label = 47;
   break;
  }
 case 46:
  invoke_vi(2, HEAP32[91904] | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 47;
  break;
 case 47:
  $147 = HEAP32[89668] | 0;
  $148 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($147 | 0) == (HEAP32[89668] | 0)) {
   $_0_i = $148;
   label = 13;
   break;
  } else {
   label = 48;
   break;
  }
 case 48:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $mp_2 = $mp_1;
  label = 53;
  break;
 case 49:
  switch ($45 | 0) {
  case 67:
  case 69:
  case 66:
  case 71:
   {
    label = 50;
    break;
   }
  case 73:
   {
    label = 51;
    break;
   }
  case 0:
   {
    $mp_2 = $mp_1;
    label = 53;
    break;
   }
  default:
   {
    label = 52;
    break;
   }
  }
  break;
 case 50:
  $151 = invoke_ii(2, $mp_1 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $mp_2 = $mp_1 + $151 | 0;
  label = 53;
  break;
 case 51:
  $mp_2 = (HEAP8[$mp_1] | 0) == 31 & (HEAP32[682] | 0) == 1 ? $mp_1 : $mp_1 + 1 | 0;
  label = 53;
  break;
 case 52:
  $mp_2 = $mp_1 + 1 | 0;
  label = 53;
  break;
 case 53:
  if ($1 >>> 0 > $mp_2 >>> 0) {
   label = 55;
   break;
  } else {
   label = 54;
   break;
  }
 case 54:
  HEAP8[$mp_2] = 0;
  invoke_viiii(6, 15464, HEAP32[89614] | 0, 0, $2 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vii(6, 358504, 1);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  return 0;
 case 55:
  if ((HEAP32[89594] & 64 | 0) == 0) {
   label = 57;
   break;
  } else {
   label = 56;
   break;
  }
 case 56:
  HEAP8[$mp_2] = 0;
  invoke_vii(8, 19040, $2 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 57;
  break;
 case 57:
  $169 = invoke_i(4) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($169 | 0) == 0) {
   $mp_3 = $mp_2;
   label = 58;
   break;
  } else {
   $mp_056 = $mp_2;
   $29 = $169;
   label = 9;
   break;
  }
 case 58:
  invoke_v(6);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ($2 >>> 0 < $mp_3 >>> 0) {
   $mp_429 = $mp_3;
   label = 59;
   break;
  } else {
   $mp_4_lcssa = $mp_3;
   label = 61;
   break;
  }
 case 59:
  $172 = $mp_429 - 1 | 0;
  $173 = HEAP8[$172] | 0;
  if (($173 << 24 >> 24 | 0) == 32 | ($173 << 24 >> 24 | 0) == 9) {
   label = 60;
   break;
  } else {
   $mp_4_lcssa = $mp_429;
   label = 61;
   break;
  }
 case 60:
  if ($2 >>> 0 < $172 >>> 0) {
   $mp_429 = $172;
   label = 59;
   break;
  } else {
   $mp_4_lcssa = $172;
   label = 61;
   break;
  }
 case 61:
  HEAP32[89616] = 0;
  HEAP8[$mp_4_lcssa] = 0;
  if (($mp_4_lcssa - $macrobuf | 0) > ($out_end - $out | 0)) {
   label = 62;
   break;
  } else {
   label = 63;
   break;
  }
 case 62:
  invoke_viiii(6, 15464, HEAP32[89614] | 0, 0, $2 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[89616] = -1;
  label = 63;
  break;
 case 63:
  $185 = invoke_iii(12, $out | 0, $2 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[89594] & 4 | 0) == 0) {
   label = 65;
   break;
  } else {
   label = 64;
   break;
  }
 case 64:
  invoke_vii(8, 20784, $out | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 65;
  break;
 case 65:
  HEAP32[89614] = 0;
  invoke_v(22);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[$pragma_op >> 2] = 0;
  STACKTOP = sp;
  return $185 | 0;
 case -1:
  if ((setjmpLabel | 0) == 1) {
   $6 = threwValue;
   label = 66;
  }
  __THREW__ = threwValue = 0;
  break;
 }
 return 0;
}
function _get_an_arg($c, $argpp, $arg_end, $seqp, $var_arg, $nargs, $locp, $m_num, $mgc_prefix) {
 $c = $c | 0;
 $argpp = $argpp | 0;
 $arg_end = $arg_end | 0;
 $seqp = $seqp | 0;
 $var_arg = $var_arg | 0;
 $nargs = $nargs | 0;
 $locp = $locp | 0;
 $m_num = $m_num | 0;
 $mgc_prefix = $mgc_prefix | 0;
 var $mac_id_i = 0, $arg_id_i = 0, $arg_loc_i = 0, $arg_end_magic_i = 0, $magic_i = 0, $n_paren = 0, $argp = 0, $s_line_col = 0, $tmpcast74 = 0, $e_line_col = 0, $tmpcast = 0, $mgc_seq = 0, $1 = 0, $7 = 0, $10 = 0, $11 = 0, $14 = 0, $23 = 0, $31$1 = 0, $34 = 0, $36 = 0, $41 = 0, $46 = 0, $50 = 0, $53 = 0, $60 = 0, $65 = 0, $66 = 0, $_pre_phi = 0, $trace_arg_0_ph = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $_not = 0, $paren_0 = 0, $num_paren_0 = 0, $_073 = 0, $78 = 0, $87 = 0, $88 = 0, $92 = 0, $_end_an_arg_0 = 0, $101 = 0, $114 = 0, $115 = 0, $117 = 0, $120 = 0, $121 = 0, $125 = 0, $126 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $145 = 0, $146 = 0, $149 = 0, $150 = 0, $172 = 0, $173 = 0, $181 = 0, $182 = 0, $190 = 0, $197 = 0, $221 = 0, $236 = 0, $paren_1 = 0, $end_an_arg_2 = 0, $num_paren_1 = 0, $num_paren_199 = 0, $paren_198 = 0, $244 = 0, $paren_198101 = 0, $num_paren_199100 = 0, $263 = 0, $264 = 0, $269 = 0, $271 = 0, $289 = 0, $293 = 0, $301 = 0, $306 = 0, $310 = 0, $313 = 0, $314 = 0, $316 = 0, $318 = 0, $magic_i_0_idx80 = 0, $320 = 0, $321 = 0, $mac_010_i = 0, $arg_09_i = 0, $buf_p_04_i = 0, $323 = 0, $327 = 0, $329 = 0, $buf_p_0_be_i = 0, $arg_0_be_i = 0, $mac_0_be_i = 0, $336 = 0, $337 = 0, $347 = 0, $352 = 0, $358 = 0, $373 = 0, $cur_edge_1_i = 0, $383 = 0, $to_be_edge_0_i = 0, $cur_edge_2_i = 0, $415 = 0, $417 = 0, $422 = 0, $428 = 0, $447 = 0, $449 = 0, $453 = 0, $456 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2464 | 0;
 $mac_id_i = sp | 0;
 $arg_id_i = sp + 512 | 0;
 $arg_loc_i = sp + 1280 | 0;
 $arg_end_magic_i = sp + 2304 | 0;
 $magic_i = sp + 2312 | 0;
 $n_paren = sp + 2320 | 0;
 $argp = sp + 2448 | 0;
 $s_line_col = sp + 2456 | 0;
 $tmpcast74 = $s_line_col;
 $e_line_col = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmpcast = $e_line_col;
 $mgc_seq = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $1 = HEAP32[$argpp >> 2] | 0;
 HEAP32[$argp >> 2] = $1;
 if ((HEAP32[22292] | 0) == 0) {
  $trace_arg_0_ph = 0;
  $_pre_phi = $mgc_seq;
 } else {
  do {
   if (($m_num | 0) == 0) {
    $65 = 0;
   } else {
    $7 = HEAP32[89668] | 0;
    $10 = (HEAP32[$7 + 8 >> 2] | 0) != 0;
    $11 = $10 & 1;
    if ($10) {
     $14 = $s_line_col;
     HEAP32[$14 >> 2] = HEAP32[23332];
     $23 = $tmpcast74 + 4 | 0;
     HEAP32[$23 >> 2] = (HEAP32[$7 >> 2] | 0) - 1 - (HEAP32[$7 + 52 >> 2] | 0);
     _get_src_location($tmpcast74) | 0;
     HEAP32[HEAP32[$locp >> 2] >> 2] = HEAP32[$14 >> 2];
     HEAP32[(HEAP32[$locp >> 2] | 0) + 4 >> 2] = HEAP32[$23 >> 2];
     $31$1 = HEAP32[$s_line_col + 4 >> 2] | 0;
     HEAP32[$e_line_col >> 2] = HEAP32[$s_line_col >> 2];
     HEAP32[$e_line_col + 4 >> 2] = $31$1;
     _memset($n_paren | 0, 0, 128) | 0;
     $34 = HEAP32[$argp >> 2] | 0;
    } else {
     $34 = $1;
    }
    HEAP32[$argp >> 2] = $34 + 1;
    HEAP8[$34] = 24;
    $36 = HEAP32[$argp >> 2] | 0;
    HEAP32[$argp >> 2] = $36 + 1;
    HEAP8[$36] = 3;
    $41 = HEAP32[$argp >> 2] | 0;
    HEAP32[$argp >> 2] = $41 + 1;
    HEAP8[$41] = (($m_num | 0) / 255 | 0) + 1;
    $46 = HEAP32[$argp >> 2] | 0;
    HEAP32[$argp >> 2] = $46 + 1;
    HEAP8[$46] = (($m_num | 0) % 255 | 0) + 1;
    $50 = HEAP32[$argp >> 2] | 0;
    HEAP32[$argp >> 2] = $50 + 1;
    HEAP8[$50] = $nargs + 1;
    $53 = HEAP32[$mgc_prefix >> 2] | 0;
    if (($53 | 0) == 0) {
     $65 = $11;
     break;
    }
    $60 = (HEAP32[$mgc_prefix + 4 >> 2] | 0) - $53 | 0;
    _memcpy(HEAP32[$argp >> 2] | 0, $53 | 0, $60) | 0;
    HEAP32[$argp >> 2] = (HEAP32[$argp >> 2] | 0) + $60;
    $65 = $11;
   }
  } while (0);
  $66 = $mgc_seq;
  _memset($66 | 0, 0, 12) | 0;
  $trace_arg_0_ph = $65;
  $_pre_phi = $66;
 }
 $67 = ($trace_arg_0_ph | 0) != 0;
 $68 = $s_line_col;
 $69 = $tmpcast74 + 4 | 0;
 $70 = $67 ? 3 : 1;
 $71 = $e_line_col;
 $72 = $tmpcast + 4 | 0;
 $_not = $67 ^ 1;
 $_073 = $c;
 $num_paren_0 = 0;
 $paren_0 = $var_arg;
 L12 : while (1) {
  if (($_073 | 0) == 10) {
   label = 11;
   break;
  } else if (($_073 | 0) == 28) {
   break;
  }
  if ($67) {
   HEAP32[$68 >> 2] = HEAP32[23332];
   $78 = HEAP32[89668] | 0;
   HEAP32[$69 >> 2] = (HEAP32[$78 >> 2] | 0) - 1 - (HEAP32[$78 + 52 >> 2] | 0);
  }
  $87 = HEAP32[$argp >> 2] | 0;
  $88 = _scan_token($_073, $argp, $arg_end) | 0;
  L18 : do {
   switch ($_073 | 0) {
   case 40:
    {
     $paren_198 = $paren_0 + 1 | 0;
     $num_paren_199 = $num_paren_0;
     label = 38;
     break;
    }
   case 41:
    {
     $92 = $paren_0 - 1 | 0;
     $_end_an_arg_0 = ($paren_0 | 0) == ($var_arg | 0) | 0;
     if (($num_paren_0 | 0) == 0 | $_not) {
      $num_paren_1 = $num_paren_0;
      $end_an_arg_2 = $_end_an_arg_0;
      $paren_1 = $92;
      label = 37;
      break L18;
     }
     if (($92 | 0) != (HEAP32[$n_paren + ($num_paren_0 << 3) >> 2] | 0)) {
      $num_paren_1 = $num_paren_0;
      $end_an_arg_2 = $_end_an_arg_0;
      $paren_1 = $92;
      label = 37;
      break L18;
     }
     $101 = HEAP32[$n_paren + ($num_paren_0 << 3) + 4 >> 2] | 0;
     HEAP32[(HEAP32[89680] | 0) + ($101 << 4) + 8 >> 2] = HEAP32[$68 >> 2];
     HEAP32[(HEAP32[89680] | 0) + ($101 << 4) + 12 >> 2] = (HEAP32[$69 >> 2] | 0) + 1;
     $num_paren_1 = $num_paren_0 - 1 | 0;
     $end_an_arg_2 = $_end_an_arg_0;
     $paren_1 = $92;
     label = 37;
     break;
    }
   case 44:
    {
     $num_paren_1 = $num_paren_0;
     $end_an_arg_2 = ($paren_0 | 0) == 0 | 0;
     $paren_1 = $paren_0;
     label = 37;
     break;
    }
   case 24:
    {
     $114 = (_get_ch() | 0) & 255;
     $115 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $115 + 1;
     HEAP8[$115] = $114;
     $117 = $114 << 24 >> 24;
     if (($117 | 0) == 3) {
      $120 = (_get_ch() | 0) & 255;
      $121 = HEAP32[$argp >> 2] | 0;
      HEAP32[$argp >> 2] = $121 + 1;
      HEAP8[$121] = $120;
      label = 22;
     } else if (($117 | 0) == 1) {
      label = 22;
     } else if (($117 | 0) == 4) {
      if ((HEAP32[89547] | 0) == 0) {
       $paren_198 = $paren_0;
       $num_paren_199 = $num_paren_0;
       label = 38;
       break L18;
      }
      $137 = (_get_ch() | 0) & 255;
      $138 = HEAP32[$argp >> 2] | 0;
      HEAP32[$argp >> 2] = $138 + 1;
      HEAP8[$138] = $137;
     } else if (($117 | 0) != 2) {
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     if ((label | 0) == 22) {
      label = 0;
      $125 = (_get_ch() | 0) & 255;
      $126 = HEAP32[$argp >> 2] | 0;
      HEAP32[$argp >> 2] = $126 + 1;
      HEAP8[$126] = $125;
      $129 = (_get_ch() | 0) & 255;
      $130 = HEAP32[$argp >> 2] | 0;
      HEAP32[$argp >> 2] = $130 + 1;
      HEAP8[$130] = $129;
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     if ((HEAP32[89547] | 0) == 0) {
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     $145 = (_get_ch() | 0) & 255;
     $146 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $146 + 1;
     HEAP8[$146] = $145;
     $149 = (_get_ch() | 0) & 255;
     $150 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $150 + 1;
     HEAP8[$150] = $149;
     $paren_198 = $paren_0;
     $num_paren_199 = $num_paren_0;
     label = 38;
     break;
    }
   case 0:
    {
     $_0 = 0;
     label = 88;
     break L12;
     break;
    }
   default:
    {
     if (!((HEAP32[682] | 0) == 3 & ($88 | 0) == 65 & ($_073 - 25 | 0) >>> 0 > 1 >>> 0)) {
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     if ((HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) == 0) {
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     _memmove($87 + $70 | 0, $87 | 0, (HEAP32[$argp >> 2] | 0) - $87 | 0) | 0;
     HEAP32[$argp >> 2] = (HEAP32[$argp >> 2] | 0) + $70;
     HEAP8[$87] = 26;
     if (!$67) {
      $num_paren_199100 = $num_paren_0;
      $paren_198101 = $paren_0;
      break L18;
     }
     $172 = _look_id($87 + 3 | 0) | 0;
     $173 = HEAP32[89678] | 0;
     if (($173 | 0) > 4094) {
      label = 31;
      break L12;
     }
     $181 = $173 + 1 | 0;
     HEAP32[89678] = $181;
     $182 = HEAP32[89610] | 0;
     if (($181 | 0) > ($182 | 0)) {
      $190 = _xrealloc(HEAP32[89680] | 0, $182 << 5) | 0;
      HEAP32[89680] = $190;
      _memset($190 + (HEAP32[89610] << 4) | 0, 0, $182 << 4 | 0) | 0;
      HEAP32[89610] = HEAP32[89610] << 1;
      $197 = HEAP32[89678] | 0;
     } else {
      $197 = $181;
     }
     HEAP8[$87 + 1 | 0] = (($197 | 0) / 255 | 0) + 1;
     HEAP8[$87 + 2 | 0] = ((HEAP32[89678] | 0) % 255 | 0) + 1;
     if (($172 | 0) == 0) {
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     HEAP32[(HEAP32[89680] | 0) + (HEAP32[89678] << 4) >> 2] = HEAP32[$68 >> 2];
     HEAP32[(HEAP32[89680] | 0) + (HEAP32[89678] << 4) + 4 >> 2] = HEAP32[$69 >> 2];
     HEAP32[(HEAP32[89680] | 0) + (HEAP32[89678] << 4) + 8 >> 2] = HEAP32[$68 >> 2];
     $221 = HEAP32[89668] | 0;
     HEAP32[(HEAP32[89680] | 0) + (HEAP32[89678] << 4) + 12 >> 2] = (HEAP32[$221 >> 2] | 0) - (HEAP32[$221 + 52 >> 2] | 0);
     if ((HEAP16[$172 + 4 >> 1] | 0) <= -1) {
      $paren_198 = $paren_0;
      $num_paren_199 = $num_paren_0;
      label = 38;
      break L18;
     }
     $236 = $num_paren_0 + 1 | 0;
     HEAP32[$n_paren + ($236 << 3) >> 2] = $paren_0;
     HEAP32[$n_paren + ($236 << 3) + 4 >> 2] = HEAP32[89678];
     $paren_198 = $paren_0;
     $num_paren_199 = $236;
     label = 38;
    }
   }
  } while (0);
  if ((label | 0) == 37) {
   label = 0;
   if (($end_an_arg_2 | 0) == 0) {
    $paren_198 = $paren_1;
    $num_paren_199 = $num_paren_1;
    label = 38;
   } else {
    label = 42;
    break;
   }
  }
  do {
   if ((label | 0) == 38) {
    label = 0;
    if (!$67) {
     $num_paren_199100 = $num_paren_199;
     $paren_198101 = $paren_198;
     break;
    }
    HEAP32[$71 >> 2] = HEAP32[23332];
    $244 = HEAP32[89668] | 0;
    HEAP32[$72 >> 2] = (HEAP32[$244 >> 2] | 0) - (HEAP32[$244 + 52 >> 2] | 0);
    $num_paren_199100 = $num_paren_199;
    $paren_198101 = $paren_198;
   }
  } while (0);
  _memset($_pre_phi | 0, 0, 12) | 0;
  $_073 = _squeeze_ws($argp, 0, $mgc_seq) | 0;
  $num_paren_0 = $num_paren_199100;
  $paren_0 = $paren_198101;
 }
 if ((label | 0) == 11) {
  _unget_ch();
 } else if ((label | 0) == 31) {
  _cerror(19472, ($172 | 0) == 0 ? HEAP32[676] | 0 : $172 + 25 | 0, 0, 0);
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 } else if ((label | 0) == 42) {
  HEAP8[HEAP32[$argp >> 2] | 0] = 0;
  HEAP32[$seqp >> 2] = _stpcpy(HEAP32[$seqp >> 2] | 0, HEAP32[$argpp >> 2] | 0) | 0;
  if (($_073 | 0) == 28 | ($_073 | 0) == 10) {
   $_0 = -1;
   STACKTOP = sp;
   return $_0 | 0;
  }
  $263 = HEAP32[$argp >> 2] | 0;
  $264 = $263 - 1 | 0;
  HEAP32[$argp >> 2] = $264;
  if ((HEAP32[$mgc_seq + 8 >> 2] | 0) == 0) {
   $271 = $264;
  } else {
   $269 = $263 - 2 | 0;
   HEAP32[$argp >> 2] = $269;
   $271 = $269;
  }
  if ((HEAP32[682] | 0) == 3) {
   do {
    if (!((HEAP32[22292] | 0) == 0 | ($m_num | 0) == 0)) {
     if (($trace_arg_0_ph | 0) == 0) {
      $289 = $271;
     } else {
      _get_src_location($tmpcast) | 0;
      HEAP32[(HEAP32[$locp >> 2] | 0) + 8 >> 2] = HEAP32[$71 >> 2];
      HEAP32[(HEAP32[$locp >> 2] | 0) + 12 >> 2] = HEAP32[$72 >> 2];
      $289 = HEAP32[$argp >> 2] | 0;
     }
     HEAP32[$locp >> 2] = (HEAP32[$locp >> 2] | 0) + 16;
     HEAP32[$argp >> 2] = $289 + 1;
     HEAP8[$289] = 24;
     $293 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $293 + 1;
     HEAP8[$293] = 4;
     if ((HEAP32[89547] | 0) == 0) {
      break;
     }
     $301 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $301 + 1;
     HEAP8[$301] = (($m_num | 0) / 255 | 0) + 1;
     $306 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $306 + 1;
     HEAP8[$306] = (($m_num | 0) % 255 | 0) + 1;
     $310 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $310 + 1;
     HEAP8[$310] = $nargs + 1;
     HEAP8[HEAP32[$argp >> 2] | 0] = 0;
     $313 = HEAP32[$argpp >> 2] | 0;
     $314 = HEAP32[$argp >> 2] | 0;
     $316 = $arg_id_i | 0;
     $318 = $arg_end_magic_i;
     $magic_i_0_idx80 = $magic_i | 0;
     if ($313 >>> 0 < $314 >>> 0) {
      $320 = $arg_loc_i | 0;
      $321 = $314 - 5 | 0;
      $buf_p_04_i = $313;
      $arg_09_i = 0;
      $mac_010_i = 0;
      while (1) {
       $323 = $buf_p_04_i + 1 | 0;
       do {
        if ((HEAP8[$buf_p_04_i] | 0) == 24) {
         $327 = $buf_p_04_i + 2 | 0;
         $329 = HEAP8[$323] | 0;
         if (($329 | 0) == 1) {
          if ((HEAP32[89547] | 0) != 0) {
           $336 = $327;
           $337 = $mac_id_i + ($mac_010_i << 1) | 0;
           tempBigInt = (HEAPU8[$336] | HEAPU8[$336 + 1 | 0] << 8) << 16 >> 16;
           HEAP8[$337] = tempBigInt;
           tempBigInt = tempBigInt >> 8;
           HEAP8[$337 + 1 | 0] = tempBigInt;
          }
          $mac_0_be_i = $mac_010_i + 1 | 0;
          $arg_0_be_i = $arg_09_i;
          $buf_p_0_be_i = $buf_p_04_i + 4 | 0;
          break;
         } else if (($329 | 0) == 3) {
          if ((HEAP32[89547] | 0) != 0) {
           HEAP32[$arg_loc_i + ($arg_09_i << 2) >> 2] = $buf_p_04_i;
           $347 = $arg_id_i + ($arg_09_i * 3 | 0) | 0;
           HEAP8[$347] = HEAP8[$327] | 0;
           HEAP8[$347 + 1 | 0] = HEAP8[$327 + 1 | 0] | 0;
           HEAP8[$347 + 2 | 0] = HEAP8[$327 + 2 | 0] | 0;
          }
          $mac_0_be_i = $mac_010_i;
          $arg_0_be_i = $arg_09_i + 1 | 0;
          $buf_p_0_be_i = $buf_p_04_i + 5 | 0;
          break;
         } else if (($329 | 0) == 4) {
          $352 = $arg_09_i - 1 | 0;
          if ((HEAP32[89547] | 0) == 0) {
           $mac_0_be_i = $mac_010_i;
           $arg_0_be_i = $352;
           $buf_p_0_be_i = $327;
           break;
          }
          L85 : do {
           if (($352 | 0) >= 0) {
            $358 = $arg_id_i + ($352 * 3 | 0) | 0;
            if ((_memcmp($358 | 0, $327 | 0, 3) | 0) == 0) {
             break;
            }
            do {
             if (($352 | 0) > 0) {
              if ((_memcmp($316 | 0, $327 | 0, 3) | 0) != 0) {
               label = 67;
               break;
              }
              $cur_edge_2_i = HEAP32[$320 >> 2] | 0;
              $to_be_edge_0_i = HEAP32[$arg_loc_i + ($352 << 2) >> 2] | 0;
              label = 72;
             } else {
              label = 67;
             }
            } while (0);
            L91 : do {
             if ((label | 0) == 67) {
              label = 0;
              if (($352 | 0) != 0) {
               break;
              }
              HEAP16[$arg_end_magic_i >> 1] = 1048;
              $373 = $buf_p_04_i + 5 | 0;
              $cur_edge_1_i = $321;
              while (1) {
               if ($373 >>> 0 > $cur_edge_1_i >>> 0) {
                break L91;
               }
               if ((_memcmp($cur_edge_1_i | 0, $318 | 0, 2) | 0) == 0) {
                break;
               } else {
                $cur_edge_1_i = $cur_edge_1_i - 1 | 0;
               }
              }
              $383 = (_memcmp($316 | 0, $cur_edge_1_i + 2 | 0, 3) | 0) == 0;
              $cur_edge_2_i = $cur_edge_1_i;
              $to_be_edge_0_i = $383 ? $buf_p_04_i : 0;
              label = 72;
             }
            } while (0);
            do {
             if ((label | 0) == 72) {
              label = 0;
              if (($to_be_edge_0_i | 0) == 0) {
               break;
              }
              HEAP8[$magic_i_0_idx80] = HEAP8[$cur_edge_2_i] | 0;
              HEAP8[$magic_i_0_idx80 + 1 | 0] = HEAP8[$cur_edge_2_i + 1 | 0] | 0;
              HEAP8[$magic_i_0_idx80 + 2 | 0] = HEAP8[$cur_edge_2_i + 2 | 0] | 0;
              HEAP8[$magic_i_0_idx80 + 3 | 0] = HEAP8[$cur_edge_2_i + 3 | 0] | 0;
              HEAP8[$magic_i_0_idx80 + 4 | 0] = HEAP8[$cur_edge_2_i + 4 | 0] | 0;
              if (($to_be_edge_0_i | 0) == (HEAP32[$arg_loc_i + ($352 << 2) >> 2] | 0)) {
               _memmove($cur_edge_2_i | 0, $cur_edge_2_i + 5 | 0, $to_be_edge_0_i - $cur_edge_2_i | 0) | 0;
              } else {
               _memmove($to_be_edge_0_i + 5 | 0, $to_be_edge_0_i | 0, $cur_edge_2_i - $to_be_edge_0_i | 0) | 0;
              }
              HEAP8[$to_be_edge_0_i] = HEAP8[$magic_i_0_idx80] | 0;
              HEAP8[$to_be_edge_0_i + 1 | 0] = HEAP8[$magic_i_0_idx80 + 1 | 0] | 0;
              HEAP8[$to_be_edge_0_i + 2 | 0] = HEAP8[$magic_i_0_idx80 + 2 | 0] | 0;
              HEAP8[$to_be_edge_0_i + 3 | 0] = HEAP8[$magic_i_0_idx80 + 3 | 0] | 0;
              HEAP8[$to_be_edge_0_i + 4 | 0] = HEAP8[$magic_i_0_idx80 + 4 | 0] | 0;
              break L85;
             }
            } while (0);
            $415 = (HEAPU8[$buf_p_04_i + 3 | 0] | -256) + ((HEAPU8[$327] | 0) * 255 | 0) | 0;
            $417 = HEAP32[23332] | 0;
            FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 16512, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = (HEAPU8[$arg_id_i + ($352 * 3 | 0) + 1 | 0] | -256) + ((HEAPU8[$358] | 0) * 255 | 0), HEAP32[tempVarArgs + 8 >> 2] = $415, HEAP32[tempVarArgs + 16 >> 2] = $417, tempVarArgs) | 0) | 0;
            STACKTOP = tempVarArgs;
           }
          } while (0);
          $mac_0_be_i = $mac_010_i;
          $arg_0_be_i = $352;
          $buf_p_0_be_i = $buf_p_04_i + 5 | 0;
          break;
         } else if (($329 | 0) == 2) {
          $422 = $mac_010_i - 1 | 0;
          if ((HEAP32[89547] | 0) == 0) {
           $mac_0_be_i = $422;
           $arg_0_be_i = $arg_09_i;
           $buf_p_0_be_i = $327;
           break;
          }
          do {
           if (($422 | 0) >= 0) {
            $428 = $mac_id_i + ($422 << 1) | 0;
            if ((_memcmp($428 | 0, $327 | 0, 2) | 0) == 0) {
             break;
            }
            $447 = (HEAPU8[$buf_p_04_i + 3 | 0] | -256) + ((HEAPU8[$327] | 0) * 255 | 0) | 0;
            $449 = HEAP32[23332] | 0;
            FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 15200, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = (HEAPU8[$mac_id_i + ($422 << 1) + 1 | 0] | -256) + ((HEAPU8[$428] | 0) * 255 | 0), HEAP32[tempVarArgs + 8 >> 2] = $447, HEAP32[tempVarArgs + 16 >> 2] = $449, tempVarArgs) | 0) | 0;
            STACKTOP = tempVarArgs;
           }
          } while (0);
          $mac_0_be_i = $422;
          $arg_0_be_i = $arg_09_i;
          $buf_p_0_be_i = $buf_p_04_i + 4 | 0;
          break;
         } else {
          $mac_0_be_i = $mac_010_i;
          $arg_0_be_i = $arg_09_i;
          $buf_p_0_be_i = $327;
          break;
         }
        } else {
         $mac_0_be_i = $mac_010_i;
         $arg_0_be_i = $arg_09_i;
         $buf_p_0_be_i = $323;
        }
       } while (0);
       if ($buf_p_0_be_i >>> 0 < $314 >>> 0) {
        $buf_p_04_i = $buf_p_0_be_i;
        $arg_09_i = $arg_0_be_i;
        $mac_010_i = $mac_0_be_i;
       } else {
        break;
       }
      }
     }
     HEAP32[$argpp >> 2] = $313;
    }
   } while (0);
   $453 = HEAP32[$argp >> 2] | 0;
   HEAP32[$argp >> 2] = $453 + 1;
   HEAP8[$453] = 28;
   $456 = HEAP32[$argp >> 2] | 0;
  } else {
   $456 = $271;
  }
  HEAP32[$argp >> 2] = $456 + 1;
  HEAP8[$456] = 0;
  HEAP32[$argpp >> 2] = HEAP32[$argp >> 2];
  $_0 = $_073;
  STACKTOP = sp;
  return $_0 | 0;
 } else if ((label | 0) == 88) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 HEAP8[HEAP32[$argp >> 2] | 0] = 0;
 HEAP32[$seqp >> 2] = _stpcpy(HEAP32[$seqp >> 2] | 0, HEAP32[$argpp >> 2] | 0) | 0;
 $_0 = -1;
 STACKTOP = sp;
 return $_0 | 0;
}
function _do_define($ignore_redef, $predefine) {
 $ignore_redef = $ignore_redef | 0;
 $predefine = $predefine | 0;
 var $wp_i_i = 0, $1 = 0, $repl_cur_i = 0, $repl_list = 0, $macroname = 0, $s_line_col = 0, $e_line_col = 0, $2 = 0, $4 = 0, $11 = 0, $def_start_0 = 0, $24 = 0, $29 = 0, $31 = 0, $hash_012_i = 0, $np_011_i = 0, $33 = 0, $34 = 0, $35 = 0, $hash_0_lcssa_i = 0, $np_0_lcssa_i = 0, $38 = 0, $40 = 0, $cmp_0_load4243 = 0, $prevp_0_i = 0, $44 = 0, $48 = 0, $cmp_0_load4244 = 0, $53 = 0, $75 = 0, $_ = 0, $85 = 0, $redefined_0 = 0, $dnargs_0 = 0, $88 = 0, $97 = 0, $103 = 0, $104 = 0, $108 = 0, $127 = 0, $161 = 0, $162 = 0, $172 = 0, $176 = 0, $187 = 0, $193 = 0, $197 = 0, $211 = 0, $multi_cats_0_lcssa_i = 0, $215 = 0, $216 = 0, $c_038_i = 0, $multi_cats_037_i = 0, $prev_prev_token_036_i = 0, $prev_token_035_i = 0, $220 = 0, $prev_token_0__i = 0, $prev_prev_token_0_prev_token_0_i = 0, $229 = 0, $240 = 0, $241 = 0, $multi_cats_1_i = 0, $250 = 0, $266 = 0, $267 = 0, $268 = 0, $277 = 0, $284 = 0, $c_0_i_i = 0, $289 = 0, $294 = 0, $311 = 0, $313 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $328 = 0, $330 = 0, $331 = 0, $336 = 0, $339 = 0, $341 = 0, $_lcssa_i_i = 0, $multi_cats_2_i = 0, $351 = 0, $c_0_be_i = 0, $354 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $362 = 0, $366 = 0, $398 = 0, $401 = 0, $_pn = 0, $cp_0 = 0, $def_end_0 = 0, $442 = 0, $446 = 0, $449 = 0, $450 = 0, $453 = 0, $454 = 0, $458 = 0, $459 = 0, $460 = 0, $461 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264240 | 0;
 $wp_i_i = sp | 0;
 $1 = sp + 8 | 0;
 $repl_cur_i = sp + 16 | 0;
 $repl_list = sp + 24 | 0;
 $macroname = sp + 263192 | 0;
 $s_line_col = sp + 264224 | 0;
 $e_line_col = sp + 264232 | 0;
 $2 = $repl_list | 0;
 HEAP32[23476] = $2;
 HEAP32[23474] = $repl_list + 262144;
 $4 = _skip_ws() | 0;
 if ((HEAP32[89594] & 8 | 0) != 0 & (HEAP32[23332] | 0) != 0) {
  $11 = HEAP32[89668] | 0;
  $def_start_0 = (HEAP32[$11 >> 2] | 0) - 1 - (HEAP32[$11 + 52 >> 2] | 0) | 0;
 } else {
  $def_start_0 = 0;
 }
 if (($4 | 0) == 10) {
  _cerror(9072, 0, 0, 0);
  _unget_ch();
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 HEAP32[5584] = 22344;
 $24 = HEAP32[2] | 0;
 if ((_scan_token($4, 22336, $24) | 0) != 65) {
  _cerror(9200, 22344, 0, 0);
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $29 = HEAP8[358776] | 0;
 if ($29 << 24 >> 24 == 0) {
  $np_0_lcssa_i = 358776;
  $hash_0_lcssa_i = 0;
 } else {
  $np_011_i = 358776;
  $hash_012_i = 0;
  $31 = $29;
  while (1) {
   $33 = $np_011_i + 1 | 0;
   $34 = ($31 << 24 >> 24) + $hash_012_i | 0;
   $35 = HEAP8[$33] | 0;
   if ($35 << 24 >> 24 == 0) {
    $np_0_lcssa_i = $33;
    $hash_0_lcssa_i = $34;
    break;
   } else {
    $np_011_i = $33;
    $hash_012_i = $34;
    $31 = $35;
   }
  }
 }
 $38 = $np_0_lcssa_i - 358776 | 0;
 $40 = $38 + 1 | 0;
 $prevp_0_i = 89200 + (($38 + $hash_0_lcssa_i & 1023) << 2) | 0;
 $cmp_0_load4243 = -1;
 while (1) {
  $44 = HEAP32[$prevp_0_i >> 2] | 0;
  if (($44 | 0) == 0) {
   $cmp_0_load4244 = $cmp_0_load4243;
   break;
  }
  $48 = _memcmp($44 + 25 | 0, 358776, $40 | 0) | 0;
  if (($48 | 0) > -1) {
   $cmp_0_load4244 = $48;
   break;
  } else {
   $prevp_0_i = $44 | 0;
   $cmp_0_load4243 = $48;
  }
 }
 $53 = ($cmp_0_load4244 | 0) != 0;
 L20 : do {
  if ((HEAP32[592] | 0) == 0) {
   if ($53) {
    $dnargs_0 = 0;
    $redefined_0 = 0;
    break;
   }
   if (($ignore_redef | 0) == 0) {
    $85 = HEAP16[$44 + 4 >> 1] | 0;
    $dnargs_0 = ($85 + 773 & 65535) >>> 0 < 3 >>> 0 ? -770 : $85 << 16 >> 16;
    $redefined_0 = 1;
    break;
   } else {
    $_0 = $44;
    STACKTOP = sp;
    return $_0 | 0;
   }
  } else {
   do {
    if (!$53) {
     if ((HEAP8[$44 + 24 | 0] | 0) != 0) {
      break;
     }
     if (($ignore_redef | 0) != 0) {
      $_0 = $44;
      STACKTOP = sp;
      return $_0 | 0;
     }
     $75 = HEAP16[$44 + 4 >> 1] | 0;
     $_ = ($75 + 773 & 65535) >>> 0 < 3 >>> 0 ? -770 : $75 << 16 >> 16;
     if (!(($_ | 0) < -773 | ($_ | 0) == -769)) {
      $dnargs_0 = $_;
      $redefined_0 = 1;
      break L20;
     }
     _cerror(14528, 358776, 0, 0);
     $_0 = 0;
     STACKTOP = sp;
     return $_0 | 0;
    }
   } while (0);
   if ((_strcmp(358776, 14384) | 0) != 0) {
    if ((HEAP32[91372] | HEAP32[23326] | 0) == 0) {
     $dnargs_0 = 0;
     $redefined_0 = 0;
     break;
    }
    if ((_strcmp(358776, 14304) | 0) != 0) {
     $dnargs_0 = 0;
     $redefined_0 = 0;
     break;
    }
   }
   _cerror(14192, 358776, 0, 0);
   $_0 = 0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 $88 = $macroname | 0;
 _strcpy($88 | 0, 358776) | 0;
 HEAP32[89690] = 1;
 HEAP32[5584] = 22344;
 HEAP32[23494] = 22344;
 HEAP8[22344] = 0;
 HEAP32[89666] = 0;
 L42 : do {
  if ((_get_ch() | 0) == 40) {
   HEAP32[89570] = 0;
   if ((_skip_ws() | 0) == 41) {
    break;
   }
   _unget_ch();
   L45 : while (1) {
    $97 = HEAP32[89570] | 0;
    if (($97 | 0) > 254) {
     label = 29;
     break;
    }
    HEAP32[93976 + ($97 << 3) >> 2] = HEAP32[5584];
    $103 = _skip_ws() | 0;
    $104 = _scan_token($103, 22336, $24) | 0;
    if (($104 | 0) != 65) {
     label = 31;
     break;
    }
    do {
     if ((HEAP32[592] | 0) != 0) {
      if ((HEAP32[91372] | HEAP32[23326] | 0) == 0) {
       break;
      }
      if ((_strcmp(358776, 14304) | 0) == 0) {
       label = 44;
       break L45;
      }
     }
    } while (0);
    if ((_is_formal(HEAP32[93976 + (HEAP32[89570] << 3) >> 2] | 0, 0) | 0) != 0) {
     label = 46;
     break;
    }
    $161 = HEAP32[5584] | 0;
    $162 = HEAP32[89570] | 0;
    HEAP32[93980 + ($162 << 3) >> 2] = $161 - (HEAP32[93976 + ($162 << 3) >> 2] | 0);
    HEAP32[5584] = $161 + 1;
    HEAP8[$161] = 44;
    HEAP32[89570] = (HEAP32[89570] | 0) + 1;
    $172 = _skip_ws() | 0;
    if (($172 | 0) != 44) {
     label = 48;
     break;
    }
   }
   L54 : do {
    if ((label | 0) == 29) {
     _cerror(9832, 0, 255, 0);
    } else if ((label | 0) == 31) {
     if (($103 | 0) == 10) {
      $108 = (HEAP32[5584] | 0) - 1 | 0;
      HEAP32[5584] = $108;
      HEAP8[$108] = 0;
      label = 49;
      break;
     } else if (($103 | 0) == 44 | ($103 | 0) == 41) {
      _cerror(9528, 0, 0, 0);
      break;
     } else {
      do {
       if ((HEAP32[592] | 0) != 0) {
        if ((HEAP32[91372] | HEAP32[23326] | 0) == 0) {
         break;
        }
        if (!(($104 | 0) == 71 & (HEAP32[89554] | 0) == 32)) {
         break;
        }
        if ((_skip_ws() | 0) == 41) {
         $127 = HEAP32[89570] | 0;
         HEAP32[93980 + ($127 << 3) >> 2] = 3;
         HEAP32[89570] = $127 + 1 | 256;
         label = 51;
         break L42;
        } else {
         _cerror(9584, 0, 0, 0);
         break L54;
        }
       }
      } while (0);
      _cerror(9696, HEAP32[93976 + (HEAP32[89570] << 3) >> 2] | 0, 0, 0);
      break;
     }
    } else if ((label | 0) == 44) {
     _cerror(9696, HEAP32[93976 + (HEAP32[89570] << 3) >> 2] | 0, 0, 0);
    } else if ((label | 0) == 46) {
     _cerror(9448, HEAP32[93976 + (HEAP32[89570] << 3) >> 2] | 0, 0, 0);
    } else if ((label | 0) == 48) {
     $176 = (HEAP32[5584] | 0) - 1 | 0;
     HEAP32[5584] = $176;
     HEAP8[$176] = 0;
     if (($172 | 0) == 41) {
      label = 51;
      break L42;
     } else {
      label = 49;
     }
    }
   } while (0);
   if ((label | 0) == 49) {
    _unget_ch();
    _cerror(9312, 22344, 0, 0);
   }
   HEAP32[89690] = 0;
   $_0 = 0;
   STACKTOP = sp;
   return $_0 | 0;
  } else {
   HEAP32[89570] = -770;
   _unget_ch();
   label = 51;
  }
 } while (0);
 do {
  if ((label | 0) == 51) {
   if ((HEAP32[4] & 4 | 0) == 0) {
    break;
   }
   $187 = HEAP32[586] | 0;
   if ((HEAP32[89570] & -769 | 0) <= ($187 | 0)) {
    break;
   }
   _cwarn(9832, 0, $187, 0);
  }
 } while (0);
 $193 = HEAP32[23476] | 0;
 HEAP32[$repl_cur_i >> 2] = $193;
 HEAP8[$193] = 0;
 HEAP32[22294] = 0;
 do {
  if ((HEAP32[682] | 0) == 3) {
   $197 = _get_ch() | 0;
   _unget_ch();
   if (!((HEAP16[(HEAP32[91636] | 0) + ($197 << 1) >> 1] & 32) == 0 & (HEAP32[89570] | 0) < 0)) {
    break;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    break;
   }
   _cwarn(11112, $88, 0, 0);
  }
 } while (0);
 $211 = _skip_ws() | 0;
 L87 : do {
  if (($211 | 0) == 10) {
   $multi_cats_0_lcssa_i = 0;
   label = 61;
  } else {
   $prev_token_035_i = 0;
   $prev_prev_token_036_i = 0;
   $multi_cats_037_i = 0;
   $c_038_i = $211;
   L89 : while (1) {
    $220 = (HEAP32[592] | 0) == 0;
    $prev_token_0__i = $220 ? $prev_token_035_i : HEAP32[22294] | 0;
    $prev_prev_token_0_prev_token_0_i = $220 ? $prev_prev_token_036_i : $prev_token_035_i;
    HEAP32[22294] = HEAP32[$repl_cur_i >> 2];
    L91 : do {
     switch (_scan_token($c_038_i, $repl_cur_i, HEAP32[23474] | 0) | 0) {
     case 71:
      {
       if ((HEAP32[592] | 0) == 0) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       $229 = HEAP32[89554] | 0;
       if (($229 | 0) == 31) {
        if (($prev_token_0__i | 0) == 0) {
         label = 66;
         break L89;
        }
        if ((HEAP8[$prev_token_0__i] | 0) == 30) {
         label = 68;
         break L89;
        }
        do {
         if (($prev_prev_token_0_prev_token_0_i | 0) == 0) {
          $multi_cats_1_i = $multi_cats_037_i;
         } else {
          $240 = HEAP8[$prev_prev_token_0_prev_token_0_i] | 0;
          $241 = $240 << 24 >> 24 == 30;
          if ($241) {
           $multi_cats_1_i = $241 ? 1 : $multi_cats_037_i;
           break;
          }
          if ($240 << 24 >> 24 != 29) {
           $multi_cats_1_i = $multi_cats_037_i;
           break;
          }
          if ((HEAP32[4] & 4 | 0) == 0) {
           $multi_cats_1_i = $multi_cats_037_i;
           break;
          }
          _cwarn(11392, 0, 0, 0);
          $multi_cats_1_i = $multi_cats_037_i;
         }
        } while (0);
        $250 = HEAP32[22294] | 0;
        HEAP32[$repl_cur_i >> 2] = $250 + 1;
        HEAP8[$250] = 30;
        $multi_cats_2_i = $multi_cats_1_i;
        break L91;
       } else if (($229 | 0) != 30) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       if ((HEAP32[89570] | 0) < 0) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       do {
        if (($prev_token_0__i | 0) != 0) {
         if ((HEAP8[$prev_token_0__i] | 0) != 30) {
          break;
         }
         if ((HEAP32[4] & 4 | 0) == 0) {
          break;
         }
         _cwarn(11392, 0, 0, 0);
        }
       } while (0);
       $266 = HEAP32[22294] | 0;
       HEAP32[$repl_cur_i >> 2] = $266;
       $267 = $266 + 1 | 0;
       HEAP32[$1 >> 2] = $267;
       HEAP8[$266] = 29;
       $268 = _get_ch() | 0;
       if ((HEAP16[(HEAP32[91636] | 0) + ($268 << 1) >> 1] & 64) == 0) {
        $c_0_i_i = $268;
        $284 = $267;
       } else {
        HEAP32[$1 >> 2] = $266 + 2;
        HEAP8[$267] = 32;
        do {
         $277 = _get_ch() | 0;
        } while ((HEAP16[(HEAP32[91636] | 0) + ($277 << 1) >> 1] & 64) != 0);
        $c_0_i_i = $277;
        $284 = HEAP32[$1 >> 2] | 0;
       }
       HEAP32[22294] = $284;
       if ((_scan_token($c_0_i_i, $1, HEAP32[23474] | 0) | 0) != 65) {
        label = 86;
        break L89;
       }
       $289 = _is_formal(358776, 1) | 0;
       if (($289 | 0) == 0) {
        label = 86;
        break L89;
       }
       HEAP32[$1 >> 2] = $289;
       HEAP32[$repl_cur_i >> 2] = $289;
       $multi_cats_2_i = $multi_cats_037_i;
       break;
      }
     case 65:
      {
       $294 = _is_formal(358776, 1) | 0;
       if (($294 | 0) != 0) {
        HEAP32[$repl_cur_i >> 2] = $294;
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       if ((HEAP32[592] | 0) == 0) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       if ((HEAP32[91372] | HEAP32[23326] | 0) != 0) {
        if ((_strcmp(358776, 14304) | 0) == 0) {
         label = 92;
         break L89;
        }
       }
       if ((_strcmp($88 | 0, 358776) | 0) != 0) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       $311 = HEAP32[22294] | 0;
       HEAP8[$311] = 25;
       $313 = _stpcpy($311 + 1 | 0, 358776) | 0;
       if (($313 | 0) == 0) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       HEAP32[$repl_cur_i >> 2] = $313;
       $multi_cats_2_i = $multi_cats_037_i;
       break;
      }
     case 67:
     case 69:
      {
       if ((HEAP32[682] | 0) != 1) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       $321 = HEAP32[$repl_cur_i >> 2] | 0;
       $322 = HEAP32[22294] | 0;
       $323 = HEAP8[$322] | 0;
       $324 = $323 << 24 >> 24;
       $325 = $322 + 1 | 0;
       HEAP32[22294] = $325;
       _unget_string($325, 0) | 0;
       $327 = HEAP32[22294] | 0;
       HEAP32[$wp_i_i >> 2] = $327;
       $328 = _get_ch() | 0;
       if (($328 | 0) == ($324 | 0)) {
        $_lcssa_i_i = $327;
       } else {
        $331 = $328;
        $330 = $327;
        while (1) {
         HEAP32[22294] = $330;
         do {
          if ((_scan_token($331, $wp_i_i, $321) | 0) == 65) {
           $336 = _is_formal(HEAP32[22294] | 0, 1) | 0;
           if (($336 | 0) == 0) {
            break;
           }
           HEAP32[$wp_i_i >> 2] = $336;
          }
         } while (0);
         $339 = _get_ch() | 0;
         $341 = HEAP32[$wp_i_i >> 2] | 0;
         if (($339 | 0) == ($324 | 0)) {
          $_lcssa_i_i = $341;
          break;
         } else {
          $331 = $339;
          $330 = $341;
         }
        }
       }
       HEAP32[$wp_i_i >> 2] = $_lcssa_i_i + 1;
       HEAP8[$_lcssa_i_i] = $323;
       HEAP32[$repl_cur_i >> 2] = HEAP32[$wp_i_i >> 2];
       $multi_cats_2_i = $multi_cats_037_i;
       break;
      }
     case 73:
      {
       if (!((HEAP32[682] | 0) == 1 & ($c_038_i | 0) == 31)) {
        $multi_cats_2_i = $multi_cats_037_i;
        break L91;
       }
       HEAP32[$repl_cur_i >> 2] = (HEAP32[$repl_cur_i >> 2] | 0) - 1;
       $multi_cats_2_i = $multi_cats_037_i;
       break;
      }
     default:
      {
       $multi_cats_2_i = $multi_cats_037_i;
      }
     }
    } while (0);
    $351 = _get_ch() | 0;
    if (($351 | 0) == 32 | ($351 | 0) == 9) {
     $354 = HEAP32[$repl_cur_i >> 2] | 0;
     HEAP32[$repl_cur_i >> 2] = $354 + 1;
     HEAP8[$354] = 32;
     while (1) {
      $356 = _get_ch() | 0;
      if (!(($356 | 0) == 32 | ($356 | 0) == 9)) {
       $c_0_be_i = $356;
       break;
      }
     }
    } else {
     $c_0_be_i = $351;
    }
    if (($c_0_be_i | 0) == 10) {
     $multi_cats_0_lcssa_i = $multi_cats_2_i;
     label = 61;
     break L87;
    } else {
     $prev_token_035_i = $prev_token_0__i;
     $prev_prev_token_036_i = $prev_prev_token_0_prev_token_0_i;
     $multi_cats_037_i = $multi_cats_2_i;
     $c_038_i = $c_0_be_i;
    }
   }
   if ((label | 0) == 66) {
    _cerror(10976, 0, 0, 0);
    break;
   } else if ((label | 0) == 68) {
    _cerror(10760, 0, 0, 0);
    break;
   } else if ((label | 0) == 86) {
    _cerror(10072, HEAP32[22294] | 0, 0, 0);
    break;
   } else if ((label | 0) == 92) {
    _cerror(10592, 358776, 0, 0);
    break;
   }
  }
 } while (0);
 L152 : do {
  if ((label | 0) == 61) {
   $215 = HEAP32[23476] | 0;
   $216 = HEAP32[$repl_cur_i >> 2] | 0;
   L154 : do {
    if ($215 >>> 0 < $216 >>> 0) {
     $357 = $216;
     while (1) {
      $358 = $357 - 1 | 0;
      $359 = HEAP8[$358] | 0;
      if (!(($359 << 24 >> 24 | 0) == 32 | ($359 << 24 >> 24 | 0) == 9)) {
       $362 = $357;
       break L154;
      }
      HEAP32[$repl_cur_i >> 2] = $358;
      if ($215 >>> 0 < $358 >>> 0) {
       $357 = $358;
      } else {
       $362 = $358;
       break;
      }
     }
    } else {
     $362 = $216;
    }
   } while (0);
   HEAP8[$362] = 0;
   _unget_ch();
   do {
    if ((HEAP32[592] | 0) != 0) {
     $366 = HEAP32[22294] | 0;
     do {
      if (($366 | 0) != 0) {
       if ((HEAP8[$366] | 0) != 30) {
        break;
       }
       _cerror(10416, 0, 0, 0);
       break L152;
      }
     } while (0);
     do {
      if (($multi_cats_0_lcssa_i | 0) != 0) {
       if ((HEAP32[4] & 4 | 0) == 0) {
        break;
       }
       _cwarn(11224, 0, 0, 0);
      }
     } while (0);
     if (!((HEAP32[89570] & 256 | 0) != 0 & (HEAP32[23324] | 0) < 199901)) {
      break;
     }
     if ((HEAP32[4] & 2 | 0) == 0) {
      break;
     }
     _cwarn(10240, 0, 0, 0);
    }
   } while (0);
   if ((HEAP32[89594] & 8 | 0) != 0 & (HEAP32[23332] | 0) != 0) {
    $398 = HEAP32[89668] | 0;
    $401 = HEAP32[91636] | 0;
    $_pn = HEAP32[$398 >> 2] | 0;
    while (1) {
     $cp_0 = $_pn - 1 | 0;
     if ((HEAP16[$401 + (HEAPU8[$cp_0] << 1) >> 1] & 64) == 0) {
      break;
     } else {
      $_pn = $cp_0;
     }
    }
    $def_end_0 = $_pn - (HEAP32[$398 + 52 >> 2] | 0) | 0;
   } else {
    $def_end_0 = 0;
   }
   HEAP32[89690] = 0;
   do {
    if (($redefined_0 | 0) != 0) {
     do {
      if (($dnargs_0 | 0) == (HEAP32[89570] | 0)) {
       if ((_strcmp(HEAP32[$44 + 12 >> 2] | 0, $2 | 0) | 0) != 0) {
        break;
       }
       if ((HEAP32[682] | 0) != 3) {
        $_0 = $44;
        STACKTOP = sp;
        return $_0 | 0;
       }
       if ((_strcmp(HEAP32[$44 + 8 >> 2] | 0, 22344) | 0) == 0) {
        $_0 = $44;
       } else {
        break;
       }
       STACKTOP = sp;
       return $_0 | 0;
      }
     } while (0);
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     _cwarn(14040, 0, 0, 0);
     if ((HEAP32[89551] | 0) != 0) {
      break;
     }
     _dump_a_def(13904, $44, 0, 1, HEAP32[89994] | 0);
    }
   } while (0);
   $442 = _install_macro($88, HEAP32[89570] | 0, 22344, $2, $prevp_0_i, $cmp_0_load4244, $predefine) | 0;
   $446 = HEAP32[23332] | 0;
   if ((HEAP32[89594] & 8 | 0) != 0 & ($446 | 0) != 0) {
    $449 = $s_line_col | 0;
    HEAP32[$449 >> 2] = $446;
    $450 = $s_line_col + 4 | 0;
    HEAP32[$450 >> 2] = $def_start_0;
    _get_src_location($s_line_col) | 0;
    $453 = $e_line_col | 0;
    HEAP32[$453 >> 2] = HEAP32[23332];
    $454 = $e_line_col + 4 | 0;
    HEAP32[$454 >> 2] = $def_end_0;
    _get_src_location($e_line_col) | 0;
    $458 = HEAP32[$449 >> 2] | 0;
    $459 = HEAP32[$450 >> 2] | 0;
    $460 = HEAP32[$453 >> 2] | 0;
    $461 = HEAP32[$454 >> 2] | 0;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 13816, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 40 | 0, HEAP32[tempVarArgs >> 2] = $442 + 25, HEAP32[tempVarArgs + 8 >> 2] = $458, HEAP32[tempVarArgs + 16 >> 2] = $459, HEAP32[tempVarArgs + 24 >> 2] = $460, HEAP32[tempVarArgs + 32 >> 2] = $461, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    HEAP32[5582] = 1;
   }
   if (!((HEAP32[682] | 0) == 3 & (HEAP32[91372] | 0) != 0)) {
    $_0 = $442;
    STACKTOP = sp;
    return $_0 | 0;
   }
   if ((_id_operator($88) | 0) == 0) {
    $_0 = $442;
    STACKTOP = sp;
    return $_0 | 0;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    $_0 = $442;
    STACKTOP = sp;
    return $_0 | 0;
   }
   _cwarn(13728, $88, 0, 0);
   $_0 = $442;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 HEAP32[89690] = 0;
 $_0 = 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _remove_magics($argp, $from_last) {
 $argp = $argp | 0;
 $from_last = $from_last | 0;
 var $ap = 0, $tp = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $12 = 0, $14 = 0, $15 = 0, $ep_0 = 0, $with_rtend_0 = 0, $21 = 0, $mac_loc_0_ph = 0, $arg_loc_0_ph = 0, $mgc_index_0_ph = 0, $max_magics_0_ph = 0, $mac_n_0_ph = 0, $arg_n_0_ph = 0, $ind_0_ph = 0, $first_0_ph = 0, $last_0_ph = 0, $arg_id_0_ph = 0, $mac_id_0_ph = 0, $ep_1_ph = 0, $space_0_ph = 0, $first_0_ph194_ph = 0, $last_0_ph195_ph = 0, $ep_1_ph198_ph = 0, $space_0_ph199_ph = 0, $first_0_ph194 = 0, $ep_1_ph198 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $first_0_ph194295 = 0, $49 = 0, $53 = 0, $55 = 0, $59 = 0, $62 = 0, $66 = 0, $mac_loc_1 = 0, $arg_loc_1 = 0, $mgc_index_1 = 0, $max_magics_1 = 0, $arg_id_1 = 0, $mac_id_1 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $101 = 0, $102 = 0, $110 = 0, $111 = 0, $mac_n_1 = 0, $arg_n_1 = 0, $135 = 0, $136 = 0, $138 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $150 = 0, $153 = 0, $154 = 0, $158 = 0, $159 = 0, $166 = 0, $167 = 0, $175 = 0, $first_0_ph194296 = 0, $_lcssa206 = 0, $_lcssa201 = 0, $177 = 0, $space_1 = 0, $first_0_ph194297 = 0, $_lcssa = 0, $187 = 0, $_ep_1 = 0, $189 = 0, $ep_3 = 0, $193 = 0, $198 = 0, $203 = 0, $nest_s_0190 = 0, $mac_s_0188 = 0, $210 = 0, $mac_e_0182 = 0, $mac_e_0184 = 0, $nest_e_0183 = 0, $nest_e_0_be = 0, $mac_e_0 = 0, $219 = 0, $_pre_phi338 = 0, $nest_s_1 = 0, $nest_s2_0177 = 0, $arg_s_0175 = 0, $239 = 0, $arg_e_0170 = 0, $arg_e_0172 = 0, $nest_e3_0171 = 0, $nest_e3_0_be = 0, $arg_e_0 = 0, $248 = 0, $_pre_phi = 0, $nest_s2_1 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $271 = 0, $len_0_ph217 = 0, $rm_0_ph216 = 0, $num_0_ph215 = 0, $loc_tab_0_ph214 = 0, $n_0_ph213 = 0, $arg_n_2_ph212 = 0, $mac_n_2_ph211 = 0, $273 = 0, $280 = 0, $281 = 0, $288 = 0, $289 = 0, $292 = 0, $len_1159 = 0, $len_1166 = 0, $len_1160 = 0, $mac_n_3 = 0, $arg_n_3 = 0, $loc_tab_1 = 0, $num_1 = 0, $rm_1 = 0, $317 = 0, $320 = 0, $321 = 0, $322 = 0, $_pre = 0, $328 = 0, $329 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp | 0;
 $tp = sp + 8 | 0;
 $2 = _xmalloc(512) | 0;
 $4 = _xmalloc(1280) | 0;
 $6 = _xmalloc(512) | 0;
 $8 = _xmalloc(1024) | 0;
 $9 = _xmalloc(384) | 0;
 $12 = _xmalloc((_strlen($argp | 0) | 0) + 1 | 0) | 0;
 HEAP32[$ap >> 2] = $12;
 _strcpy($12 | 0, $argp | 0) | 0;
 $14 = _strlen($12 | 0) | 0;
 $15 = $12 + ($14 - 1) | 0;
 if ((HEAP8[$15] | 0) == 28) {
  $with_rtend_0 = 1;
  $ep_0 = $15;
 } else {
  $with_rtend_0 = 0;
  $ep_0 = $12 + $14 | 0;
 }
 $21 = _unget_string($12, 0) | 0;
 $space_0_ph = 0;
 $ep_1_ph = $ep_0;
 $mac_id_0_ph = $2;
 $arg_id_0_ph = $4;
 $last_0_ph = 0;
 $first_0_ph = 0;
 $ind_0_ph = 0;
 $arg_n_0_ph = 0;
 $mac_n_0_ph = 0;
 $max_magics_0_ph = 128;
 $mgc_index_0_ph = $9;
 $arg_loc_0_ph = $8;
 $mac_loc_0_ph = $6;
 L4 : while (1) {
  $space_0_ph199_ph = $space_0_ph;
  $ep_1_ph198_ph = $ep_1_ph;
  $last_0_ph195_ph = $last_0_ph;
  $first_0_ph194_ph = $first_0_ph;
  L6 : while (1) {
   $ep_1_ph198 = $ep_1_ph198_ph;
   $first_0_ph194 = $first_0_ph194_ph;
   while (1) {
    if (($first_0_ph194 | 0) != 0) {
     label = 10;
     break;
    }
    $23 = _get_ch() | 0;
    $24 = $23 & 255;
    $25 = HEAP32[$ap >> 2] | 0;
    HEAP32[$ap >> 2] = $25 + 1;
    HEAP8[$25] = $24;
    $29 = ($21 | 0) == (HEAP32[89668] | 0);
    if (!($24 << 24 >> 24 != 28 & $29)) {
     $_lcssa = $29;
     $first_0_ph194297 = 0;
     break L4;
    }
    if (($23 | 0) == 24) {
     $first_0_ph194295 = 0;
     break L6;
    }
    $33 = $23 & 255;
    $34 = HEAP32[91636] | 0;
    if ((HEAP16[$34 + ($33 << 1) >> 1] & 64) == 0) {
     $_lcssa201 = $23;
     $_lcssa206 = $33;
     $first_0_ph194296 = 0;
     $175 = $34;
     break;
    }
    HEAP32[$ap >> 2] = (HEAP32[$ap >> 2] | 0) - 1;
    $ep_1_ph198 = $ep_1_ph198 - 1 | 0;
    $first_0_ph194 = 0;
   }
   if ((label | 0) == 10) {
    while (1) {
     label = 0;
     $39 = _get_ch() | 0;
     $40 = $39 & 255;
     $41 = HEAP32[$ap >> 2] | 0;
     HEAP32[$ap >> 2] = $41 + 1;
     HEAP8[$41] = $40;
     $45 = ($21 | 0) == (HEAP32[89668] | 0);
     if (!($40 << 24 >> 24 != 28 & $45)) {
      $_lcssa = $45;
      $first_0_ph194297 = $first_0_ph194;
      break L4;
     }
     if (($39 | 0) == 24) {
      $first_0_ph194295 = $first_0_ph194;
      break L6;
     }
     $166 = $39 & 255;
     $167 = HEAP32[91636] | 0;
     if ((HEAP16[$167 + ($166 << 1) >> 1] & 64) == 0) {
      $_lcssa201 = $39;
      $_lcssa206 = $166;
      $first_0_ph194296 = $first_0_ph194;
      $175 = $167;
      break;
     } else {
      label = 10;
     }
    }
   }
   $177 = (HEAP32[$ap >> 2] | 0) - 1 | 0;
   HEAP32[$ap >> 2] = $177;
   $space_1 = (HEAP16[$175 + ($_lcssa206 << 1) >> 1] & 64) == 0 ? $space_0_ph199_ph : $177;
   _scan_token($_lcssa201, $ap, $ep_1_ph198) | 0;
   $space_0_ph199_ph = $space_1;
   $ep_1_ph198_ph = $ep_1_ph198;
   $last_0_ph195_ph = $177;
   $first_0_ph194_ph = ($first_0_ph194296 | 0) == 0 ? $177 : $first_0_ph194296;
  }
  $49 = $max_magics_0_ph << 1;
  if ($mac_n_0_ph >>> 0 < $max_magics_0_ph >>> 0 & $arg_n_0_ph >>> 0 < $49 >>> 0) {
   $mac_id_1 = $mac_id_0_ph;
   $arg_id_1 = $arg_id_0_ph;
   $max_magics_1 = $max_magics_0_ph;
   $mgc_index_1 = $mgc_index_0_ph;
   $arg_loc_1 = $arg_loc_0_ph;
   $mac_loc_1 = $mac_loc_0_ph;
  } else {
   $53 = $max_magics_0_ph << 3;
   $55 = _xrealloc($mac_id_0_ph | 0, $53) | 0;
   $59 = _xrealloc($arg_id_0_ph | 0, $max_magics_0_ph * 20 | 0) | 0;
   $62 = _xrealloc($mac_loc_0_ph, $53) | 0;
   $66 = _xrealloc($arg_loc_0_ph, $max_magics_0_ph << 4) | 0;
   $mac_id_1 = $55;
   $arg_id_1 = $59;
   $max_magics_1 = $49;
   $mgc_index_1 = _xrealloc($mgc_index_0_ph, $max_magics_0_ph * 6 | 0) | 0;
   $arg_loc_1 = $66;
   $mac_loc_1 = $62;
  }
  $70 = _get_ch() | 0;
  $71 = $70 & 255;
  $72 = HEAP32[$ap >> 2] | 0;
  HEAP32[$ap >> 2] = $72 + 1;
  HEAP8[$72] = $71;
  if (($70 | 0) == 1) {
   $76 = (_get_ch() | 0) & 255;
   $77 = HEAP32[$ap >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 1;
   HEAP8[$77] = $76;
   $80 = (_get_ch() | 0) & 255;
   $81 = HEAP32[$ap >> 2] | 0;
   HEAP32[$ap >> 2] = $81 + 1;
   HEAP8[$81] = $80;
   HEAP32[$mac_loc_1 + ($mac_n_0_ph << 2) >> 2] = (HEAP32[$ap >> 2] | 0) - 4;
   $86 = $mac_id_1 + ($mac_n_0_ph << 2) | 0;
   $88 = (HEAP32[$ap >> 2] | 0) - 3 | 0;
   HEAP8[$86] = HEAP8[$88] | 0;
   HEAP8[$86 + 1 | 0] = HEAP8[$88 + 1 | 0] | 0;
   HEAP8[$86 + 2 | 0] = HEAP8[$88 + 2 | 0] | 0;
   HEAP8[$mac_id_1 + ($mac_n_0_ph << 2) + 3 | 0] = 0;
   $arg_n_1 = $arg_n_0_ph;
   $mac_n_1 = $mac_n_0_ph + 1 | 0;
  } else if (($70 | 0) == 3) {
   $93 = (_get_ch() | 0) & 255;
   $94 = HEAP32[$ap >> 2] | 0;
   HEAP32[$ap >> 2] = $94 + 1;
   HEAP8[$94] = $93;
   $97 = (_get_ch() | 0) & 255;
   $98 = HEAP32[$ap >> 2] | 0;
   HEAP32[$ap >> 2] = $98 + 1;
   HEAP8[$98] = $97;
   $101 = (_get_ch() | 0) & 255;
   $102 = HEAP32[$ap >> 2] | 0;
   HEAP32[$ap >> 2] = $102 + 1;
   HEAP8[$102] = $101;
   HEAP32[$arg_loc_1 + ($arg_n_0_ph << 2) >> 2] = (HEAP32[$ap >> 2] | 0) - 5;
   $110 = (HEAP32[$ap >> 2] | 0) - 4 | 0;
   $111 = $arg_id_1 + ($arg_n_0_ph * 5 | 0) | 0;
   tempBigInt = HEAPU8[$110] | HEAPU8[$110 + 1 | 0] << 8 | HEAPU8[$110 + 2 | 0] << 16 | HEAPU8[$110 + 3 | 0] << 24 | 0;
   HEAP8[$111] = tempBigInt;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$111 + 1 | 0] = tempBigInt;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$111 + 2 | 0] = tempBigInt;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$111 + 3 | 0] = tempBigInt;
   HEAP8[$arg_id_1 + ($arg_n_0_ph * 5 | 0) + 4 | 0] = 0;
   $arg_n_1 = $arg_n_0_ph + 1 | 0;
   $mac_n_1 = $mac_n_0_ph;
  } else if (($70 | 0) == 2) {
   HEAP32[$mac_loc_1 + ($mac_n_0_ph << 2) >> 2] = (HEAP32[$ap >> 2] | 0) - 2;
   HEAP8[$mac_id_1 + ($mac_n_0_ph << 2) | 0] = $71;
   HEAP8[$mac_id_1 + ($mac_n_0_ph << 2) + 3 | 0] = 0;
   $arg_n_1 = $arg_n_0_ph;
   $mac_n_1 = $mac_n_0_ph + 1 | 0;
  } else if (($70 | 0) == 4) {
   HEAP32[$arg_loc_1 + ($arg_n_0_ph << 2) >> 2] = (HEAP32[$ap >> 2] | 0) - 2;
   HEAP8[$arg_id_1 + ($arg_n_0_ph * 5 | 0) | 0] = $71;
   HEAP8[$arg_id_1 + ($arg_n_0_ph * 5 | 0) + 4 | 0] = 0;
   $arg_n_1 = $arg_n_0_ph + 1 | 0;
   $mac_n_1 = $mac_n_0_ph;
  } else {
   $arg_n_1 = $arg_n_0_ph;
   $mac_n_1 = $mac_n_0_ph;
  }
  do {
   if ((HEAP32[89547] | 0) != 0) {
    if (($70 | 0) == 2) {
     $135 = (_get_ch() | 0) & 255;
     $136 = HEAP32[$ap >> 2] | 0;
     HEAP32[$ap >> 2] = $136 + 1;
     HEAP8[$136] = $135;
     $138 = $mac_n_1 - 1 | 0;
     HEAP8[$mac_id_1 + ($138 << 2) + 1 | 0] = $135;
     $141 = (_get_ch() | 0) & 255;
     $142 = HEAP32[$ap >> 2] | 0;
     HEAP32[$ap >> 2] = $142 + 1;
     HEAP8[$142] = $141;
     HEAP8[$mac_id_1 + ($138 << 2) + 2 | 0] = $141;
     break;
    } else if (($70 | 0) == 4) {
     $147 = (_get_ch() | 0) & 255;
     $148 = HEAP32[$ap >> 2] | 0;
     HEAP32[$ap >> 2] = $148 + 1;
     HEAP8[$148] = $147;
     $150 = $arg_n_1 - 1 | 0;
     HEAP8[$arg_id_1 + ($150 * 5 | 0) + 1 | 0] = $147;
     $153 = (_get_ch() | 0) & 255;
     $154 = HEAP32[$ap >> 2] | 0;
     HEAP32[$ap >> 2] = $154 + 1;
     HEAP8[$154] = $153;
     HEAP8[$arg_id_1 + ($150 * 5 | 0) + 2 | 0] = $153;
     $158 = (_get_ch() | 0) & 255;
     $159 = HEAP32[$ap >> 2] | 0;
     HEAP32[$ap >> 2] = $159 + 1;
     HEAP8[$159] = $158;
     HEAP8[$arg_id_1 + ($150 * 5 | 0) + 3 | 0] = $158;
     break;
    } else {
     break;
    }
   }
  } while (0);
  HEAP8[$mgc_index_1 + $ind_0_ph | 0] = $71;
  $space_0_ph = $space_0_ph199_ph;
  $ep_1_ph = $ep_1_ph198;
  $mac_id_0_ph = $mac_id_1;
  $arg_id_0_ph = $arg_id_1;
  $last_0_ph = $last_0_ph195_ph;
  $first_0_ph = $first_0_ph194295;
  $ind_0_ph = $ind_0_ph + 1 | 0;
  $arg_n_0_ph = $arg_n_1;
  $mac_n_0_ph = $mac_n_1;
  $max_magics_0_ph = $max_magics_1;
  $mgc_index_0_ph = $mgc_index_1;
  $arg_loc_0_ph = $arg_loc_1;
  $mac_loc_0_ph = $mac_loc_1;
 }
 if ($_lcssa) {
  _get_ch() | 0;
 }
 _unget_ch();
 $187 = $ep_1_ph198 - 1 | 0;
 $_ep_1 = ($space_0_ph199_ph | 0) == ($187 | 0) ? $187 : $ep_1_ph198;
 $189 = ($with_rtend_0 | 0) != 0;
 if ($189) {
  HEAP8[$_ep_1] = 28;
  $ep_3 = $_ep_1 + 1 | 0;
 } else {
  $ep_3 = $_ep_1;
 }
 HEAP8[$ep_3] = 0;
 $193 = ($from_last | 0) != 0;
 if ($193 & ($last_0_ph195_ph | 0) == 0) {
  STACKTOP = sp;
  return $12 | 0;
 }
 if (($first_0_ph194297 | 0) == 0 & ($193 ^ 1)) {
  STACKTOP = sp;
  return $12 | 0;
 }
 $198 = ($arg_n_0_ph | 0) == 0;
 if (($arg_n_0_ph | $mac_n_0_ph | 0) == 0) {
  STACKTOP = sp;
  return $12 | 0;
 }
 $203 = $193 ? $last_0_ph195_ph : $first_0_ph194297;
 L52 : do {
  if (($mac_n_0_ph | 0) != 0) {
   if ((HEAP32[$mac_loc_0_ph >> 2] | 0) >>> 0 < $203 >>> 0) {
    $mac_s_0188 = 0;
    $nest_s_0190 = 0;
   } else {
    break;
   }
   while (1) {
    if ((HEAP8[$mac_id_0_ph + ($mac_s_0188 << 2) | 0] | 0) == 1) {
     $210 = $nest_s_0190 + 1 | 0;
     $mac_e_0182 = $mac_s_0188 + 1 | 0;
     if (($mac_e_0182 | 0) < ($mac_n_0_ph | 0)) {
      $nest_e_0183 = $210;
      $mac_e_0184 = $mac_e_0182;
     } else {
      break L52;
     }
     while (1) {
      if ((HEAP8[$mac_id_0_ph + ($mac_e_0184 << 2) | 0] | 0) == 1) {
       $nest_e_0_be = $nest_e_0183 + 1 | 0;
      } else {
       $219 = $nest_e_0183 - 1 | 0;
       if ($203 >>> 0 < (HEAP32[$mac_loc_0_ph + ($mac_e_0184 << 2) >> 2] | 0) >>> 0 & ($219 | 0) == ($nest_s_0190 | 0)) {
        break;
       } else {
        $nest_e_0_be = $219;
       }
      }
      $mac_e_0 = $mac_e_0184 + 1 | 0;
      if (($mac_e_0 | 0) < ($mac_n_0_ph | 0)) {
       $nest_e_0183 = $nest_e_0_be;
       $mac_e_0184 = $mac_e_0;
      } else {
       break L52;
      }
     }
     HEAP8[$mac_id_0_ph + ($mac_e_0184 << 2) + 3 | 0] = 1;
     HEAP8[$mac_id_0_ph + ($mac_s_0188 << 2) + 3 | 0] = 1;
     $nest_s_1 = $210;
     $_pre_phi338 = $mac_e_0182;
    } else {
     $nest_s_1 = $nest_s_0190 - 1 | 0;
     $_pre_phi338 = $mac_s_0188 + 1 | 0;
    }
    if ((HEAP32[$mac_loc_0_ph + ($_pre_phi338 << 2) >> 2] | 0) >>> 0 < $203 >>> 0) {
     $mac_s_0188 = $_pre_phi338;
     $nest_s_0190 = $nest_s_1;
    } else {
     break;
    }
   }
  }
 } while (0);
 L68 : do {
  if (!$198) {
   if ((HEAP32[$arg_loc_0_ph >> 2] | 0) >>> 0 < $203 >>> 0) {
    $arg_s_0175 = 0;
    $nest_s2_0177 = 0;
   } else {
    break;
   }
   while (1) {
    if ((HEAP8[$arg_id_0_ph + ($arg_s_0175 * 5 | 0) | 0] | 0) == 3) {
     $239 = $nest_s2_0177 + 1 | 0;
     $arg_e_0170 = $arg_s_0175 + 1 | 0;
     if (($arg_e_0170 | 0) < ($arg_n_0_ph | 0)) {
      $nest_e3_0171 = $239;
      $arg_e_0172 = $arg_e_0170;
     } else {
      break L68;
     }
     while (1) {
      if ((HEAP8[$arg_id_0_ph + ($arg_e_0172 * 5 | 0) | 0] | 0) == 3) {
       $nest_e3_0_be = $nest_e3_0171 + 1 | 0;
      } else {
       $248 = $nest_e3_0171 - 1 | 0;
       if ($203 >>> 0 < (HEAP32[$arg_loc_0_ph + ($arg_e_0172 << 2) >> 2] | 0) >>> 0 & ($248 | 0) == ($nest_s2_0177 | 0)) {
        break;
       } else {
        $nest_e3_0_be = $248;
       }
      }
      $arg_e_0 = $arg_e_0172 + 1 | 0;
      if (($arg_e_0 | 0) < ($arg_n_0_ph | 0)) {
       $nest_e3_0171 = $nest_e3_0_be;
       $arg_e_0172 = $arg_e_0;
      } else {
       break L68;
      }
     }
     HEAP8[$arg_id_0_ph + ($arg_e_0172 * 5 | 0) + 4 | 0] = 1;
     HEAP8[$arg_id_0_ph + ($arg_s_0175 * 5 | 0) + 4 | 0] = 1;
     $nest_s2_1 = $239;
     $_pre_phi = $arg_e_0170;
    } else {
     $nest_s2_1 = $nest_s2_0177 - 1 | 0;
     $_pre_phi = $arg_s_0175 + 1 | 0;
    }
    if ((HEAP32[$arg_loc_0_ph + ($_pre_phi << 2) >> 2] | 0) >>> 0 < $203 >>> 0) {
     $arg_s_0175 = $_pre_phi;
     $nest_s2_0177 = $nest_s2_1;
    } else {
     break;
    }
   }
  }
 } while (0);
 $262 = _unget_string($12, 0) | 0;
 HEAP32[$tp >> 2] = $12;
 $264 = $12 + (_strlen($12 | 0) | 0) | 0;
 $265 = _get_ch() | 0;
 $266 = $265 & 255;
 HEAP32[$tp >> 2] = $12 + 1;
 HEAP8[$12] = $266;
 L84 : do {
  if ($266 << 24 >> 24 != 28 & ($262 | 0) == (HEAP32[89668] | 0)) {
   $mac_n_2_ph211 = 0;
   $arg_n_2_ph212 = 0;
   $n_0_ph213 = 0;
   $loc_tab_0_ph214 = 0;
   $num_0_ph215 = 0;
   $rm_0_ph216 = 0;
   $len_0_ph217 = 0;
   $271 = $265;
   while (1) {
    $273 = $271;
    while (1) {
     if (($273 | 0) == 24) {
      break;
     }
     HEAP32[$tp >> 2] = (HEAP32[$tp >> 2] | 0) - 1;
     _scan_token($273, $tp, $264) | 0;
     $273 = _get_ch() | 0;
     $280 = $273 & 255;
     $281 = HEAP32[$tp >> 2] | 0;
     HEAP32[$tp >> 2] = $281 + 1;
     HEAP8[$281] = $280;
     if (!($280 << 24 >> 24 != 28 & ($262 | 0) == (HEAP32[89668] | 0))) {
      break L84;
     }
    }
    _unget_ch();
    $288 = (HEAP32[$tp >> 2] | 0) - 1 | 0;
    HEAP32[$tp >> 2] = $288;
    $289 = $n_0_ph213 + 1 | 0;
    $292 = HEAP8[$mgc_index_0_ph + $n_0_ph213 | 0] | 0;
    if (($292 | 0) == 2) {
     $len_1159 = (HEAP32[89547] | 0) != 0 ? 4 : 2;
     label = 63;
    } else if (($292 | 0) == 4) {
     $len_1166 = (HEAP32[89547] | 0) != 0 ? 5 : 2;
     label = 64;
    } else if (($292 | 0) == 1) {
     $len_1159 = 4;
     label = 63;
    } else if (($292 | 0) == 3) {
     $len_1166 = 5;
     label = 64;
    } else {
     $rm_1 = $rm_0_ph216;
     $num_1 = $num_0_ph215;
     $loc_tab_1 = $loc_tab_0_ph214;
     $arg_n_3 = $arg_n_2_ph212;
     $mac_n_3 = $mac_n_2_ph211;
     $len_1160 = $len_0_ph217;
    }
    if ((label | 0) == 63) {
     label = 0;
     $rm_1 = HEAP8[$mac_id_0_ph + ($mac_n_2_ph211 << 2) + 3 | 0] | 0;
     $num_1 = $mac_n_2_ph211;
     $loc_tab_1 = $mac_loc_0_ph;
     $arg_n_3 = $arg_n_2_ph212;
     $mac_n_3 = $mac_n_2_ph211 + 1 | 0;
     $len_1160 = $len_1159;
    } else if ((label | 0) == 64) {
     label = 0;
     $rm_1 = HEAP8[$arg_id_0_ph + ($arg_n_2_ph212 * 5 | 0) + 4 | 0] | 0;
     $num_1 = $arg_n_2_ph212;
     $loc_tab_1 = $arg_loc_0_ph;
     $arg_n_3 = $arg_n_2_ph212 + 1 | 0;
     $mac_n_3 = $mac_n_2_ph211;
     $len_1160 = $len_1166;
    }
    if (($rm_1 | 0) == 0) {
     _memmove($288 | 0, HEAP32[$loc_tab_1 + ($num_1 << 2) >> 2] | 0, $len_1160 | 0) | 0;
     HEAP32[$tp >> 2] = (HEAP32[$tp >> 2] | 0) + $len_1160;
    }
    $317 = HEAP32[89668] | 0;
    HEAP32[$317 >> 2] = (HEAP32[$317 >> 2] | 0) + $len_1160;
    $320 = _get_ch() | 0;
    $321 = $320 & 255;
    $322 = HEAP32[$tp >> 2] | 0;
    HEAP32[$tp >> 2] = $322 + 1;
    HEAP8[$322] = $321;
    if ($321 << 24 >> 24 != 28 & ($262 | 0) == (HEAP32[89668] | 0)) {
     $mac_n_2_ph211 = $mac_n_3;
     $arg_n_2_ph212 = $arg_n_3;
     $n_0_ph213 = $289;
     $loc_tab_0_ph214 = $loc_tab_1;
     $num_0_ph215 = $num_1;
     $rm_0_ph216 = $rm_1;
     $len_0_ph217 = $len_1160;
     $271 = $320;
    } else {
     break;
    }
   }
  }
 } while (0);
 $_pre = HEAP32[$tp >> 2] | 0;
 if ($189) {
  $329 = $_pre;
 } else {
  $328 = $_pre - 1 | 0;
  HEAP32[$tp >> 2] = $328;
  $329 = $328;
 }
 HEAP8[$329] = 0;
 if (($262 | 0) == (HEAP32[89668] | 0)) {
  _get_ch() | 0;
 }
 _unget_ch();
 STACKTOP = sp;
 return $12 | 0;
}
function _dump_a_def($why, $dp, $newdef, $comment, $fp) {
 $why = $why | 0;
 $dp = $dp | 0;
 $newdef = $newdef | 0;
 $comment = $comment | 0;
 $fp = $fp | 0;
 var $1 = 0, $4 = 0, $5 = 0, $20 = 0, $commented_084 = 0, $23 = 0, $34 = 0, $38 = 0, $49 = 0, $50 = 0, $59 = 0, $cp_086 = 0, $i_085 = 0, $65 = 0, $77 = 0, $80 = 0, $91 = 0, $98 = 0, $109 = 0, $115 = 0, $126 = 0, $129 = 0, $140 = 0, $143 = 0, $144 = 0, $i_187 = 0, $146 = 0, $157 = 0, $161 = 0, $163 = 0, $174 = 0, $177 = 0, $179 = 0, $_ph = 0, $_lcssa = 0, $202 = 0, $205 = 0, $210 = 0, $221 = 0, $dp_idx82_val = 0, $223 = 0, $224 = 0, $227 = 0, $229 = 0, $_in_i = 0, $dp_0_3_val_pn_i = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $parm_sroa_0_0_copyload_i = 0, $parm_sroa_1_4_copyload_i = 0, $243 = 0, $254 = 0, $cp1_02_i = 0, $i_01_i = 0, $259 = 0, $260 = 0, $262 = 0, $273 = 0, $275 = 0, $278 = 0, $280 = 0, $291 = 0, $295 = 0, $297 = 0, $308 = 0, $311 = 0, $313 = 0, $324 = 0, $328 = 0, $330 = 0, $341 = 0, $347 = 0, $358 = 0, $364 = 0, $375 = 0, $378 = 0, $389 = 0, $395 = 0, $406 = 0, $409 = 0, $420 = 0, $cp_0_be_i = 0, $425 = 0, $428 = 0, $439 = 0, $442 = 0, $453 = 0, $456 = 0, $467 = 0, $471 = 0, $482 = 0, $486 = 0, $489 = 0, $500 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = $dp + 4 | 0;
 $4 = HEAP16[$1 >> 1] & -769;
 $5 = HEAP32[592] | 0;
 if (($5 | 0) != 0 & ($4 | 0) == -769) {
  STACKTOP = sp;
  return;
 }
 do {
  if (($4 | 0) < -772) {
   label = 6;
  } else {
   if (($5 | 0) != 0) {
    if ((HEAP8[$dp + 24 | 0] | 0) != 0) {
     label = 6;
     break;
    }
   }
   $commented_084 = 0;
   $20 = ($comment | 0) != 0;
  }
 } while (0);
 do {
  if ((label | 0) == 6) {
   if (($comment | 0) != 0) {
    $commented_084 = 1;
    $20 = 1;
    break;
   }
   STACKTOP = sp;
   return;
  }
 } while (0);
 if (($why | 0) != 0) {
  $23 = HEAP32[690] | 0;
  do {
   if ((HEAP32[89990] | 0) == ($fp | 0)) {
    $34 = 0;
   } else {
    if ((HEAP32[89994] | 0) == ($fp | 0)) {
     $34 = 1;
     break;
    }
    $34 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
   }
  } while (0);
  FUNCTION_TABLE_iiii[$23 & 31]($34, 13264, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $why, HEAP32[tempVarArgs + 8 >> 2] = $dp + 25, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 $38 = HEAP32[690] | 0;
 do {
  if ((HEAP32[89990] | 0) == ($fp | 0)) {
   $49 = 0;
  } else {
   if ((HEAP32[89994] | 0) == ($fp | 0)) {
    $49 = 1;
    break;
   }
   $49 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
  }
 } while (0);
 $50 = ($commented_084 | 0) != 0;
 FUNCTION_TABLE_iiii[$38 & 31]($49, 13096, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $50 ? 13e3 : 368656, HEAP32[tempVarArgs + 8 >> 2] = $dp + 25, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 do {
  if (($4 | 0) > -1) {
   if ((HEAP32[682] | 0) == 3) {
    $59 = HEAP32[676] | 0;
    if (($newdef | 0) == 0 & ($4 | 0) > 0) {
     $i_085 = 0;
     $cp_086 = HEAP32[$dp + 8 >> 2] | 0;
     while (1) {
      $65 = _strchr($cp_086 | 0, 44) | 0;
      if (($65 | 0) == 0) {
       HEAP32[93980 + ($i_085 << 3) >> 2] = _strlen($cp_086 | 0) | 0;
      } else {
       HEAP32[93980 + ($i_085 << 3) >> 2] = $65 - $cp_086;
      }
      HEAP32[93976 + ($i_085 << 3) >> 2] = $cp_086;
      $77 = $i_085 + 1 | 0;
      if (($77 | 0) < ($4 | 0)) {
       $i_085 = $77;
       $cp_086 = $65 + 1 | 0;
      } else {
       break;
      }
     }
    }
    $80 = HEAP32[690] | 0;
    do {
     if ((HEAP32[89990] | 0) == ($fp | 0)) {
      $91 = 0;
     } else {
      if ((HEAP32[89994] | 0) == ($fp | 0)) {
       $91 = 1;
       break;
      }
      $91 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
     }
    } while (0);
    FUNCTION_TABLE_iiii[$80 & 31]($91, 12712, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$dp + 8 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $59, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    break;
   }
   if (($newdef | 0) != 0) {
    $98 = HEAP32[690] | 0;
    do {
     if ((HEAP32[89990] | 0) == ($fp | 0)) {
      $109 = 0;
     } else {
      if ((HEAP32[89994] | 0) == ($fp | 0)) {
       $109 = 1;
       break;
      }
      $109 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
     }
    } while (0);
    FUNCTION_TABLE_iiii[$98 & 31]($109, 12544, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23494], tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    break;
   }
   if (($4 | 0) == 0) {
    $115 = HEAP32[686] | 0;
    do {
     if ((HEAP32[89990] | 0) == ($fp | 0)) {
      $126 = 0;
     } else {
      if ((HEAP32[89994] | 0) == ($fp | 0)) {
       $126 = 1;
       break;
      }
      $126 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
     }
    } while (0);
    FUNCTION_TABLE_iii[$115 & 15](12416, $126) | 0;
    break;
   }
   $129 = HEAP32[688] | 0;
   do {
    if ((HEAP32[89990] | 0) == ($fp | 0)) {
     $140 = 0;
    } else {
     if ((HEAP32[89994] | 0) == ($fp | 0)) {
      $140 = 1;
      break;
     }
     $140 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
    }
   } while (0);
   FUNCTION_TABLE_iii[$129 & 15](40, $140) | 0;
   $143 = HEAP32[688] | 0;
   L60 : do {
    if (($4 | 0) > 0) {
     $i_187 = 0;
     $144 = $143;
     while (1) {
      $146 = (($i_187 | 0) % 26 | 0) + 97 | 0;
      do {
       if ((HEAP32[89990] | 0) == ($fp | 0)) {
        $157 = 0;
       } else {
        if ((HEAP32[89994] | 0) == ($fp | 0)) {
         $157 = 1;
         break;
        }
        $157 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
       }
      } while (0);
      FUNCTION_TABLE_iii[$144 & 15]($146, $157) | 0;
      if (($i_187 | 0) > 25) {
       $161 = HEAP32[688] | 0;
       $163 = (($i_187 | 0) / 26 | 0) + 48 | 0;
       do {
        if ((HEAP32[89990] | 0) == ($fp | 0)) {
         $174 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($fp | 0)) {
          $174 = 1;
          break;
         }
         $174 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$161 & 15]($163, $174) | 0;
      }
      $177 = $i_187 + 1 | 0;
      $179 = HEAP32[688] | 0;
      if (($177 | 0) >= ($4 | 0)) {
       $_lcssa = $179;
       break L60;
      }
      do {
       if ((HEAP32[89990] | 0) == ($fp | 0)) {
        $_ph = 0;
       } else {
        if ((HEAP32[89994] | 0) == ($fp | 0)) {
         $_ph = 1;
         break;
        }
        $_ph = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
       }
      } while (0);
      FUNCTION_TABLE_iii[$179 & 15](44, $_ph) | 0;
      $i_187 = $177;
      $144 = HEAP32[688] | 0;
     }
    } else {
     $_lcssa = $143;
    }
   } while (0);
   do {
    if ((HEAP32[89990] | 0) == ($fp | 0)) {
     $202 = 0;
    } else {
     if ((HEAP32[89994] | 0) == ($fp | 0)) {
      $202 = 1;
      break;
     }
     $202 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
    }
   } while (0);
   FUNCTION_TABLE_iii[$_lcssa & 15](41, $202) | 0;
  }
 } while (0);
 $205 = $dp + 12 | 0;
 L85 : do {
  if ((HEAP8[HEAP32[$205 >> 2] | 0] | 0) != 0) {
   $210 = HEAP32[688] | 0;
   do {
    if ((HEAP32[89990] | 0) == ($fp | 0)) {
     $221 = 0;
    } else {
     if ((HEAP32[89994] | 0) == ($fp | 0)) {
      $221 = 1;
      break;
     }
     $221 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
    }
   } while (0);
   FUNCTION_TABLE_iii[$210 & 15](32, $221) | 0;
   $dp_idx82_val = HEAP32[$205 >> 2] | 0;
   $223 = HEAP16[$1 >> 1] | 0;
   $224 = HEAP8[$dp_idx82_val] | 0;
   if ($224 << 24 >> 24 == 0) {
    break;
   }
   $227 = ($223 & 256 | 0) != 0;
   $229 = ($223 & -769) - 1 | 0;
   $dp_0_3_val_pn_i = $dp_idx82_val;
   $_in_i = $224;
   while (1) {
    $231 = $dp_0_3_val_pn_i + 1 | 0;
    $232 = $_in_i & 255;
    L94 : do {
     switch ($232 | 0) {
     case 127:
      {
       $234 = $dp_0_3_val_pn_i + 2 | 0;
       $237 = (HEAPU8[$231] | 0) - 1 | 0;
       if ((HEAP32[592] | 0) == 0) {
        $311 = HEAP32[688] | 0;
        $313 = (($237 | 0) % 26 | 0) + 97 | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $324 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $324 = 1;
           break;
          }
          $324 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$311 & 15]($313, $324) | 0;
        if (($237 | 0) <= 26) {
         $cp_0_be_i = $234;
         break L94;
        }
        $328 = HEAP32[688] | 0;
        $330 = (($237 | 0) / 26 | 0) + 48 | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $341 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $341 = 1;
           break;
          }
          $341 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$328 & 15]($330, $341) | 0;
        $cp_0_be_i = $234;
        break L94;
       }
       $parm_sroa_0_0_copyload_i = HEAP32[93976 + ($237 << 3) >> 2] | 0;
       $parm_sroa_1_4_copyload_i = HEAP32[93980 + ($237 << 3) >> 2] | 0;
       if ($227 & ($237 | 0) == ($229 | 0)) {
        $243 = HEAP32[686] | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $254 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $254 = 1;
           break;
          }
          $254 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$243 & 15](14304, $254) | 0;
        $cp_0_be_i = $234;
        break L94;
       }
       if ((HEAP32[682] | 0) == 3) {
        if (($parm_sroa_1_4_copyload_i | 0) == 0) {
         $cp_0_be_i = $234;
         break L94;
        } else {
         $i_01_i = 0;
         $cp1_02_i = $parm_sroa_0_0_copyload_i;
        }
        while (1) {
         $259 = HEAP32[688] | 0;
         $260 = $cp1_02_i + 1 | 0;
         $262 = HEAP8[$cp1_02_i] | 0;
         do {
          if ((HEAP32[89990] | 0) == ($fp | 0)) {
           $273 = 0;
          } else {
           if ((HEAP32[89994] | 0) == ($fp | 0)) {
            $273 = 1;
            break;
           }
           $273 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
          }
         } while (0);
         FUNCTION_TABLE_iii[$259 & 15]($262, $273) | 0;
         $275 = $i_01_i + 1 | 0;
         if ($275 >>> 0 < $parm_sroa_1_4_copyload_i >>> 0) {
          $i_01_i = $275;
          $cp1_02_i = $260;
         } else {
          $cp_0_be_i = $234;
          break L94;
         }
        }
       }
       $278 = HEAP32[688] | 0;
       $280 = (($237 | 0) % 26 | 0) + 97 | 0;
       do {
        if ((HEAP32[89990] | 0) == ($fp | 0)) {
         $291 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($fp | 0)) {
          $291 = 1;
          break;
         }
         $291 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$278 & 15]($280, $291) | 0;
       if (($237 | 0) <= 26) {
        $cp_0_be_i = $234;
        break L94;
       }
       $295 = HEAP32[688] | 0;
       $297 = (($237 | 0) / 26 | 0) + 48 | 0;
       do {
        if ((HEAP32[89990] | 0) == ($fp | 0)) {
         $308 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($fp | 0)) {
          $308 = 1;
          break;
         }
         $308 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$295 & 15]($297, $308) | 0;
       $cp_0_be_i = $234;
       break;
      }
     case 25:
      {
       if ((HEAP32[592] | 0) != 0) {
        $cp_0_be_i = $231;
        break L94;
       }
       $347 = HEAP32[688] | 0;
       do {
        if ((HEAP32[89990] | 0) == ($fp | 0)) {
         $358 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($fp | 0)) {
          $358 = 1;
          break;
         }
         $358 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$347 & 15](25, $358) | 0;
       $cp_0_be_i = $231;
       break;
      }
     case 30:
      {
       if ((HEAP32[592] | 0) == 0) {
        $378 = HEAP32[688] | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $389 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $389 = 1;
           break;
          }
          $389 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$378 & 15](30, $389) | 0;
        $cp_0_be_i = $231;
        break L94;
       } else {
        $364 = HEAP32[686] | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $375 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $375 = 1;
           break;
          }
          $375 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$364 & 15](12024, $375) | 0;
        $cp_0_be_i = $231;
        break L94;
       }
       break;
      }
     case 29:
      {
       if ((HEAP32[592] | 0) == 0) {
        $409 = HEAP32[688] | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $420 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $420 = 1;
           break;
          }
          $420 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$409 & 15](29, $420) | 0;
        $cp_0_be_i = $231;
        break L94;
       } else {
        $395 = HEAP32[686] | 0;
        do {
         if ((HEAP32[89990] | 0) == ($fp | 0)) {
          $406 = 0;
         } else {
          if ((HEAP32[89994] | 0) == ($fp | 0)) {
           $406 = 1;
           break;
          }
          $406 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
         }
        } while (0);
        FUNCTION_TABLE_iii[$395 & 15](11936, $406) | 0;
        $cp_0_be_i = $231;
        break L94;
       }
       break;
      }
     case 31:
      {
       if ((HEAP32[682] | 0) != 1) {
        $cp_0_be_i = $231;
        break L94;
       }
       $428 = HEAP32[686] | 0;
       do {
        if ((HEAP32[89990] | 0) == ($fp | 0)) {
         $439 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($fp | 0)) {
          $439 = 1;
          break;
         }
         $439 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$428 & 15](11848, $439) | 0;
       $cp_0_be_i = $231;
       break;
      }
     default:
      {
       $442 = HEAP32[688] | 0;
       do {
        if ((HEAP32[89990] | 0) == ($fp | 0)) {
         $453 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($fp | 0)) {
          $453 = 1;
          break;
         }
         $453 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$442 & 15]($232, $453) | 0;
       $cp_0_be_i = $231;
      }
     }
    } while (0);
    $425 = HEAP8[$cp_0_be_i] | 0;
    if ($425 << 24 >> 24 == 0) {
     break L85;
    } else {
     $dp_0_3_val_pn_i = $cp_0_be_i;
     $_in_i = $425;
    }
   }
  }
 } while (0);
 if ($50) {
  $456 = HEAP32[686] | 0;
  do {
   if ((HEAP32[89990] | 0) == ($fp | 0)) {
    $467 = 0;
   } else {
    if ((HEAP32[89994] | 0) == ($fp | 0)) {
     $467 = 1;
     break;
    }
    $467 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
   }
  } while (0);
  FUNCTION_TABLE_iii[$456 & 15](12336, $467) | 0;
 }
 if ($20) {
  $471 = HEAP32[690] | 0;
  do {
   if ((HEAP32[89990] | 0) == ($fp | 0)) {
    $482 = 0;
   } else {
    if ((HEAP32[89994] | 0) == ($fp | 0)) {
     $482 = 1;
     break;
    }
    $482 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
   }
  } while (0);
  $486 = HEAP32[$dp + 20 >> 2] | 0;
  FUNCTION_TABLE_iiii[$471 & 31]($482, 12272, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$dp + 16 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $486, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 $489 = HEAP32[688] | 0;
 do {
  if ((HEAP32[89990] | 0) == ($fp | 0)) {
   $500 = 0;
  } else {
   if ((HEAP32[89994] | 0) == ($fp | 0)) {
    $500 = 1;
    break;
   }
   $500 = (HEAP32[89996] | 0) == ($fp | 0) ? 2 : -1;
  }
 } while (0);
 FUNCTION_TABLE_iii[$489 & 15](10, $500) | 0;
 STACKTOP = sp;
 return;
}
function _rescan($outer, $in, $out, $out_end) {
 $outer = $outer | 0;
 $in = $in | 0;
 $out = $out | 0;
 $out_end = $out_end | 0;
 var $out_p = 0, $endf = 0, $mgc_seq = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $cur_cp_0 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $inner_0_ph = 0, $mac_arg_start_0_ph = 0, $tp_0_ph = 0, $40 = 0, $43 = 0, $44 = 0, $mac_arg_start_0_ph104123 = 0, $46 = 0, $54 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $71 = 0, $73 = 0, $74 = 0, $mac_arg_start_1 = 0, $77 = 0, $78 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $93 = 0, $94 = 0, $101 = 0, $102 = 0, $105 = 0, $106 = 0, $109 = 0, $112 = 0, $len_0 = 0, $122 = 0, $125 = 0, $129 = 0, $130 = 0, $135 = 0, $153 = 0, $i_0_in_i = 0, $i_0_i = 0, $i_0_in_i76 = 0, $i_0_i77 = 0, $175 = 0, $191 = 0, $192 = 0, $197 = 0, $in_src_line_col_sroa_0_0_load87 = 0, $in_src_n_0 = 0, $201 = 0, $206 = 0, $217 = 0, $218 = 0, $tp_1 = 0, $219 = 0, $224 = 0, $225 = 0, $227 = 0, $236 = 0, $240 = 0, $243 = 0, $248 = 0, $250 = 0, $260 = 0, $266 = 0, $in_src_line_col_sroa_0_0_load88 = 0, $in_src_n_1 = 0, $tp_2 = 0, $267 = 0, $269 = 0, $277 = 0, $278 = 0, $280 = 0, $289 = 0, $293 = 0, $296 = 0, $301 = 0, $303 = 0, $310 = 0, $i_0_in_i82 = 0, $i_0_i83 = 0, $320 = 0, $_pre184 = 0, $328 = 0, $331 = 0, $inner_1 = 0, $tp_3 = 0, $337 = 0, $340 = 0, $347 = 0, $_lcssa = 0, $_pr91 = 0, $357 = 0, $371 = 0, $384 = 0, $390 = 0, $391 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $out_p = sp | 0;
 $endf = sp + 8 | 0;
 $mgc_seq = sp + 16 | 0;
 HEAP32[$out_p >> 2] = $out;
 if ((HEAP32[89594] & 4 | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 11880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[23344] | 0) + 1, HEAP32[tempVarArgs + 8 >> 2] = ($outer | 0) == 0 ? 12456 : $outer + 25 | 0, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _dump_string(11808, $in);
 }
 $12 = ($outer | 0) == 0;
 do {
  if (!$12) {
   $14 = HEAP32[23344] | 0;
   if (($14 | 0) <= 63) {
    HEAP32[93384 + ($14 << 3) >> 2] = $outer;
    HEAP32[23344] = $14 + 1;
    HEAP32[93388 + ($14 << 3) >> 2] = 0;
    break;
   }
   $17 = HEAP32[89614] | 0;
   $18 = $outer + 25 | 0;
   if (($18 | 0) != ($17 | 0)) {
    _expanding($18, 0);
   }
   _cerror(11304, $17, 64, $18);
   $_0 = 0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 if ((HEAP32[682] | 0) == 3) {
  _get_ch() | 0;
  _unget_ch();
  $cur_cp_0 = HEAP32[HEAP32[89668] >> 2] | 0;
 } else {
  $cur_cp_0 = 0;
 }
 $34 = ($outer | 0) != 0;
 $35 = $outer + 25 | 0;
 $36 = _unget_string($in, $34 ? $35 : 0) | 0;
 $37 = $mgc_seq | 0;
 $38 = $mgc_seq + 4 | 0;
 $39 = $mgc_seq;
 $tp_0_ph = 0;
 $mac_arg_start_0_ph = 0;
 $inner_0_ph = 0;
 L17 : while (1) {
  $40 = _get_ch() | 0;
  $43 = ($40 | 0) == 28;
  if (($36 | 0) != (HEAP32[89668] | 0) | $43) {
   $_lcssa = $43;
   label = 87;
   break;
  } else {
   $mac_arg_start_0_ph104123 = $mac_arg_start_0_ph;
   $44 = $40;
  }
  L19 : while (1) {
   $46 = $44;
   L21 : while (1) {
    do {
     if ((HEAP16[(HEAP32[91636] | 0) + ($46 << 1) >> 1] & 64) == 0) {
      $62 = HEAP32[$out_p >> 2] | 0;
      if (($46 | 0) != 24) {
       break L19;
      }
      HEAP32[$out_p >> 2] = $62 + 1;
      HEAP8[$62] = 24;
      $65 = _get_ch() | 0;
      $67 = HEAP32[$out_p >> 2] | 0;
      HEAP32[$out_p >> 2] = $67 + 1;
      HEAP8[$67] = $65;
      if (($65 | 0) == 3) {
       label = 19;
       break L21;
      } else if (($65 | 0) == 1) {
       $mac_arg_start_1 = $mac_arg_start_0_ph104123;
       break L21;
      } else if (($65 | 0) == 4) {
       if ((HEAP32[89547] | 0) == 0) {
        break;
       }
       $93 = (_get_ch() | 0) & 255;
       $94 = HEAP32[$out_p >> 2] | 0;
       HEAP32[$out_p >> 2] = $94 + 1;
       HEAP8[$94] = $93;
      } else if (($65 | 0) != 2) {
       break;
      }
      if ((HEAP32[89547] | 0) == 0) {
       break;
      }
      $101 = (_get_ch() | 0) & 255;
      $102 = HEAP32[$out_p >> 2] | 0;
      HEAP32[$out_p >> 2] = $102 + 1;
      HEAP8[$102] = $101;
      $105 = (_get_ch() | 0) & 255;
      $106 = HEAP32[$out_p >> 2] | 0;
      HEAP32[$out_p >> 2] = $106 + 1;
      HEAP8[$106] = $105;
     } else {
      $54 = HEAP32[$out_p >> 2] | 0;
      HEAP32[$out_p >> 2] = $54 + 1;
      HEAP8[$54] = $46;
     }
    } while (0);
    $56 = _get_ch() | 0;
    $59 = ($56 | 0) == 28;
    if (($36 | 0) != (HEAP32[89668] | 0) | $59) {
     $_lcssa = $59;
     label = 87;
     break L17;
    } else {
     $46 = $56;
    }
   }
   if ((label | 0) == 19) {
    label = 0;
    $71 = (HEAP32[$out_p >> 2] | 0) - 2 | 0;
    $73 = (_get_ch() | 0) & 255;
    $74 = HEAP32[$out_p >> 2] | 0;
    HEAP32[$out_p >> 2] = $74 + 1;
    HEAP8[$74] = $73;
    $mac_arg_start_1 = $71;
   }
   $77 = (_get_ch() | 0) & 255;
   $78 = HEAP32[$out_p >> 2] | 0;
   HEAP32[$out_p >> 2] = $78 + 1;
   HEAP8[$78] = $77;
   $81 = (_get_ch() | 0) & 255;
   $82 = HEAP32[$out_p >> 2] | 0;
   HEAP32[$out_p >> 2] = $82 + 1;
   HEAP8[$82] = $81;
   $84 = _get_ch() | 0;
   $87 = ($84 | 0) == 28;
   if (($36 | 0) != (HEAP32[89668] | 0) | $87) {
    $_lcssa = $87;
    label = 87;
    break L17;
   } else {
    $mac_arg_start_0_ph104123 = $mac_arg_start_1;
    $44 = $84;
   }
  }
  $109 = _scan_token($46, $out_p, $out_end) | 0;
  $112 = ($46 | 0) == 26;
  if ((HEAP32[682] | 0) == 3 & $112) {
   $len_0 = (HEAP32[22292] | 0) != 0 ? 3 : 1;
  } else {
   $len_0 = 0;
  }
  L40 : do {
   if (($109 | 0) != 65 | ($46 | 0) == 25) {
    $tp_3 = $62;
    $inner_1 = $inner_0_ph;
   } else {
    $122 = _look_id($62 + $len_0 | 0) | 0;
    if (($122 | 0) == 0) {
     $tp_3 = $62;
     $inner_1 = 0;
     break;
    }
    HEAP32[$endf >> 2] = 0;
    $125 = HEAP32[22292] | 0;
    if (($125 | 0) != 0) {
     _memset($39 | 0, 0, 12) | 0;
    }
    $129 = $122 + 4 | 0;
    $130 = HEAP16[$129 >> 1] | 0;
    do {
     if ($130 << 16 >> 16 > -1 | $130 << 16 >> 16 == -769) {
      $135 = _squeeze_ws($out_p, $endf, ($125 | 0) != 0 ? $mgc_seq : 0) | 0;
      if (($135 | 0) == 0) {
       _unget_string(9640, 0) | 0;
      } else {
       if (!((HEAP32[592] | 0) != 0 & ($135 | 0) == 28)) {
        _unget_ch();
       }
       if (($135 | 0) == 40) {
        label = 40;
        break;
       }
      }
      if ((HEAP32[592] | 0) != 0) {
       break;
      }
      if ((HEAP32[4] & 8 | 0) == 0) {
       break;
      }
      _cwarn(14584, $122 + 25 | 0, 0, 0);
     } else {
      label = 40;
     }
    } while (0);
    L57 : do {
     if ((label | 0) == 40) {
      label = 0;
      $153 = HEAP32[682] | 0;
      L59 : do {
       if (($153 | 0) == 9) {
        $i_0_in_i = HEAP32[23344] | 0;
        while (1) {
         $i_0_i = $i_0_in_i - 1 | 0;
         if (($i_0_in_i | 0) <= 0) {
          break L59;
         }
         if ((HEAP32[93384 + ($i_0_i << 3) >> 2] | 0) == ($122 | 0)) {
          break;
         } else {
          $i_0_in_i = $i_0_i;
         }
        }
        if ((HEAP32[93388 + ($i_0_i << 3) >> 2] | 0) != 0) {
         break;
        }
        if (($153 | 0) == 3) {
         label = 46;
        } else {
         break L57;
        }
       } else if (($153 | 0) == 3) {
        label = 46;
       } else {
        break L57;
       }
      } while (0);
      L66 : do {
       if ((label | 0) == 46) {
        label = 0;
        $i_0_in_i76 = HEAP32[23344] | 0;
        while (1) {
         $i_0_i77 = $i_0_in_i76 - 1 | 0;
         if (($i_0_in_i76 | 0) <= 0) {
          break L66;
         }
         if ((HEAP32[93384 + ($i_0_i77 << 3) >> 2] | 0) == ($122 | 0)) {
          break;
         } else {
          $i_0_in_i76 = $i_0_i77;
         }
        }
        $175 = HEAP32[93388 + ($i_0_i77 << 3) >> 2] | 0;
        if (($175 | 0) == 1) {
         break;
        } else if (($175 | 0) != 2) {
         break L57;
        }
        if (!($112 | (HEAP32[91374] | 0) != 0)) {
         break L57;
        }
       }
      } while (0);
      do {
       if ((HEAP32[22292] | 0) == 0) {
        $tp_2 = $62;
        $in_src_n_1 = 0;
        $in_src_line_col_sroa_0_0_load88 = 0;
        $266 = 0;
       } else {
        if ($112) {
         $191 = (HEAPU8[$62 + 2 | 0] | -256) + ((HEAPU8[$62 + 1 | 0] | 0) * 255 | 0) | 0;
         $192 = HEAP32[89680] | 0;
         $in_src_n_0 = $191;
         $in_src_line_col_sroa_0_0_load87 = HEAP32[$192 + ($191 << 4) >> 2] | 0;
         $197 = HEAP32[$192 + ($191 << 4) + 4 >> 2] | 0;
        } else {
         $in_src_n_0 = 0;
         $in_src_line_col_sroa_0_0_load87 = 0;
         $197 = 0;
        }
        if ((HEAP16[$129 >> 1] | 0) <= -1) {
         $tp_2 = $62;
         $in_src_n_1 = $in_src_n_0;
         $in_src_line_col_sroa_0_0_load88 = $in_src_line_col_sroa_0_0_load87;
         $266 = $197;
         break;
        }
        $201 = HEAP32[$37 >> 2] | 0;
        if (($201 | 0) == 0) {
         $tp_2 = $62;
         $in_src_n_1 = $in_src_n_0;
         $in_src_line_col_sroa_0_0_load88 = $in_src_line_col_sroa_0_0_load87;
         $266 = $197;
         break;
        }
        $206 = (HEAP32[89547] | 0) != 0 ? 5 : 2;
        do {
         if (($62 - 5 | 0) == ($mac_arg_start_0_ph104123 | 0)) {
          if ((HEAP8[$201] | 0) != 24) {
           $tp_1 = $62;
           $218 = $201;
           break;
          }
          if ((HEAP8[$201 + 1 | 0] | 0) != 4) {
           $tp_1 = $62;
           $218 = $201;
           break;
          }
          $217 = $201 + $206 | 0;
          HEAP32[$37 >> 2] = $217;
          $tp_1 = $mac_arg_start_0_ph104123;
          $218 = $217;
         } else {
          $tp_1 = $62;
          $218 = $201;
         }
        } while (0);
        $219 = HEAP32[$38 >> 2] | 0;
        if (($219 | 0) == ($218 | 0)) {
         $tp_2 = $tp_1;
         $in_src_n_1 = $in_src_n_0;
         $in_src_line_col_sroa_0_0_load88 = $in_src_line_col_sroa_0_0_load87;
         $266 = $197;
         break;
        }
        $224 = $219 - $218 | 0;
        $225 = HEAP32[89668] | 0;
        $227 = HEAP32[$225 + 52 >> 2] | 0;
        if ((HEAP32[$225 + 8 >> 2] | 0) == 0) {
         $236 = (HEAP32[$225 >> 2] | 0) - $227 | 0;
         $240 = _xrealloc($227, $224 + 1 + (_strlen($227 | 0) | 0) | 0) | 0;
         HEAP32[(HEAP32[89668] | 0) + 52 >> 2] = $240;
         $243 = HEAP32[89668] | 0;
         HEAP32[$243 >> 2] = (HEAP32[$243 + 52 >> 2] | 0) + $236;
         $248 = HEAP32[89668] | 0;
        } else {
         $248 = $225;
        }
        $250 = HEAP32[$248 >> 2] | 0;
        _memmove($250 + $224 | 0, $250 | 0, (_strlen($250 | 0) | 0) + 1 | 0) | 0;
        _memcpy(HEAP32[HEAP32[89668] >> 2] | 0, $218 | 0, $224) | 0;
        $260 = _remove_magics(HEAP32[HEAP32[89668] >> 2] | 0, 0) | 0;
        _strcpy(HEAP32[HEAP32[89668] >> 2] | 0, $260 | 0) | 0;
        _free($260);
        $tp_2 = $tp_1;
        $in_src_n_1 = $in_src_n_0;
        $in_src_line_col_sroa_0_0_load88 = $in_src_line_col_sroa_0_0_load87;
        $266 = $197;
       }
      } while (0);
      $267 = _replace($122, $tp_2, $out_end, $outer, $36, $in_src_line_col_sroa_0_0_load88, $266, $in_src_n_1) | 0;
      HEAP32[$out_p >> 2] = $267;
      if (($267 | 0) == 0) {
       break L17;
      } else {
       $tp_3 = $tp_2;
       $inner_1 = $122;
       break L40;
      }
     }
    } while (0);
    $269 = HEAP32[$endf >> 2] | 0;
    do {
     if (($269 | 0) != 0) {
      if ((HEAP8[$269] | 0) == 0) {
       break;
      }
      $277 = (HEAP32[$out_p >> 2] | 0) - $269 | 0;
      $278 = HEAP32[89668] | 0;
      $280 = HEAP32[$278 + 52 >> 2] | 0;
      if ((HEAP32[$278 + 8 >> 2] | 0) == 0) {
       $289 = (HEAP32[$278 >> 2] | 0) - $280 | 0;
       $293 = _xrealloc($280, $277 + 1 + (_strlen($280 | 0) | 0) | 0) | 0;
       HEAP32[(HEAP32[89668] | 0) + 52 >> 2] = $293;
       $296 = HEAP32[89668] | 0;
       HEAP32[$296 >> 2] = (HEAP32[$296 + 52 >> 2] | 0) + $289;
       $301 = HEAP32[89668] | 0;
      } else {
       $301 = $278;
      }
      $303 = HEAP32[$301 >> 2] | 0;
      _memmove($303 + $277 | 0, $303 | 0, (_strlen($303 | 0) | 0) + 1 | 0) | 0;
      _memcpy(HEAP32[HEAP32[89668] >> 2] | 0, $269 | 0, $277) | 0;
      $310 = HEAP32[$endf >> 2] | 0;
      HEAP32[$out_p >> 2] = $310;
      HEAP8[$310] = 0;
     }
    } while (0);
    $i_0_in_i82 = HEAP32[23344] | 0;
    while (1) {
     $i_0_i83 = $i_0_in_i82 - 1 | 0;
     if (($i_0_in_i82 | 0) <= 0) {
      $tp_3 = $62;
      $inner_1 = $122;
      break L40;
     }
     if ((HEAP32[93384 + ($i_0_i83 << 3) >> 2] | 0) == ($122 | 0)) {
      break;
     } else {
      $i_0_in_i82 = $i_0_i83;
     }
    }
    $320 = HEAP32[93388 + ($i_0_i83 << 3) >> 2] | 0;
    $_pre184 = HEAP32[682] | 0;
    if (($320 | 0) == 0) {
     $328 = ($_pre184 | 0) != 9;
    } else {
     if (!(($_pre184 | 0) == 3 & ($320 | 0) == 2)) {
      $tp_3 = $62;
      $inner_1 = $122;
      break;
     }
     if ($112 | (HEAP32[91374] | 0) != 0) {
      $tp_3 = $62;
      $inner_1 = $122;
      break;
     } else {
      $328 = 1;
     }
    }
    if (!($328 & $112)) {
     $331 = HEAP32[$out_p >> 2] | 0;
     HEAP32[$out_p >> 2] = $331 + 1;
     _memmove($62 + 1 | 0, $62 | 0, $331 - $62 | 0) | 0;
    }
    HEAP8[$62] = 25;
    $tp_3 = $62;
    $inner_1 = $122;
   }
  } while (0);
  $337 = HEAP32[$out_p >> 2] | 0;
  if ($337 >>> 0 < $out_end >>> 0) {
   $tp_0_ph = $tp_3;
   $mac_arg_start_0_ph = $mac_arg_start_0_ph104123;
   $inner_0_ph = $inner_1;
  } else {
   label = 81;
   break;
  }
 }
 do {
  if ((label | 0) == 81) {
   HEAP8[$337] = 0;
   $340 = $34 ? $35 : $in;
   if (!($12 | ($35 | 0) == (HEAP32[89614] | 0))) {
    _expanding($35, 0);
   }
   do {
    if (($inner_1 | 0) != 0) {
     $347 = $inner_1 + 25 | 0;
     if (($347 | 0) == (HEAP32[89614] | 0)) {
      break;
     }
     _expanding($347, 0);
    }
   } while (0);
   _cerror(15464, $340, 0, $out);
   HEAP32[$out_p >> 2] = 0;
  } else if ((label | 0) == 87) {
   $_pr91 = HEAP32[$out_p >> 2] | 0;
   if (($_pr91 | 0) == 0) {
    break;
   }
   HEAP8[$_pr91] = 0;
   if ((HEAP32[682] | 0) != 3) {
    _unget_ch();
    break;
   }
   if ($_lcssa) {
    break;
   }
   _unget_ch();
   $357 = HEAP32[89668] | 0;
   if (!($34 & ($357 | 0) != 0)) {
    break;
   }
   if ((HEAP32[$357 >> 2] | 0) == ($cur_cp_0 | 0)) {
    break;
   }
   if (($tp_0_ph | 0) != 0) {
    if ((HEAP8[$tp_0_ph] | 0) == 25) {
     break;
    }
   }
   $371 = HEAP32[4] | 0;
   if ((HEAP32[91374] | 0) == 0) {
    if (($371 & 1 | 0) == 0) {
     break;
    }
   } else {
    if (($371 & 8 | 0) == 0) {
     break;
    }
   }
   if (($35 | 0) != (HEAP32[89614] | 0)) {
    _expanding($35, 0);
   }
   do {
    if (($inner_0_ph | 0) != 0) {
     $384 = $inner_0_ph + 25 | 0;
     if (($384 | 0) == (HEAP32[89614] | 0)) {
      break;
     }
     _expanding($384, 0);
    }
   } while (0);
   _cwarn(11608, $in, 0, $35);
  }
 } while (0);
 do {
  if (!$12) {
   $390 = HEAP32[23344] | 0;
   $391 = $390 - 1 | 0;
   HEAP32[93384 + ($391 << 3) >> 2] = 0;
   if (($390 | 0) == 0) {
    break;
   }
   HEAP32[23344] = $391;
  }
 } while (0);
 if ((HEAP32[89594] & 4 | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 11880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[23344] | 0) + 1, HEAP32[tempVarArgs + 8 >> 2] = $34 ? $35 : 12456, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _dump_string(11488, $out);
 }
 $_0 = HEAP32[$out_p >> 2] | 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _free($mem) {
 $mem = $mem | 0;
 var $3 = 0, $4 = 0, $5 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $_sum232 = 0, $24 = 0, $25 = 0, $26 = 0, $32 = 0, $37 = 0, $40 = 0, $43 = 0, $64 = 0, $_pre_phi306 = 0, $69 = 0, $72 = 0, $75 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $95 = 0, $99 = 0, $100 = 0, $RP_0 = 0, $R_0 = 0, $102 = 0, $103 = 0, $106 = 0, $107 = 0, $R_1 = 0, $118 = 0, $120 = 0, $134 = 0, $151 = 0, $164 = 0, $177 = 0, $psize_0 = 0, $p_0 = 0, $189 = 0, $193 = 0, $194 = 0, $204 = 0, $215 = 0, $222 = 0, $223 = 0, $228 = 0, $231 = 0, $234 = 0, $257 = 0, $_pre_phi304 = 0, $262 = 0, $265 = 0, $268 = 0, $273 = 0, $278 = 0, $282 = 0, $288 = 0, $289 = 0, $293 = 0, $294 = 0, $RP9_0 = 0, $R7_0 = 0, $296 = 0, $297 = 0, $300 = 0, $301 = 0, $R7_1 = 0, $313 = 0, $315 = 0, $329 = 0, $346 = 0, $359 = 0, $psize_1 = 0, $385 = 0, $388 = 0, $390 = 0, $391 = 0, $392 = 0, $398 = 0, $399 = 0, $_pre_phi = 0, $F16_0 = 0, $409 = 0, $410 = 0, $417 = 0, $418 = 0, $421 = 0, $423 = 0, $426 = 0, $431 = 0, $I18_0 = 0, $438 = 0, $442 = 0, $443 = 0, $458 = 0, $T_0 = 0, $K19_0 = 0, $467 = 0, $468 = 0, $481 = 0, $482 = 0, $484 = 0, $496 = 0, $sp_0_in_i = 0, $sp_0_i = 0, label = 0;
 if (($mem | 0) == 0) {
  return;
 }
 $3 = $mem - 8 | 0;
 $4 = $3;
 $5 = HEAP32[92178] | 0;
 if ($3 >>> 0 < $5 >>> 0) {
  _abort();
 }
 $10 = HEAP32[$mem - 4 >> 2] | 0;
 $11 = $10 & 3;
 if (($11 | 0) == 1) {
  _abort();
 }
 $14 = $10 & -8;
 $15 = $mem + ($14 - 8) | 0;
 $16 = $15;
 L10 : do {
  if (($10 & 1 | 0) == 0) {
   $21 = HEAP32[$3 >> 2] | 0;
   if (($11 | 0) == 0) {
    return;
   }
   $_sum232 = -8 - $21 | 0;
   $24 = $mem + $_sum232 | 0;
   $25 = $24;
   $26 = $21 + $14 | 0;
   if ($24 >>> 0 < $5 >>> 0) {
    _abort();
   }
   if (($25 | 0) == (HEAP32[92179] | 0)) {
    $177 = $mem + ($14 - 4) | 0;
    if ((HEAP32[$177 >> 2] & 3 | 0) != 3) {
     $p_0 = $25;
     $psize_0 = $26;
     break;
    }
    HEAP32[92176] = $26;
    HEAP32[$177 >> 2] = HEAP32[$177 >> 2] & -2;
    HEAP32[$mem + ($_sum232 + 4) >> 2] = $26 | 1;
    HEAP32[$15 >> 2] = $26;
    return;
   }
   $32 = $21 >>> 3;
   if ($21 >>> 0 < 256 >>> 0) {
    $37 = HEAP32[$mem + ($_sum232 + 8) >> 2] | 0;
    $40 = HEAP32[$mem + ($_sum232 + 12) >> 2] | 0;
    $43 = 368736 + ($32 << 1 << 2) | 0;
    do {
     if (($37 | 0) != ($43 | 0)) {
      if ($37 >>> 0 < $5 >>> 0) {
       _abort();
      }
      if ((HEAP32[$37 + 12 >> 2] | 0) == ($25 | 0)) {
       break;
      }
      _abort();
     }
    } while (0);
    if (($40 | 0) == ($37 | 0)) {
     HEAP32[92174] = HEAP32[92174] & ~(1 << $32);
     $p_0 = $25;
     $psize_0 = $26;
     break;
    }
    do {
     if (($40 | 0) == ($43 | 0)) {
      $_pre_phi306 = $40 + 8 | 0;
     } else {
      if ($40 >>> 0 < $5 >>> 0) {
       _abort();
      }
      $64 = $40 + 8 | 0;
      if ((HEAP32[$64 >> 2] | 0) == ($25 | 0)) {
       $_pre_phi306 = $64;
       break;
      }
      _abort();
     }
    } while (0);
    HEAP32[$37 + 12 >> 2] = $40;
    HEAP32[$_pre_phi306 >> 2] = $37;
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
   $69 = $24;
   $72 = HEAP32[$mem + ($_sum232 + 24) >> 2] | 0;
   $75 = HEAP32[$mem + ($_sum232 + 12) >> 2] | 0;
   do {
    if (($75 | 0) == ($69 | 0)) {
     $94 = $mem + ($_sum232 + 20) | 0;
     $95 = HEAP32[$94 >> 2] | 0;
     if (($95 | 0) == 0) {
      $99 = $mem + ($_sum232 + 16) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if (($100 | 0) == 0) {
       $R_1 = 0;
       break;
      } else {
       $R_0 = $100;
       $RP_0 = $99;
      }
     } else {
      $R_0 = $95;
      $RP_0 = $94;
     }
     while (1) {
      $102 = $R_0 + 20 | 0;
      $103 = HEAP32[$102 >> 2] | 0;
      if (($103 | 0) != 0) {
       $R_0 = $103;
       $RP_0 = $102;
       continue;
      }
      $106 = $R_0 + 16 | 0;
      $107 = HEAP32[$106 >> 2] | 0;
      if (($107 | 0) == 0) {
       break;
      } else {
       $R_0 = $107;
       $RP_0 = $106;
      }
     }
     if ($RP_0 >>> 0 < $5 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      $R_1 = $R_0;
      break;
     }
    } else {
     $80 = HEAP32[$mem + ($_sum232 + 8) >> 2] | 0;
     if ($80 >>> 0 < $5 >>> 0) {
      _abort();
     }
     $84 = $80 + 12 | 0;
     if ((HEAP32[$84 >> 2] | 0) != ($69 | 0)) {
      _abort();
     }
     $88 = $75 + 8 | 0;
     if ((HEAP32[$88 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$84 >> 2] = $75;
      HEAP32[$88 >> 2] = $80;
      $R_1 = $75;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($72 | 0) == 0) {
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
   $118 = $mem + ($_sum232 + 28) | 0;
   $120 = 369e3 + (HEAP32[$118 >> 2] << 2) | 0;
   do {
    if (($69 | 0) == (HEAP32[$120 >> 2] | 0)) {
     HEAP32[$120 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$118 >> 2]);
     $p_0 = $25;
     $psize_0 = $26;
     break L10;
    } else {
     if ($72 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     }
     $134 = $72 + 16 | 0;
     if ((HEAP32[$134 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$134 >> 2] = $R_1;
     } else {
      HEAP32[$72 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      $p_0 = $25;
      $psize_0 = $26;
      break L10;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
    _abort();
   }
   HEAP32[$R_1 + 24 >> 2] = $72;
   $151 = HEAP32[$mem + ($_sum232 + 16) >> 2] | 0;
   do {
    if (($151 | 0) != 0) {
     if ($151 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1 + 16 >> 2] = $151;
      HEAP32[$151 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   $164 = HEAP32[$mem + ($_sum232 + 20) >> 2] | 0;
   if (($164 | 0) == 0) {
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
   if ($164 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
    _abort();
   } else {
    HEAP32[$R_1 + 20 >> 2] = $164;
    HEAP32[$164 + 24 >> 2] = $R_1;
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
  } else {
   $p_0 = $4;
   $psize_0 = $14;
  }
 } while (0);
 $189 = $p_0;
 if ($189 >>> 0 >= $15 >>> 0) {
  _abort();
 }
 $193 = $mem + ($14 - 4) | 0;
 $194 = HEAP32[$193 >> 2] | 0;
 if (($194 & 1 | 0) == 0) {
  _abort();
 }
 do {
  if (($194 & 2 | 0) == 0) {
   if (($16 | 0) == (HEAP32[92180] | 0)) {
    $204 = (HEAP32[92177] | 0) + $psize_0 | 0;
    HEAP32[92177] = $204;
    HEAP32[92180] = $p_0;
    HEAP32[$p_0 + 4 >> 2] = $204 | 1;
    if (($p_0 | 0) != (HEAP32[92179] | 0)) {
     return;
    }
    HEAP32[92179] = 0;
    HEAP32[92176] = 0;
    return;
   }
   if (($16 | 0) == (HEAP32[92179] | 0)) {
    $215 = (HEAP32[92176] | 0) + $psize_0 | 0;
    HEAP32[92176] = $215;
    HEAP32[92179] = $p_0;
    HEAP32[$p_0 + 4 >> 2] = $215 | 1;
    HEAP32[$189 + $215 >> 2] = $215;
    return;
   }
   $222 = ($194 & -8) + $psize_0 | 0;
   $223 = $194 >>> 3;
   L112 : do {
    if ($194 >>> 0 < 256 >>> 0) {
     $228 = HEAP32[$mem + $14 >> 2] | 0;
     $231 = HEAP32[$mem + ($14 | 4) >> 2] | 0;
     $234 = 368736 + ($223 << 1 << 2) | 0;
     do {
      if (($228 | 0) != ($234 | 0)) {
       if ($228 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       }
       if ((HEAP32[$228 + 12 >> 2] | 0) == ($16 | 0)) {
        break;
       }
       _abort();
      }
     } while (0);
     if (($231 | 0) == ($228 | 0)) {
      HEAP32[92174] = HEAP32[92174] & ~(1 << $223);
      break;
     }
     do {
      if (($231 | 0) == ($234 | 0)) {
       $_pre_phi304 = $231 + 8 | 0;
      } else {
       if ($231 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       }
       $257 = $231 + 8 | 0;
       if ((HEAP32[$257 >> 2] | 0) == ($16 | 0)) {
        $_pre_phi304 = $257;
        break;
       }
       _abort();
      }
     } while (0);
     HEAP32[$228 + 12 >> 2] = $231;
     HEAP32[$_pre_phi304 >> 2] = $228;
    } else {
     $262 = $15;
     $265 = HEAP32[$mem + ($14 + 16) >> 2] | 0;
     $268 = HEAP32[$mem + ($14 | 4) >> 2] | 0;
     do {
      if (($268 | 0) == ($262 | 0)) {
       $288 = $mem + ($14 + 12) | 0;
       $289 = HEAP32[$288 >> 2] | 0;
       if (($289 | 0) == 0) {
        $293 = $mem + ($14 + 8) | 0;
        $294 = HEAP32[$293 >> 2] | 0;
        if (($294 | 0) == 0) {
         $R7_1 = 0;
         break;
        } else {
         $R7_0 = $294;
         $RP9_0 = $293;
        }
       } else {
        $R7_0 = $289;
        $RP9_0 = $288;
       }
       while (1) {
        $296 = $R7_0 + 20 | 0;
        $297 = HEAP32[$296 >> 2] | 0;
        if (($297 | 0) != 0) {
         $R7_0 = $297;
         $RP9_0 = $296;
         continue;
        }
        $300 = $R7_0 + 16 | 0;
        $301 = HEAP32[$300 >> 2] | 0;
        if (($301 | 0) == 0) {
         break;
        } else {
         $R7_0 = $301;
         $RP9_0 = $300;
        }
       }
       if ($RP9_0 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$RP9_0 >> 2] = 0;
        $R7_1 = $R7_0;
        break;
       }
      } else {
       $273 = HEAP32[$mem + $14 >> 2] | 0;
       if ($273 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       }
       $278 = $273 + 12 | 0;
       if ((HEAP32[$278 >> 2] | 0) != ($262 | 0)) {
        _abort();
       }
       $282 = $268 + 8 | 0;
       if ((HEAP32[$282 >> 2] | 0) == ($262 | 0)) {
        HEAP32[$278 >> 2] = $268;
        HEAP32[$282 >> 2] = $273;
        $R7_1 = $268;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     if (($265 | 0) == 0) {
      break;
     }
     $313 = $mem + ($14 + 20) | 0;
     $315 = 369e3 + (HEAP32[$313 >> 2] << 2) | 0;
     do {
      if (($262 | 0) == (HEAP32[$315 >> 2] | 0)) {
       HEAP32[$315 >> 2] = $R7_1;
       if (($R7_1 | 0) != 0) {
        break;
       }
       HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$313 >> 2]);
       break L112;
      } else {
       if ($265 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       }
       $329 = $265 + 16 | 0;
       if ((HEAP32[$329 >> 2] | 0) == ($262 | 0)) {
        HEAP32[$329 >> 2] = $R7_1;
       } else {
        HEAP32[$265 + 20 >> 2] = $R7_1;
       }
       if (($R7_1 | 0) == 0) {
        break L112;
       }
      }
     } while (0);
     if ($R7_1 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     }
     HEAP32[$R7_1 + 24 >> 2] = $265;
     $346 = HEAP32[$mem + ($14 + 8) >> 2] | 0;
     do {
      if (($346 | 0) != 0) {
       if ($346 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$R7_1 + 16 >> 2] = $346;
        HEAP32[$346 + 24 >> 2] = $R7_1;
        break;
       }
      }
     } while (0);
     $359 = HEAP32[$mem + ($14 + 12) >> 2] | 0;
     if (($359 | 0) == 0) {
      break;
     }
     if ($359 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R7_1 + 20 >> 2] = $359;
      HEAP32[$359 + 24 >> 2] = $R7_1;
      break;
     }
    }
   } while (0);
   HEAP32[$p_0 + 4 >> 2] = $222 | 1;
   HEAP32[$189 + $222 >> 2] = $222;
   if (($p_0 | 0) != (HEAP32[92179] | 0)) {
    $psize_1 = $222;
    break;
   }
   HEAP32[92176] = $222;
   return;
  } else {
   HEAP32[$193 >> 2] = $194 & -2;
   HEAP32[$p_0 + 4 >> 2] = $psize_0 | 1;
   HEAP32[$189 + $psize_0 >> 2] = $psize_0;
   $psize_1 = $psize_0;
  }
 } while (0);
 $385 = $psize_1 >>> 3;
 if ($psize_1 >>> 0 < 256 >>> 0) {
  $388 = $385 << 1;
  $390 = 368736 + ($388 << 2) | 0;
  $391 = HEAP32[92174] | 0;
  $392 = 1 << $385;
  do {
   if (($391 & $392 | 0) == 0) {
    HEAP32[92174] = $391 | $392;
    $F16_0 = $390;
    $_pre_phi = 368736 + ($388 + 2 << 2) | 0;
   } else {
    $398 = 368736 + ($388 + 2 << 2) | 0;
    $399 = HEAP32[$398 >> 2] | 0;
    if ($399 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
     $F16_0 = $399;
     $_pre_phi = $398;
     break;
    }
    _abort();
   }
  } while (0);
  HEAP32[$_pre_phi >> 2] = $p_0;
  HEAP32[$F16_0 + 12 >> 2] = $p_0;
  HEAP32[$p_0 + 8 >> 2] = $F16_0;
  HEAP32[$p_0 + 12 >> 2] = $390;
  return;
 }
 $409 = $p_0;
 $410 = $psize_1 >>> 8;
 do {
  if (($410 | 0) == 0) {
   $I18_0 = 0;
  } else {
   if ($psize_1 >>> 0 > 16777215 >>> 0) {
    $I18_0 = 31;
    break;
   }
   $417 = ($410 + 1048320 | 0) >>> 16 & 8;
   $418 = $410 << $417;
   $421 = ($418 + 520192 | 0) >>> 16 & 4;
   $423 = $418 << $421;
   $426 = ($423 + 245760 | 0) >>> 16 & 2;
   $431 = 14 - ($421 | $417 | $426) + ($423 << $426 >>> 15) | 0;
   $I18_0 = $psize_1 >>> (($431 + 7 | 0) >>> 0) & 1 | $431 << 1;
  }
 } while (0);
 $438 = 369e3 + ($I18_0 << 2) | 0;
 HEAP32[$p_0 + 28 >> 2] = $I18_0;
 HEAP32[$p_0 + 20 >> 2] = 0;
 HEAP32[$p_0 + 16 >> 2] = 0;
 $442 = HEAP32[92175] | 0;
 $443 = 1 << $I18_0;
 do {
  if (($442 & $443 | 0) == 0) {
   HEAP32[92175] = $442 | $443;
   HEAP32[$438 >> 2] = $409;
   HEAP32[$p_0 + 24 >> 2] = $438;
   HEAP32[$p_0 + 12 >> 2] = $p_0;
   HEAP32[$p_0 + 8 >> 2] = $p_0;
  } else {
   if (($I18_0 | 0) == 31) {
    $458 = 0;
   } else {
    $458 = 25 - ($I18_0 >>> 1) | 0;
   }
   $K19_0 = $psize_1 << $458;
   $T_0 = HEAP32[$438 >> 2] | 0;
   while (1) {
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
     break;
    }
    $467 = $T_0 + 16 + ($K19_0 >>> 31 << 2) | 0;
    $468 = HEAP32[$467 >> 2] | 0;
    if (($468 | 0) == 0) {
     label = 129;
     break;
    } else {
     $K19_0 = $K19_0 << 1;
     $T_0 = $468;
    }
   }
   if ((label | 0) == 129) {
    if ($467 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
     _abort();
    } else {
     HEAP32[$467 >> 2] = $409;
     HEAP32[$p_0 + 24 >> 2] = $T_0;
     HEAP32[$p_0 + 12 >> 2] = $p_0;
     HEAP32[$p_0 + 8 >> 2] = $p_0;
     break;
    }
   }
   $481 = $T_0 + 8 | 0;
   $482 = HEAP32[$481 >> 2] | 0;
   $484 = HEAP32[92178] | 0;
   if ($T_0 >>> 0 < $484 >>> 0) {
    _abort();
   }
   if ($482 >>> 0 < $484 >>> 0) {
    _abort();
   } else {
    HEAP32[$482 + 12 >> 2] = $409;
    HEAP32[$481 >> 2] = $409;
    HEAP32[$p_0 + 8 >> 2] = $482;
    HEAP32[$p_0 + 12 >> 2] = $T_0;
    HEAP32[$p_0 + 24 >> 2] = 0;
    break;
   }
  }
 } while (0);
 $496 = (HEAP32[92182] | 0) - 1 | 0;
 HEAP32[92182] = $496;
 if (($496 | 0) == 0) {
  $sp_0_in_i = 369152;
 } else {
  return;
 }
 while (1) {
  $sp_0_i = HEAP32[$sp_0_in_i >> 2] | 0;
  if (($sp_0_i | 0) == 0) {
   break;
  } else {
   $sp_0_in_i = $sp_0_i + 8 | 0;
  }
 }
 HEAP32[92182] = -1;
 return;
}
function _parse_line() {
 var $1 = 0, $3 = 0, $6 = 0, $sp_0 = 0, $9 = 0, $25 = 0, $33 = 0, $tp_0_ph = 0, $sp_1_ph = 0, $34 = 0, $37 = 0, $sp_1_us = 0, $43 = 0, $54 = 0, $sp_1_lcssa = 0, $55 = 0, $57 = 0, $59 = 0, $com_size_0_load7276 = 0, $tp_1 = 0, $sp_2 = 0, $60 = 0, $61 = 0, $66 = 0, $68 = 0, $com_size_0_load7275 = 0, $com_size_0_load7274_ph = 0, $sp_pn_i_ph = 0, $saved_sp_1_ph_i_ph = 0, $cat_line_0_ph_i_ph = 0, $sp_pn_i = 0, $_030_i = 0, $c_0_i = 0, $83 = 0, $84 = 0, $85 = 0, $_1_i = 0, $98 = 0, $99 = 0, $100 = 0, $110 = 0, $com_size_0_load7273 = 0, $124 = 0, $com_size_0_load7281 = 0, $com_size_0_load7280 = 0, $cat_line_1_i = 0, $157 = 0, $159 = 0, $com_size_0_load7279 = 0, $cat_line_2_i = 0, $168 = 0, $174 = 0, $com_size_0_load7282_ph = 0, $232 = 0, $234 = 0, $sp_385 = 0, $251 = 0, $255 = 0, $256 = 0, $277 = 0, $tp_3 = 0, $280 = 0, $com_size_0_load7277 = 0, $tp_4 = 0, $sp_4 = 0, $298 = 0, $tp_5 = 0, $311 = 0, $314 = 0, $319 = 0, $temp_0 = 0, $321 = 0, $_0 = 0, label = 0;
 $1 = _get_line(0) | 0;
 if (($1 | 0) == 0) {
  $_0 = 0;
  return $_0 | 0;
 } else {
  $3 = $1;
 }
 L3 : while (1) {
  if ((HEAP32[89692] | 0) != 0) {
   label = 3;
   break;
  }
  $25 = _malloc(65536) | 0;
  if (($25 | 0) == 0) {
   label = 9;
   break;
  }
  $33 = $25 + 65534 | 0;
  $sp_1_ph = $3;
  $tp_0_ph = $25;
  while (1) {
   $34 = HEAP32[91636] | 0;
   if ((HEAP32[682] | 0) == 9) {
    $sp_1_us = $sp_1_ph;
    label = 15;
    break;
   }
   $37 = HEAP8[$sp_1_ph] | 0;
   if ((HEAP16[$34 + (($37 & 255) << 1) >> 1] & 64) == 0) {
    $sp_1_lcssa = $sp_1_ph;
    $54 = $37;
    break;
   }
   HEAP8[$tp_0_ph] = $37;
   $sp_1_ph = $sp_1_ph + 1 | 0;
   $tp_0_ph = $tp_0_ph + 1 | 0;
  }
  L11 : do {
   if ((label | 0) == 15) {
    while (1) {
     label = 0;
     $43 = HEAP8[$sp_1_us] | 0;
     if ((HEAP16[$34 + (($43 & 255) << 1) >> 1] & 64) == 0) {
      $sp_1_lcssa = $sp_1_us;
      $54 = $43;
      break L11;
     }
     $sp_1_us = $sp_1_us + 1 | 0;
     label = 15;
    }
   }
  } while (0);
  $55 = $25 + 65533 | 0;
  $57 = $33 - 1 | 0;
  $sp_2 = $sp_1_lcssa;
  $tp_1 = $tp_0_ph;
  $com_size_0_load7276 = 0;
  $59 = $54;
  L16 : while (1) {
   $60 = $sp_2 + 1 | 0;
   $61 = $59 & 255;
   if ($59 << 24 >> 24 == 10) {
    break L3;
   }
   L19 : do {
    switch ($61 | 0) {
    case 34:
    case 39:
     {
      HEAP32[HEAP32[89668] >> 2] = $60;
      if ((HEAP32[592] | 0) == 0) {
       HEAP8[2904] = 1;
       $277 = _scan_quote($61, $tp_1, $33, 1) | 0;
       HEAP8[2904] = 0;
       $tp_3 = $277;
      } else {
       $tp_3 = _scan_quote($61, $tp_1, $33, 1) | 0;
      }
      if (($tp_3 | 0) == 0) {
       break L16;
      }
      $sp_4 = HEAP32[HEAP32[89668] >> 2] | 0;
      $tp_4 = $tp_3;
      $com_size_0_load7277 = $com_size_0_load7276;
      break;
     }
    case 13:
    case 12:
    case 11:
     {
      if ((HEAP32[4] & 4 | 0) == 0) {
       label = 79;
       break L19;
      }
      _do_msg(12448, 7808, 0, $61, 0);
      label = 79;
      break;
     }
    case 9:
    case 32:
     {
      label = 79;
      break;
     }
    case 47:
     {
      $66 = HEAP8[$60] | 0;
      if (($66 | 0) == 42) {
       $68 = $sp_2 + 2 | 0;
       $com_size_0_load7275 = (HEAP32[89622] | 0) == 0 ? $com_size_0_load7276 : 0;
       if ((HEAP32[89624] | 0) == 0) {
        $cat_line_0_ph_i_ph = 0;
        $saved_sp_1_ph_i_ph = $sp_2;
        $sp_pn_i_ph = $68;
        $com_size_0_load7274_ph = $com_size_0_load7275;
       } else {
        FUNCTION_TABLE_iii[HEAP32[686] & 15](7480, 0) | 0;
        $cat_line_0_ph_i_ph = 0;
        $saved_sp_1_ph_i_ph = $sp_2;
        $sp_pn_i_ph = $68;
        $com_size_0_load7274_ph = $com_size_0_load7275;
       }
       L37 : while (1) {
        $sp_pn_i = $sp_pn_i_ph;
        L39 : while (1) {
         $c_0_i = HEAP8[$sp_pn_i] | 0;
         $_030_i = $sp_pn_i + 1 | 0;
         L41 : while (1) {
          if ((HEAP32[89624] | 0) != 0) {
           FUNCTION_TABLE_iii[HEAP32[688] & 15]($c_0_i, 0) | 0;
          }
          do {
           if (($c_0_i | 0) == 42) {
            $_1_i = $_030_i;
           } else if (($c_0_i | 0) == 10) {
            break L39;
           } else if (($c_0_i | 0) == 47) {
            $83 = $_030_i + 1 | 0;
            $84 = HEAP8[$_030_i] | 0;
            $85 = $84 << 24 >> 24;
            if ($84 << 24 >> 24 != 42) {
             $c_0_i = $85;
             $_030_i = $83;
             continue L41;
            }
            if ((HEAP32[4] & 1 | 0) != 0) {
             _do_msg(12448, 7408, 0, 0, 0);
            }
            if ((HEAP32[89624] | 0) == 0) {
             $_1_i = $83;
             break;
            }
            FUNCTION_TABLE_iii[HEAP32[688] & 15]($85, 0) | 0;
            $_1_i = $83;
           } else {
            $sp_pn_i = $_030_i;
            continue L39;
           }
          } while (0);
          $98 = $_1_i + 1 | 0;
          $99 = HEAP8[$_1_i] | 0;
          $100 = $99 << 24 >> 24;
          if ($99 << 24 >> 24 == 47) {
           break L37;
          } else {
           $c_0_i = $100;
           $_030_i = $98;
          }
         }
        }
        if ((HEAP32[89622] | 0) == 0) {
         $com_size_0_load7281 = $com_size_0_load7274_ph;
        } else {
         $com_size_0_load7281 = $com_size_0_load7274_ph - 1 - $saved_sp_1_ph_i_ph + $_030_i | 0;
        }
        if ((HEAP32[89594] & 8 | 0) != 0 & (HEAP32[730] | 0) != 0) {
         do {
          if (($cat_line_0_ph_i_ph | 0) == 0) {
           HEAP32[91376] = HEAP32[23332];
           $cat_line_1_i = 0;
           $com_size_0_load7280 = $com_size_0_load7281;
          } else {
           if (($cat_line_0_ph_i_ph | 0) <= 254) {
            $cat_line_1_i = $cat_line_0_ph_i_ph;
            $com_size_0_load7280 = $com_size_0_load7281;
            break;
           }
           if ((HEAP32[4] & 4 | 0) == 0) {
            $cat_line_1_i = 0;
            $com_size_0_load7280 = 0;
            break;
           }
           _do_msg(12448, 7264, 0, 0, 0);
           $cat_line_1_i = 0;
           $com_size_0_load7280 = 0;
          }
         } while (0);
         $157 = $cat_line_1_i + 1 | 0;
         $159 = HEAP32[365512 + ($cat_line_1_i << 2) >> 2] | 0;
         HEAP32[365512 + ($157 << 2) >> 2] = $159 - 1 + (_strlen(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) | 0);
         $cat_line_2_i = $157;
         $com_size_0_load7279 = $com_size_0_load7280;
        } else {
         $cat_line_2_i = $cat_line_0_ph_i_ph;
         $com_size_0_load7279 = $com_size_0_load7281;
        }
        $168 = _get_line(1) | 0;
        if (($168 | 0) == 0) {
         label = 53;
         break L3;
        }
        HEAP32[5582] = 1;
        $cat_line_0_ph_i_ph = $cat_line_2_i;
        $saved_sp_1_ph_i_ph = $168;
        $sp_pn_i_ph = $168;
        $com_size_0_load7274_ph = $com_size_0_load7279;
       }
       if ((HEAP32[89624] | 0) != 0) {
        FUNCTION_TABLE_iii[HEAP32[688] & 15]($100, 0) | 0;
        FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
        HEAP32[5582] = 1;
       }
       $110 = HEAP32[89622] | 0;
       if (($110 | 0) == 0) {
        $com_size_0_load7273 = $com_size_0_load7274_ph;
       } else {
        $com_size_0_load7273 = $com_size_0_load7274_ph - $saved_sp_1_ph_i_ph + $98 | 0;
       }
       if (!((HEAP32[730] | 0) == 0 | (HEAP32[89594] & 8 | 0) == 0 | ($cat_line_0_ph_i_ph | 0) == 0)) {
        $124 = HEAP32[365512 + ($cat_line_0_ph_i_ph << 2) >> 2] | 0;
        HEAP32[365512 + ($cat_line_0_ph_i_ph + 1 << 2) >> 2] = $124 - 1 + (_strlen(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) | 0);
        HEAP32[91377] = HEAP32[23332];
       }
       if (($98 | 0) == 0) {
        label = 53;
        break L3;
       }
       $174 = HEAP32[682] | 0;
       if (($110 | 0) != 0 & ($174 | 0) != 1) {
        if (($tp_1 + $com_size_0_load7273 | 0) >>> 0 < $55 >>> 0) {
         $com_size_0_load7282_ph = $com_size_0_load7273;
        } else {
         $com_size_0_load7282_ph = $57 - $tp_1 | 0;
        }
        if (($com_size_0_load7282_ph | 0) == 0) {
         $sp_4 = $98;
         $tp_4 = $tp_1;
         $com_size_0_load7277 = $com_size_0_load7282_ph - 1 | 0;
         break L19;
        }
        _memset($tp_1 | 0, 32, $com_size_0_load7282_ph | 0) | 0;
        $sp_4 = $98;
        $tp_4 = $tp_1 + $com_size_0_load7282_ph | 0;
        $com_size_0_load7277 = -1;
        break L19;
       }
       if (($174 | 0) == 1) {
        if (($25 | 0) != ($tp_1 | 0)) {
         if ((HEAP16[(HEAP32[91636] | 0) + (HEAPU8[$tp_1 - 1 | 0] << 1) >> 1] & 64) != 0) {
          $sp_4 = $98;
          $tp_4 = $tp_1;
          $com_size_0_load7277 = $com_size_0_load7273;
          break L19;
         }
        }
        HEAP8[$tp_1] = 31;
        $sp_4 = $98;
        $tp_4 = $tp_1 + 1 | 0;
        $com_size_0_load7277 = $com_size_0_load7273;
        break L19;
       } else if (($174 | 0) == 9) {
        if ($25 >>> 0 >= $tp_1 >>> 0) {
         $sp_4 = $98;
         $tp_4 = $tp_1;
         $com_size_0_load7277 = $com_size_0_load7273;
         break L19;
        }
        if ((HEAP8[$tp_1 - 1 | 0] | 0) == 32) {
         $sp_4 = $98;
         $tp_4 = $tp_1;
         $com_size_0_load7277 = $com_size_0_load7273;
         break L19;
        }
        HEAP8[$tp_1] = 32;
        $sp_4 = $98;
        $tp_4 = $tp_1 + 1 | 0;
        $com_size_0_load7277 = $com_size_0_load7273;
        break L19;
       } else {
        if (($25 | 0) != ($tp_1 | 0)) {
         if ((HEAP16[(HEAP32[91636] | 0) + (HEAPU8[$tp_1 - 1 | 0] << 1) >> 1] & 64) != 0) {
          $sp_4 = $98;
          $tp_4 = $tp_1;
          $com_size_0_load7277 = $com_size_0_load7273;
          break L19;
         }
        }
        HEAP8[$tp_1] = 32;
        $sp_4 = $98;
        $tp_4 = $tp_1 + 1 | 0;
        $com_size_0_load7277 = $com_size_0_load7273;
        break L19;
       }
      } else if (($66 | 0) == 47) {
       if ((HEAP32[592] | 0) != 0) {
        label = 70;
        break L3;
       }
      }
      HEAP8[$tp_1] = 47;
      $sp_4 = $60;
      $tp_4 = $tp_1 + 1 | 0;
      $com_size_0_load7277 = $com_size_0_load7276;
      break;
     }
    default:
     {
      if ((_iscntrl($61 | 0) | 0) == 0) {
       HEAP8[$tp_1] = $59;
       $sp_4 = $60;
       $tp_4 = $tp_1 + 1 | 0;
       $com_size_0_load7277 = $com_size_0_load7276;
       break L19;
      } else {
       _do_msg(12624, 7704, 0, $61, 0);
       HEAP32[90042] = (HEAP32[90042] | 0) + 1;
       $sp_4 = $60;
       $tp_4 = $tp_1;
       $com_size_0_load7277 = $com_size_0_load7276;
       break L19;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 79) {
     label = 0;
     if ((HEAP32[89622] | 0) != 0) {
      $251 = $tp_1 + 1 | 0;
      if ($59 << 24 >> 24 == 9) {
       HEAP8[$tp_1] = 9;
       $sp_4 = $60;
       $tp_4 = $251;
       $com_size_0_load7277 = $com_size_0_load7276;
       break;
      } else {
       HEAP8[$tp_1] = 32;
       $sp_4 = $60;
       $tp_4 = $251;
       $com_size_0_load7277 = $com_size_0_load7276;
       break;
      }
     }
     $255 = $tp_1 - 1 | 0;
     $256 = HEAP8[$255] | 0;
     if ((HEAP16[(HEAP32[91636] | 0) + (($256 & 255) << 1) >> 1] & 64) == 0) {
      HEAP8[$tp_1] = 32;
      $sp_4 = $60;
      $tp_4 = $tp_1 + 1 | 0;
      $com_size_0_load7277 = $com_size_0_load7276;
      break;
     }
     if (!((HEAP32[682] | 0) == 1 & $256 << 24 >> 24 == 31)) {
      $sp_4 = $60;
      $tp_4 = $tp_1;
      $com_size_0_load7277 = $com_size_0_load7276;
      break;
     }
     HEAP8[$255] = 32;
     $sp_4 = $60;
     $tp_4 = $tp_1;
     $com_size_0_load7277 = $com_size_0_load7276;
    }
   } while (0);
   if ($33 >>> 0 < $tp_4 >>> 0) {
    label = 98;
    break L3;
   }
   $sp_2 = $sp_4;
   $tp_1 = $tp_4;
   $com_size_0_load7276 = $com_size_0_load7277;
   $59 = HEAP8[$sp_4] | 0;
  }
  _free($25);
  $280 = _get_line(0) | 0;
  if (($280 | 0) == 0) {
   $_0 = 0;
   label = 112;
   break;
  } else {
   $3 = $280;
  }
 }
 do {
  if ((label | 0) == 53) {
   _free($25);
   $_0 = 0;
   return $_0 | 0;
  } else if ((label | 0) == 70) {
   do {
    if ((HEAP32[23330] | 0) == 0) {
     if ((HEAP32[4] & 2 | 0) == 0) {
      break;
     }
     _do_msg(12448, 7904, 0, 0, 0);
    }
   } while (0);
   if ((HEAP32[89624] | 0) == 0) {
    break;
   }
   $232 = HEAP8[$sp_2] | 0;
   if ($232 << 24 >> 24 == 10) {
    break;
   } else {
    $sp_385 = $sp_2;
    $234 = $232;
   }
   do {
    $sp_385 = $sp_385 + 1 | 0;
    FUNCTION_TABLE_iii[HEAP32[688] & 15]($234 << 24 >> 24, 0) | 0;
    $234 = HEAP8[$sp_385] | 0;
   } while ($234 << 24 >> 24 != 10);
  } else if ((label | 0) == 112) {
   return $_0 | 0;
  } else if ((label | 0) == 9) {
   if ((HEAP32[89594] & 128 | 0) == 0) {
    _cfatal(7968, 0, 65536, 0);
    return 0;
   }
   _print_heap();
   _cfatal(7968, 0, 65536, 0);
   return 0;
  } else if ((label | 0) == 3) {
   $6 = HEAP32[91636] | 0;
   $sp_0 = $3;
   while (1) {
    $9 = HEAP8[$sp_0] | 0;
    if ((HEAP16[$6 + (($9 & 255) << 1) >> 1] & 32) == 0) {
     break;
    } else {
     $sp_0 = $sp_0 + 1 | 0;
    }
   }
   if ($9 << 24 >> 24 == 35) {
    HEAP32[HEAP32[89668] >> 2] = $sp_0;
   }
   $_0 = HEAP32[HEAP32[89668] >> 2] | 0;
   return $_0 | 0;
  } else if ((label | 0) == 98) {
   HEAP8[$tp_4] = 0;
   _cfatal(7616, 0, 0, 0);
   return 0;
  }
 } while (0);
 if ($25 >>> 0 < $tp_1 >>> 0) {
  $298 = $tp_1 - 1 | 0;
  $tp_5 = (HEAP16[(HEAP32[91636] | 0) + (HEAPU8[$298] << 1) >> 1] & 64) == 0 ? $tp_1 : $298;
 } else {
  $tp_5 = $tp_1;
 }
 HEAP8[$tp_5] = 10;
 HEAP8[$tp_5 + 1 | 0] = 0;
 $311 = _strcpy(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0, $25 | 0) | 0;
 HEAP32[HEAP32[89668] >> 2] = $311;
 _free($25);
 $314 = HEAP32[89616] | 0;
 do {
  if (!(($314 | 0) == (-1 | 0) | ($314 | 0) == 0)) {
   $319 = HEAP32[91636] | 0;
   $temp_0 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
   do {
    $321 = HEAP8[$temp_0] | 0;
    $temp_0 = $temp_0 + 1 | 0;
   } while ((HEAP16[$319 + (($321 & 255) << 1) >> 1] & 64) != 0);
   if ($321 << 24 >> 24 != 35) {
    if (!((HEAP32[682] | 0) == 3 & $321 << 24 >> 24 == 37)) {
     break;
    }
    if ((HEAP8[$temp_0] | 0) != 58) {
     break;
    }
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    break;
   }
   _do_msg(12448, 7504, 0, $314, 0);
  }
 } while (0);
 $_0 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
 return $_0 | 0;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $56 = 0, $_pre_phi63 = 0, $61 = 0, $64 = 0, $67 = 0, $72 = 0, $76 = 0, $80 = 0, $_sum28 = 0, $86 = 0, $87 = 0, $91 = 0, $92 = 0, $RP_0 = 0, $R_0 = 0, $94 = 0, $95 = 0, $98 = 0, $99 = 0, $R_1 = 0, $110 = 0, $112 = 0, $126 = 0, $_sum31 = 0, $143 = 0, $156 = 0, $169 = 0, $_0277 = 0, $_0 = 0, $181 = 0, $185 = 0, $186 = 0, $194 = 0, $205 = 0, $213 = 0, $214 = 0, $219 = 0, $222 = 0, $225 = 0, $246 = 0, $_pre_phi61 = 0, $251 = 0, $254 = 0, $257 = 0, $262 = 0, $266 = 0, $270 = 0, $276 = 0, $277 = 0, $281 = 0, $282 = 0, $RP9_0 = 0, $R7_0 = 0, $284 = 0, $285 = 0, $288 = 0, $289 = 0, $R7_1 = 0, $300 = 0, $302 = 0, $316 = 0, $333 = 0, $346 = 0, $_1 = 0, $374 = 0, $377 = 0, $379 = 0, $380 = 0, $381 = 0, $387 = 0, $388 = 0, $_pre_phi = 0, $F16_0 = 0, $398 = 0, $399 = 0, $406 = 0, $407 = 0, $410 = 0, $412 = 0, $415 = 0, $420 = 0, $I19_0 = 0, $427 = 0, $431 = 0, $432 = 0, $447 = 0, $T_0 = 0, $K20_0 = 0, $456 = 0, $457 = 0, $470 = 0, $471 = 0, $473 = 0, label = 0;
 $1 = $p;
 $2 = $1 + $psize | 0;
 $3 = $2;
 $5 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do {
  if (($5 & 1 | 0) == 0) {
   $10 = HEAP32[$p >> 2] | 0;
   if (($5 & 3 | 0) == 0) {
    return;
   }
   $15 = $1 + (-$10 | 0) | 0;
   $16 = $15;
   $17 = $10 + $psize | 0;
   $18 = HEAP32[92178] | 0;
   if ($15 >>> 0 < $18 >>> 0) {
    _abort();
   }
   if (($16 | 0) == (HEAP32[92179] | 0)) {
    $169 = $1 + ($psize + 4) | 0;
    if ((HEAP32[$169 >> 2] & 3 | 0) != 3) {
     $_0 = $16;
     $_0277 = $17;
     break;
    }
    HEAP32[92176] = $17;
    HEAP32[$169 >> 2] = HEAP32[$169 >> 2] & -2;
    HEAP32[$1 + (4 - $10) >> 2] = $17 | 1;
    HEAP32[$2 >> 2] = $17;
    return;
   }
   $24 = $10 >>> 3;
   if ($10 >>> 0 < 256 >>> 0) {
    $29 = HEAP32[$1 + (8 - $10) >> 2] | 0;
    $32 = HEAP32[$1 + (12 - $10) >> 2] | 0;
    $35 = 368736 + ($24 << 1 << 2) | 0;
    do {
     if (($29 | 0) != ($35 | 0)) {
      if ($29 >>> 0 < $18 >>> 0) {
       _abort();
      }
      if ((HEAP32[$29 + 12 >> 2] | 0) == ($16 | 0)) {
       break;
      }
      _abort();
     }
    } while (0);
    if (($32 | 0) == ($29 | 0)) {
     HEAP32[92174] = HEAP32[92174] & ~(1 << $24);
     $_0 = $16;
     $_0277 = $17;
     break;
    }
    do {
     if (($32 | 0) == ($35 | 0)) {
      $_pre_phi63 = $32 + 8 | 0;
     } else {
      if ($32 >>> 0 < $18 >>> 0) {
       _abort();
      }
      $56 = $32 + 8 | 0;
      if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
       $_pre_phi63 = $56;
       break;
      }
      _abort();
     }
    } while (0);
    HEAP32[$29 + 12 >> 2] = $32;
    HEAP32[$_pre_phi63 >> 2] = $29;
    $_0 = $16;
    $_0277 = $17;
    break;
   }
   $61 = $15;
   $64 = HEAP32[$1 + (24 - $10) >> 2] | 0;
   $67 = HEAP32[$1 + (12 - $10) >> 2] | 0;
   do {
    if (($67 | 0) == ($61 | 0)) {
     $_sum28 = 16 - $10 | 0;
     $86 = $1 + ($_sum28 + 4) | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     if (($87 | 0) == 0) {
      $91 = $1 + $_sum28 | 0;
      $92 = HEAP32[$91 >> 2] | 0;
      if (($92 | 0) == 0) {
       $R_1 = 0;
       break;
      } else {
       $R_0 = $92;
       $RP_0 = $91;
      }
     } else {
      $R_0 = $87;
      $RP_0 = $86;
     }
     while (1) {
      $94 = $R_0 + 20 | 0;
      $95 = HEAP32[$94 >> 2] | 0;
      if (($95 | 0) != 0) {
       $R_0 = $95;
       $RP_0 = $94;
       continue;
      }
      $98 = $R_0 + 16 | 0;
      $99 = HEAP32[$98 >> 2] | 0;
      if (($99 | 0) == 0) {
       break;
      } else {
       $R_0 = $99;
       $RP_0 = $98;
      }
     }
     if ($RP_0 >>> 0 < $18 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      $R_1 = $R_0;
      break;
     }
    } else {
     $72 = HEAP32[$1 + (8 - $10) >> 2] | 0;
     if ($72 >>> 0 < $18 >>> 0) {
      _abort();
     }
     $76 = $72 + 12 | 0;
     if ((HEAP32[$76 >> 2] | 0) != ($61 | 0)) {
      _abort();
     }
     $80 = $67 + 8 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($61 | 0)) {
      HEAP32[$76 >> 2] = $67;
      HEAP32[$80 >> 2] = $72;
      $R_1 = $67;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($64 | 0) == 0) {
    $_0 = $16;
    $_0277 = $17;
    break;
   }
   $110 = $1 + (28 - $10) | 0;
   $112 = 369e3 + (HEAP32[$110 >> 2] << 2) | 0;
   do {
    if (($61 | 0) == (HEAP32[$112 >> 2] | 0)) {
     HEAP32[$112 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$110 >> 2]);
     $_0 = $16;
     $_0277 = $17;
     break L1;
    } else {
     if ($64 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     }
     $126 = $64 + 16 | 0;
     if ((HEAP32[$126 >> 2] | 0) == ($61 | 0)) {
      HEAP32[$126 >> 2] = $R_1;
     } else {
      HEAP32[$64 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      $_0 = $16;
      $_0277 = $17;
      break L1;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
    _abort();
   }
   HEAP32[$R_1 + 24 >> 2] = $64;
   $_sum31 = 16 - $10 | 0;
   $143 = HEAP32[$1 + $_sum31 >> 2] | 0;
   do {
    if (($143 | 0) != 0) {
     if ($143 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1 + 16 >> 2] = $143;
      HEAP32[$143 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   $156 = HEAP32[$1 + ($_sum31 + 4) >> 2] | 0;
   if (($156 | 0) == 0) {
    $_0 = $16;
    $_0277 = $17;
    break;
   }
   if ($156 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
    _abort();
   } else {
    HEAP32[$R_1 + 20 >> 2] = $156;
    HEAP32[$156 + 24 >> 2] = $R_1;
    $_0 = $16;
    $_0277 = $17;
    break;
   }
  } else {
   $_0 = $p;
   $_0277 = $psize;
  }
 } while (0);
 $181 = HEAP32[92178] | 0;
 if ($2 >>> 0 < $181 >>> 0) {
  _abort();
 }
 $185 = $1 + ($psize + 4) | 0;
 $186 = HEAP32[$185 >> 2] | 0;
 do {
  if (($186 & 2 | 0) == 0) {
   if (($3 | 0) == (HEAP32[92180] | 0)) {
    $194 = (HEAP32[92177] | 0) + $_0277 | 0;
    HEAP32[92177] = $194;
    HEAP32[92180] = $_0;
    HEAP32[$_0 + 4 >> 2] = $194 | 1;
    if (($_0 | 0) != (HEAP32[92179] | 0)) {
     return;
    }
    HEAP32[92179] = 0;
    HEAP32[92176] = 0;
    return;
   }
   if (($3 | 0) == (HEAP32[92179] | 0)) {
    $205 = (HEAP32[92176] | 0) + $_0277 | 0;
    HEAP32[92176] = $205;
    HEAP32[92179] = $_0;
    HEAP32[$_0 + 4 >> 2] = $205 | 1;
    HEAP32[$_0 + $205 >> 2] = $205;
    return;
   }
   $213 = ($186 & -8) + $_0277 | 0;
   $214 = $186 >>> 3;
   L100 : do {
    if ($186 >>> 0 < 256 >>> 0) {
     $219 = HEAP32[$1 + ($psize + 8) >> 2] | 0;
     $222 = HEAP32[$1 + ($psize + 12) >> 2] | 0;
     $225 = 368736 + ($214 << 1 << 2) | 0;
     do {
      if (($219 | 0) != ($225 | 0)) {
       if ($219 >>> 0 < $181 >>> 0) {
        _abort();
       }
       if ((HEAP32[$219 + 12 >> 2] | 0) == ($3 | 0)) {
        break;
       }
       _abort();
      }
     } while (0);
     if (($222 | 0) == ($219 | 0)) {
      HEAP32[92174] = HEAP32[92174] & ~(1 << $214);
      break;
     }
     do {
      if (($222 | 0) == ($225 | 0)) {
       $_pre_phi61 = $222 + 8 | 0;
      } else {
       if ($222 >>> 0 < $181 >>> 0) {
        _abort();
       }
       $246 = $222 + 8 | 0;
       if ((HEAP32[$246 >> 2] | 0) == ($3 | 0)) {
        $_pre_phi61 = $246;
        break;
       }
       _abort();
      }
     } while (0);
     HEAP32[$219 + 12 >> 2] = $222;
     HEAP32[$_pre_phi61 >> 2] = $219;
    } else {
     $251 = $2;
     $254 = HEAP32[$1 + ($psize + 24) >> 2] | 0;
     $257 = HEAP32[$1 + ($psize + 12) >> 2] | 0;
     do {
      if (($257 | 0) == ($251 | 0)) {
       $276 = $1 + ($psize + 20) | 0;
       $277 = HEAP32[$276 >> 2] | 0;
       if (($277 | 0) == 0) {
        $281 = $1 + ($psize + 16) | 0;
        $282 = HEAP32[$281 >> 2] | 0;
        if (($282 | 0) == 0) {
         $R7_1 = 0;
         break;
        } else {
         $R7_0 = $282;
         $RP9_0 = $281;
        }
       } else {
        $R7_0 = $277;
        $RP9_0 = $276;
       }
       while (1) {
        $284 = $R7_0 + 20 | 0;
        $285 = HEAP32[$284 >> 2] | 0;
        if (($285 | 0) != 0) {
         $R7_0 = $285;
         $RP9_0 = $284;
         continue;
        }
        $288 = $R7_0 + 16 | 0;
        $289 = HEAP32[$288 >> 2] | 0;
        if (($289 | 0) == 0) {
         break;
        } else {
         $R7_0 = $289;
         $RP9_0 = $288;
        }
       }
       if ($RP9_0 >>> 0 < $181 >>> 0) {
        _abort();
       } else {
        HEAP32[$RP9_0 >> 2] = 0;
        $R7_1 = $R7_0;
        break;
       }
      } else {
       $262 = HEAP32[$1 + ($psize + 8) >> 2] | 0;
       if ($262 >>> 0 < $181 >>> 0) {
        _abort();
       }
       $266 = $262 + 12 | 0;
       if ((HEAP32[$266 >> 2] | 0) != ($251 | 0)) {
        _abort();
       }
       $270 = $257 + 8 | 0;
       if ((HEAP32[$270 >> 2] | 0) == ($251 | 0)) {
        HEAP32[$266 >> 2] = $257;
        HEAP32[$270 >> 2] = $262;
        $R7_1 = $257;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     if (($254 | 0) == 0) {
      break;
     }
     $300 = $1 + ($psize + 28) | 0;
     $302 = 369e3 + (HEAP32[$300 >> 2] << 2) | 0;
     do {
      if (($251 | 0) == (HEAP32[$302 >> 2] | 0)) {
       HEAP32[$302 >> 2] = $R7_1;
       if (($R7_1 | 0) != 0) {
        break;
       }
       HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$300 >> 2]);
       break L100;
      } else {
       if ($254 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       }
       $316 = $254 + 16 | 0;
       if ((HEAP32[$316 >> 2] | 0) == ($251 | 0)) {
        HEAP32[$316 >> 2] = $R7_1;
       } else {
        HEAP32[$254 + 20 >> 2] = $R7_1;
       }
       if (($R7_1 | 0) == 0) {
        break L100;
       }
      }
     } while (0);
     if ($R7_1 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     }
     HEAP32[$R7_1 + 24 >> 2] = $254;
     $333 = HEAP32[$1 + ($psize + 16) >> 2] | 0;
     do {
      if (($333 | 0) != 0) {
       if ($333 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$R7_1 + 16 >> 2] = $333;
        HEAP32[$333 + 24 >> 2] = $R7_1;
        break;
       }
      }
     } while (0);
     $346 = HEAP32[$1 + ($psize + 20) >> 2] | 0;
     if (($346 | 0) == 0) {
      break;
     }
     if ($346 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R7_1 + 20 >> 2] = $346;
      HEAP32[$346 + 24 >> 2] = $R7_1;
      break;
     }
    }
   } while (0);
   HEAP32[$_0 + 4 >> 2] = $213 | 1;
   HEAP32[$_0 + $213 >> 2] = $213;
   if (($_0 | 0) != (HEAP32[92179] | 0)) {
    $_1 = $213;
    break;
   }
   HEAP32[92176] = $213;
   return;
  } else {
   HEAP32[$185 >> 2] = $186 & -2;
   HEAP32[$_0 + 4 >> 2] = $_0277 | 1;
   HEAP32[$_0 + $_0277 >> 2] = $_0277;
   $_1 = $_0277;
  }
 } while (0);
 $374 = $_1 >>> 3;
 if ($_1 >>> 0 < 256 >>> 0) {
  $377 = $374 << 1;
  $379 = 368736 + ($377 << 2) | 0;
  $380 = HEAP32[92174] | 0;
  $381 = 1 << $374;
  do {
   if (($380 & $381 | 0) == 0) {
    HEAP32[92174] = $380 | $381;
    $F16_0 = $379;
    $_pre_phi = 368736 + ($377 + 2 << 2) | 0;
   } else {
    $387 = 368736 + ($377 + 2 << 2) | 0;
    $388 = HEAP32[$387 >> 2] | 0;
    if ($388 >>> 0 >= (HEAP32[92178] | 0) >>> 0) {
     $F16_0 = $388;
     $_pre_phi = $387;
     break;
    }
    _abort();
   }
  } while (0);
  HEAP32[$_pre_phi >> 2] = $_0;
  HEAP32[$F16_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $F16_0;
  HEAP32[$_0 + 12 >> 2] = $379;
  return;
 }
 $398 = $_0;
 $399 = $_1 >>> 8;
 do {
  if (($399 | 0) == 0) {
   $I19_0 = 0;
  } else {
   if ($_1 >>> 0 > 16777215 >>> 0) {
    $I19_0 = 31;
    break;
   }
   $406 = ($399 + 1048320 | 0) >>> 16 & 8;
   $407 = $399 << $406;
   $410 = ($407 + 520192 | 0) >>> 16 & 4;
   $412 = $407 << $410;
   $415 = ($412 + 245760 | 0) >>> 16 & 2;
   $420 = 14 - ($410 | $406 | $415) + ($412 << $415 >>> 15) | 0;
   $I19_0 = $_1 >>> (($420 + 7 | 0) >>> 0) & 1 | $420 << 1;
  }
 } while (0);
 $427 = 369e3 + ($I19_0 << 2) | 0;
 HEAP32[$_0 + 28 >> 2] = $I19_0;
 HEAP32[$_0 + 20 >> 2] = 0;
 HEAP32[$_0 + 16 >> 2] = 0;
 $431 = HEAP32[92175] | 0;
 $432 = 1 << $I19_0;
 if (($431 & $432 | 0) == 0) {
  HEAP32[92175] = $431 | $432;
  HEAP32[$427 >> 2] = $398;
  HEAP32[$_0 + 24 >> 2] = $427;
  HEAP32[$_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $_0;
  return;
 }
 if (($I19_0 | 0) == 31) {
  $447 = 0;
 } else {
  $447 = 25 - ($I19_0 >>> 1) | 0;
 }
 $K20_0 = $_1 << $447;
 $T_0 = HEAP32[$427 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($_1 | 0)) {
   break;
  }
  $456 = $T_0 + 16 + ($K20_0 >>> 31 << 2) | 0;
  $457 = HEAP32[$456 >> 2] | 0;
  if (($457 | 0) == 0) {
   label = 126;
   break;
  } else {
   $K20_0 = $K20_0 << 1;
   $T_0 = $457;
  }
 }
 if ((label | 0) == 126) {
  if ($456 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
   _abort();
  }
  HEAP32[$456 >> 2] = $398;
  HEAP32[$_0 + 24 >> 2] = $T_0;
  HEAP32[$_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $_0;
  return;
 }
 $470 = $T_0 + 8 | 0;
 $471 = HEAP32[$470 >> 2] | 0;
 $473 = HEAP32[92178] | 0;
 if ($T_0 >>> 0 < $473 >>> 0) {
  _abort();
 }
 if ($471 >>> 0 < $473 >>> 0) {
  _abort();
 }
 HEAP32[$471 + 12 >> 2] = $398;
 HEAP32[$470 >> 2] = $398;
 HEAP32[$_0 + 8 >> 2] = $471;
 HEAP32[$_0 + 12 >> 2] = $T_0;
 HEAP32[$_0 + 24 >> 2] = 0;
 return;
}
function _expand_std($defp, $out, $out_end, $line_col, $pragma_op) {
 $defp = $defp | 0;
 $out = $out | 0;
 $out_end = $out_end | 0;
 $line_col = $line_col | 0;
 $pragma_op = $pragma_op | 0;
 var $macrobuf = 0, $11 = 0, $14 = 0, $18 = 0, $23 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $48 = 0, $out48 = 0, $54 = 0, $c1_0 = 0, $55 = 0, $56 = 0, $57 = 0, $68 = 0, $74 = 0, $91 = 0, $107 = 0, $109 = 0, $out47 = 0, $120 = 0, $134 = 0, $m_inf_0_i = 0, $136 = 0, $139 = 0, $140 = 0, $142 = 0, $146 = 0, $148 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $157 = 0, $159 = 0, $160 = 0, $162 = 0, $i_047_i = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $173 = 0, $177 = 0, $179 = 0, $181 = 0, $182 = 0, $_0_i_i = 0, $184 = 0, $185 = 0, $191 = 0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $205 = 0, $212 = 0, $215 = 0, $217 = 0, $218 = 0, $220 = 0, $221 = 0, $out49 = 0, $224 = 0, $c_0 = 0, $out50 = 0, $242 = 0, $244 = 0, $245 = 0, $246 = 0, $num_051 = 0, $258 = 0, $259 = 0, $260 = 0, $_lcssa = 0, $_b = 0, $266 = 0, label = 0, tempParam = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 263168 | 0;
 tempParam = $line_col;
 $line_col = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 HEAP32[$line_col >> 2] = HEAP32[tempParam >> 2];
 HEAP32[$line_col + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
 $macrobuf = sp | 0;
 HEAP8[6112] = 0;
 HEAP32[89616] = HEAP32[23332];
 HEAP32[89614] = $defp + 25;
 HEAP32[23344] = 0;
 do {
  if ((HEAP32[682] | 0) == 3) {
   if ((HEAP32[89594] & 8 | 0) == 0) {
    label = 3;
    break;
   }
   $11 = (HEAP32[89688] | 0) == 0;
   HEAP32[22292] = $11 & 1;
   if (!$11) {
    break;
   }
   HEAP32[89606] = 256;
   $14 = _xmalloc(9216) | 0;
   HEAP32[89620] = $14;
   _memset($14 | 0, 0, (HEAP32[89606] | 0) * 36 | 0 | 0) | 0;
   HEAP32[89610] = 256;
   $18 = _xmalloc(4096) | 0;
   HEAP32[89680] = $18;
   _memset($18 | 0, 0, HEAP32[89610] << 4 | 0) | 0;
   HEAP32[89678] = 0;
   HEAP32[89618] = 0;
  } else {
   label = 3;
  }
 } while (0);
 if ((label | 0) == 3) {
  HEAP32[22292] = 0;
 }
 $23 = $macrobuf | 0;
 do {
  if ((_replace($defp, $23, $macrobuf + 262144 | 0, 0, HEAP32[89668] | 0, HEAP32[$line_col >> 2] | 0, HEAP32[$line_col + 4 >> 2] | 0, 0) | 0) == 0) {
   $29 = HEAP32[89668] | 0;
   do {
    if (($29 | 0) != 0) {
     if ((HEAP32[$29 + 8 >> 2] | 0) == 0) {
      $35 = $29;
     } else {
      break;
     }
     do {
      $36 = $35 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      HEAP32[$36 >> 2] = $37 + (_strlen($37 | 0) | 0);
      _get_ch() | 0;
      $35 = HEAP32[89668] | 0;
     } while ((HEAP32[$35 + 8 >> 2] | 0) == 0);
     _unget_ch();
    }
   } while (0);
   HEAP32[89616] = -1;
   $out50 = $out;
  } else {
   $48 = $out_end - $out | 0;
   if ((_strlen($23 | 0) | 0) >>> 0 > $48 >>> 0) {
    _cerror(15464, HEAP32[89614] | 0, 0, $23);
    _memcpy($out | 0, $23 | 0, $48) | 0;
    HEAP32[89616] = -1;
    $out50 = $out + $48 | 0;
    break;
   } else {
    $c1_0 = 0;
    $54 = $23;
    $out48 = $out;
   }
   L19 : while (1) {
    $55 = $54 + 1 | 0;
    $56 = HEAP8[$54] | 0;
    $57 = $56 << 24 >> 24;
    if (($56 << 24 >> 24 | 0) == 25) {
     $c1_0 = $c1_0;
     $54 = $55;
     $out48 = $out48;
     continue;
    } else if (($56 << 24 >> 24 | 0) == 0) {
     label = 51;
     break;
    }
    do {
     if ((HEAP32[682] | 0) == 3) {
      if (($56 << 24 >> 24 | 0) == 26) {
       $c1_0 = $c1_0;
       $54 = (HEAP32[22292] | 0) == 0 ? $55 : $54 + 3 | 0;
       $out48 = $out48;
       continue L19;
      } else if (($56 << 24 >> 24 | 0) == 31) {
       $68 = HEAP32[91636] | 0;
       if ((HEAP16[$68 + (($c1_0 & 255) << 1) >> 1] & 64) != 0) {
        $c1_0 = $c1_0;
        $54 = $55;
        $out48 = $out48;
        continue L19;
       }
       $74 = HEAP8[$55] | 0;
       if ((HEAP16[$68 + (($74 & 255) << 1) >> 1] & 64) != 0 | (HEAP32[89682] | 0) != 0 | (HEAP32[89550] | 0) != 0) {
        $c1_0 = $c1_0;
        $54 = $55;
        $out48 = $out48;
        continue L19;
       }
       if ($74 << 24 >> 24 == 24) {
        if ((HEAP8[$54 + 2 | 0] | 0) == 2) {
         $c1_0 = $c1_0;
         $54 = $55;
         $out48 = $out48;
         continue L19;
        }
       }
       $91 = (HEAP32[89547] | 0) == 0;
       if ($91 & ($c1_0 | 0) == 2) {
        $c1_0 = 2;
        $54 = $55;
        $out48 = $out48;
        continue L19;
       }
       if ($91) {
        $c_0 = 32;
        break;
       }
       if ((HEAP8[$54 - 4 | 0] | 0) != 24) {
        $c_0 = 32;
        break;
       }
       if ((HEAP8[$54 - 3 | 0] | 0) == 2) {
        $c1_0 = $c1_0;
        $54 = $55;
        $out48 = $out48;
        continue L19;
       } else {
        $c_0 = 32;
        break;
       }
      } else {
       if (!((HEAP32[22292] | 0) != 0 & $56 << 24 >> 24 == 24)) {
        $c_0 = $57;
        break;
       }
       $107 = $54 + 2 | 0;
       $109 = HEAP8[$55] | 0;
       do {
        if ((HEAP8[$out48 - 1 | 0] | 0) == 47) {
         if ((HEAP8[$out48 - 2 | 0] | 0) == 42) {
          $out47 = $out48;
          break;
         }
         HEAP8[$out48] = 32;
         $out47 = $out48 + 1 | 0;
        } else {
         $out47 = $out48;
        }
       } while (0);
       $120 = (HEAP32[89547] | 0) == 0;
       if ($120) {
        if (($109 | 0) == 3 | ($109 | 0) == 1) {
         label = 32;
        } else {
         $m_inf_0_i = 0;
         $134 = $107;
        }
       } else {
        label = 32;
       }
       if ((label | 0) == 32) {
        label = 0;
        $m_inf_0_i = (HEAP32[89620] | 0) + (((HEAPU8[$54 + 3 | 0] | -256) + ((HEAPU8[$107] | 0) * 255 | 0) | 0) * 36 | 0) | 0;
        $134 = $54 + 4 | 0;
       }
       do {
        if (($109 | 0) == 1) {
         $136 = $m_inf_0_i | 0;
         $139 = _sprintf($out47 | 0, 14368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[$136 >> 2] | 0) + 25, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $140 = $out47 + $139 | 0;
         $142 = HEAP32[$m_inf_0_i + 16 >> 2] | 0;
         if (($142 | 0) == 0) {
          $154 = $140;
         } else {
          $146 = HEAP32[$m_inf_0_i + 20 >> 2] | 0;
          $148 = HEAP32[$m_inf_0_i + 24 >> 2] | 0;
          $150 = HEAP32[$m_inf_0_i + 28 >> 2] | 0;
          $151 = _sprintf($140 | 0, 14256, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = $142, HEAP32[tempVarArgs + 8 >> 2] = $146, HEAP32[tempVarArgs + 16 >> 2] = $148, HEAP32[tempVarArgs + 24 >> 2] = $150, tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
          $154 = $out47 + ($151 + $139) | 0;
         }
         $155 = $154 + 2 | 0;
         HEAP8[$154] = HEAP8[14128] | 0;
         HEAP8[$154 + 1 | 0] = HEAP8[14129] | 0;
         HEAP8[$154 + 2 | 0] = HEAP8[14130] | 0;
         $157 = HEAP32[$m_inf_0_i + 8 >> 2] | 0;
         if (($157 | 0) <= 0) {
          $224 = $134;
          $out49 = $155;
          break;
         }
         $159 = $m_inf_0_i + 32 | 0;
         $160 = $m_inf_0_i + 12 | 0;
         $i_047_i = 0;
         $162 = $155;
         while (1) {
          $163 = HEAP32[$159 >> 2] | 0;
          $165 = (HEAP32[$136 >> 2] | 0) + 25 | 0;
          $166 = HEAP32[$160 >> 2] | 0;
          $167 = _sprintf($162 | 0, 13792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 13712, HEAP32[tempVarArgs + 8 >> 2] = $165, HEAP32[tempVarArgs + 16 >> 2] = $166, HEAP32[tempVarArgs + 24 >> 2] = $i_047_i, tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
          $168 = $162 + $167 | 0;
          do {
           if ((HEAP32[$159 >> 2] | 0) == 0) {
            $_0_i_i = $168;
           } else {
            $173 = HEAP32[$163 + ($i_047_i << 4) >> 2] | 0;
            if (($173 | 0) == 0) {
             $_0_i_i = $168;
             break;
            }
            $177 = HEAP32[$163 + ($i_047_i << 4) + 4 >> 2] | 0;
            $179 = HEAP32[$163 + ($i_047_i << 4) + 8 >> 2] | 0;
            $181 = HEAP32[$163 + ($i_047_i << 4) + 12 >> 2] | 0;
            $182 = _sprintf($168 | 0, 14256, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = $173, HEAP32[tempVarArgs + 8 >> 2] = $177, HEAP32[tempVarArgs + 16 >> 2] = $179, HEAP32[tempVarArgs + 24 >> 2] = $181, tempVarArgs) | 0) | 0;
            STACKTOP = tempVarArgs;
            $_0_i_i = $162 + ($182 + $167) | 0;
           }
          } while (0);
          $184 = $_0_i_i + 2 | 0;
          HEAP8[$_0_i_i] = HEAP8[14128] | 0;
          HEAP8[$_0_i_i + 1 | 0] = HEAP8[14129] | 0;
          HEAP8[$_0_i_i + 2 | 0] = HEAP8[14130] | 0;
          $185 = $i_047_i + 1 | 0;
          if (($185 | 0) < ($157 | 0)) {
           $i_047_i = $185;
           $162 = $184;
          } else {
           $224 = $134;
           $out49 = $184;
           break;
          }
         }
        } else if (($109 | 0) == 3) {
         $191 = (HEAPU8[$134] | 0) - 1 | 0;
         $194 = (HEAP32[$m_inf_0_i >> 2] | 0) + 25 | 0;
         $196 = HEAP32[$m_inf_0_i + 12 >> 2] | 0;
         $197 = _sprintf($out47 | 0, 13792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 13592, HEAP32[tempVarArgs + 8 >> 2] = $194, HEAP32[tempVarArgs + 16 >> 2] = $196, HEAP32[tempVarArgs + 24 >> 2] = $191, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $198 = $out47 + $197 | 0;
         HEAP8[$198] = HEAP8[14128] | 0;
         HEAP8[$198 + 1 | 0] = HEAP8[14129] | 0;
         HEAP8[$198 + 2 | 0] = HEAP8[14130] | 0;
         $224 = $134 + 1 | 0;
         $out49 = $out47 + ($197 + 2) | 0;
        } else if (($109 | 0) == 2) {
         if ($120) {
          label = 47;
          break;
         }
         $205 = _sprintf($out47 | 0, 14016, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[$m_inf_0_i >> 2] | 0) + 25, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $224 = $134;
         $out49 = $out47 + $205 | 0;
        } else if (($109 | 0) == 4) {
         if ($120) {
          label = 47;
          break;
         }
         $212 = (HEAPU8[$134] | 0) - 1 | 0;
         $215 = (HEAP32[$m_inf_0_i >> 2] | 0) + 25 | 0;
         $217 = HEAP32[$m_inf_0_i + 12 >> 2] | 0;
         $218 = _sprintf($out47 | 0, 13792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 368664, HEAP32[tempVarArgs + 8 >> 2] = $215, HEAP32[tempVarArgs + 16 >> 2] = $217, HEAP32[tempVarArgs + 24 >> 2] = $212, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $220 = $out47 + ($218 + 1) | 0;
         $221 = $out47 + $218 | 0;
         tempBigInt = 62;
         HEAP8[$221] = tempBigInt;
         tempBigInt = tempBigInt >> 8;
         HEAP8[$221 + 1 | 0] = tempBigInt;
         HEAP8[$220] = HEAP8[14128] | 0;
         HEAP8[$220 + 1 | 0] = HEAP8[14129] | 0;
         HEAP8[$220 + 2 | 0] = HEAP8[14130] | 0;
         $224 = $134 + 1 | 0;
         $out49 = $out47 + ($218 + 3) | 0;
        } else {
         $224 = $134;
         $out49 = $out47;
        }
       } while (0);
       if ((label | 0) == 47) {
        label = 0;
        HEAP8[$out47] = HEAP8[13888] | 0;
        HEAP8[$out47 + 1 | 0] = HEAP8[13889] | 0;
        HEAP8[$out47 + 2 | 0] = HEAP8[13890] | 0;
        HEAP8[$out47 + 3 | 0] = HEAP8[13891] | 0;
        HEAP8[$out47 + 4 | 0] = HEAP8[13892] | 0;
        HEAP8[$out47 + 5 | 0] = HEAP8[13893] | 0;
        $224 = $134;
        $out49 = $out47 + 5 | 0;
       }
       if ($out49 >>> 0 < $out_end >>> 0) {
        $c1_0 = HEAPU8[$224] | 0;
        $54 = $224;
        $out48 = $out49;
        continue L19;
       } else {
        label = 49;
        break L19;
       }
      }
     } else {
      $c_0 = $57;
     }
    } while (0);
    HEAP8[$out48] = $c_0;
    $c1_0 = $c_0;
    $54 = $55;
    $out48 = $out48 + 1 | 0;
   }
   if ((label | 0) == 49) {
    _cerror(15464, HEAP32[89614] | 0, 0, $out);
    HEAP32[89616] = -1;
    $out50 = $out49;
    break;
   } else if ((label | 0) == 51) {
    HEAP32[89616] = 0;
    $out50 = $out48;
    break;
   }
  }
 } while (0);
 HEAP8[$out50] = 0;
 if ((HEAP32[89594] & 4 | 0) != 0) {
  _dump_string(14480, $out);
 }
 HEAP32[89614] = 0;
 _clear_exp_mac();
 if ((HEAP32[22292] | 0) == 0) {
  $_b = HEAP8[6112] | 0;
  $266 = $_b & 1;
  HEAP32[$pragma_op >> 2] = $266;
  STACKTOP = sp;
  return $out50 | 0;
 }
 $242 = HEAP32[89618] | 0;
 $244 = HEAP32[89620] | 0;
 if (($242 | 0) > 1) {
  $num_051 = 1;
  $246 = $244;
  $245 = $242;
  while (1) {
   if ((HEAP32[$246 + ($num_051 * 36 | 0) + 8 >> 2] | 0) > -1) {
    _free(HEAP32[$246 + ($num_051 * 36 | 0) + 4 >> 2] | 0);
    _free(HEAP32[(HEAP32[89620] | 0) + ($num_051 * 36 | 0) + 32 >> 2] | 0);
    $259 = HEAP32[89618] | 0;
    $258 = HEAP32[89620] | 0;
   } else {
    $259 = $245;
    $258 = $246;
   }
   $260 = $num_051 + 1 | 0;
   if (($260 | 0) < ($259 | 0)) {
    $num_051 = $260;
    $246 = $258;
    $245 = $259;
   } else {
    $_lcssa = $258;
    break;
   }
  }
 } else {
  $_lcssa = $244;
 }
 _free($_lcssa);
 _free(HEAP32[89680] | 0);
 $_b = HEAP8[6112] | 0;
 $266 = $_b & 1;
 HEAP32[$pragma_op >> 2] = $266;
 STACKTOP = sp;
 return $out50 | 0;
}
function _eval_one($seq_pp, $wide, $mbits, $ucn8) {
 $seq_pp = $seq_pp | 0;
 $wide = $wide | 0;
 $mbits = $mbits | 0;
 $ucn8 = $ucn8 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0, $10 = 0, $digits_0 = 0, $uc_0 = 0, $bits_0 = 0, $33 = 0, $wchar_max_0$0 = 0, $wchar_max_0$1 = 0, $36 = 0, $37$0 = 0, $38 = 0, $erange_0_us = 0, $value_0_us$0 = 0, $value_0_us$1 = 0, $uc_1_us = 0, $count_0_us = 0, $uc_2_us = 0, $45 = 0, $51 = 0, $53$0 = 0, $53$1 = 0, $erange_1_us = 0, $60 = 0, $value_0_us109$0 = 0, $value_0_us109$1 = 0, $uc_1_us110 = 0, $count_0_us111 = 0, $uc_2_us112 = 0, $70 = 0, $76 = 0, $79 = 0, $erange_0 = 0, $value_0$0 = 0, $value_0$1 = 0, $uc_1 = 0, $count_0 = 0, $uc_2 = 0, $89 = 0, $96 = 0, $98$0 = 0, $98$1 = 0, $erange_1 = 0, $105 = 0, $111 = 0, $count_0_lcssa = 0, $value_0_lcssa$0 = 0, $value_0_lcssa$1 = 0, $erange_0_lcssa = 0, $113 = 0, $118 = 0, $value_0_lcssa139$0 = 0, $value_0_lcssa139$1 = 0, $count_0_lcssa138 = 0, $_not98 = 0, $$etemp$2$1 = 0, $$etemp$7$1 = 0, $$etemp$8$1 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $_lcssa$0 = 0, $_lcssa$1 = 0, $166 = 0, $value_1$0 = 0, $value_1$1 = 0, $167 = 0, $170 = 0, $188 = 0, $_0$0 = 0, $_0$1 = 0, $49$0 = 0, $74$0 = 0, $94$0 = 0, $value_0_off$0 = 0, $value_0_off$1 = 0, label = 0;
 $1 = HEAP32[$seq_pp >> 2] | 0;
 $2 = $1 + 1 | 0;
 HEAP32[$seq_pp >> 2] = $2;
 $3 = HEAP8[$1] | 0;
 if ($3 << 24 >> 24 != 92) {
  $_0$1 = 0;
  $_0$0 = $3 & 255;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 }
 $8 = $1 + 2 | 0;
 HEAP32[$seq_pp >> 2] = $8;
 $9 = HEAP8[$2] | 0;
 $10 = $9 & 255;
 switch ($10 | 0) {
 case 110:
  {
   $_0$1 = 0;
   $_0$0 = 10;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 120:
  {
   if ((HEAP32[592] | 0) == 0) {
    $150 = $8;
   } else {
    label = 12;
   }
   break;
  }
 case 117:
 case 85:
  {
   if ((HEAP32[23330] | 0) != 0 & (HEAP32[592] | 0) != 0) {
    label = 12;
   } else {
    $150 = $8;
   }
   break;
  }
 case 114:
  {
   $_0$1 = 0;
   $_0$0 = 13;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 116:
  {
   $_0$1 = 0;
   $_0$0 = 9;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 97:
  {
   $_0$1 = 0;
   $_0$0 = 7;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 102:
  {
   $_0$1 = 0;
   $_0$0 = 12;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 39:
 case 34:
 case 63:
 case 92:
  {
   $_0$1 = 0;
   $_0$0 = $9 & 255;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 48:
 case 49:
 case 50:
 case 51:
 case 52:
 case 53:
 case 54:
 case 55:
  {
   $bits_0 = 3;
   $uc_0 = $10;
   $digits_0 = 9512;
   label = 14;
   break;
  }
 case 98:
  {
   $_0$1 = 0;
   $_0$0 = 8;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 case 118:
  {
   $_0$1 = 0;
   $_0$0 = 11;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 default:
  {
   $150 = $8;
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$seq_pp >> 2] = $1 + 3;
  $bits_0 = 4;
  $uc_0 = HEAPU8[$8] | 0;
  $digits_0 = 9560;
  label = 14;
 }
 L25 : do {
  if ((label | 0) == 14) {
   if (($mbits | 0) == 32) {
    $33 = (HEAP32[682] | 0) == 3;
    $wchar_max_0$1 = $33 ? 0 : 0;
    $wchar_max_0$0 = $33 ? -1 : 2147483647;
   } else {
    $wchar_max_0$1 = 0;
    $wchar_max_0$0 = 65535;
   }
   $36 = $9 << 24 >> 24 == 85;
   $37$0 = $bits_0;
   $38 = $digits_0;
   L30 : do {
    if (($bits_0 | 0) == 3) {
     $count_0_us = 0;
     $uc_1_us = $uc_0;
     $value_0_us$1 = 0;
     $value_0_us$0 = 0;
     $erange_0_us = 0;
     while (1) {
      if ((_isupper($uc_1_us | 0) | 0) == 0) {
       $uc_2_us = $uc_1_us;
      } else {
       $uc_2_us = _tolower($uc_1_us | 0) | 0;
      }
      $45 = _strchr($digits_0 | 0, $uc_2_us | 0) | 0;
      if (($45 | 0) == 0 | ($count_0_us | 0) > 2) {
       $erange_0_lcssa = $erange_0_us;
       $value_0_lcssa$1 = $value_0_us$1;
       $value_0_lcssa$0 = $value_0_us$0;
       $count_0_lcssa = $count_0_us;
       label = 38;
       break L30;
      }
      $49$0 = _bitshift64Shl($value_0_us$0 | 0, $value_0_us$1 | 0, $37$0 | 0) | 0;
      $51 = $45 - $38 | 0;
      $53$0 = $51 | $49$0;
      $53$1 = (($51 | 0) < 0 | 0 ? -1 : 0) | tempRet0;
      do {
       if ($wchar_max_0$1 >>> 0 < $53$1 >>> 0 | $wchar_max_0$1 >>> 0 == $53$1 >>> 0 & $wchar_max_0$0 >>> 0 < $53$0 >>> 0) {
        if (($9 << 24 >> 24 | 0) == 117 | ($9 << 24 >> 24 | 0) == 85) {
         $erange_1_us = $erange_0_us;
         break;
        }
        if ((HEAP32[23336] | 0) == 0) {
         $_lcssa$1 = $53$1;
         $_lcssa$0 = $53$0;
         label = 61;
         break L30;
        } else {
         $erange_1_us = 1;
        }
       } else {
        $erange_1_us = $erange_0_us;
       }
      } while (0);
      $60 = HEAP32[$seq_pp >> 2] | 0;
      HEAP32[$seq_pp >> 2] = $60 + 1;
      $count_0_us = $count_0_us + 1 | 0;
      $uc_1_us = HEAPU8[$60] | 0;
      $value_0_us$1 = $53$1;
      $value_0_us$0 = $53$0;
      $erange_0_us = $erange_1_us;
     }
    } else {
     if ($9 << 24 >> 24 == 117) {
      $count_0_us111 = 0;
      $uc_1_us110 = $uc_0;
      $value_0_us109$1 = 0;
      $value_0_us109$0 = 0;
      while (1) {
       if ((_isupper($uc_1_us110 | 0) | 0) == 0) {
        $uc_2_us112 = $uc_1_us110;
       } else {
        $uc_2_us112 = _tolower($uc_1_us110 | 0) | 0;
       }
       $70 = _strchr($digits_0 | 0, $uc_2_us112 | 0) | 0;
       if (($70 | 0) == 0 | ($count_0_us111 | 0) > 3) {
        break;
       }
       $74$0 = _bitshift64Shl($value_0_us109$0 | 0, $value_0_us109$1 | 0, $37$0 | 0) | 0;
       $76 = $70 - $38 | 0;
       $79 = HEAP32[$seq_pp >> 2] | 0;
       HEAP32[$seq_pp >> 2] = $79 + 1;
       $count_0_us111 = $count_0_us111 + 1 | 0;
       $uc_1_us110 = HEAPU8[$79] | 0;
       $value_0_us109$1 = (($76 | 0) < 0 | 0 ? -1 : 0) | tempRet0;
       $value_0_us109$0 = $76 | $74$0;
      }
      $111 = (HEAP32[$seq_pp >> 2] | 0) - 1 | 0;
      HEAP32[$seq_pp >> 2] = $111;
      $count_0_lcssa138 = $count_0_us111;
      $value_0_lcssa139$1 = $value_0_us109$1;
      $value_0_lcssa139$0 = $value_0_us109$0;
      $118 = $111;
      label = 40;
      break;
     } else {
      $count_0 = 0;
      $uc_1 = $uc_0;
      $value_0$1 = 0;
      $value_0$0 = 0;
      $erange_0 = 0;
     }
     while (1) {
      if ((_isupper($uc_1 | 0) | 0) == 0) {
       $uc_2 = $uc_1;
      } else {
       $uc_2 = _tolower($uc_1 | 0) | 0;
      }
      $89 = _strchr($digits_0 | 0, $uc_2 | 0) | 0;
      if (($89 | 0) == 0) {
       $erange_0_lcssa = $erange_0;
       $value_0_lcssa$1 = $value_0$1;
       $value_0_lcssa$0 = $value_0$0;
       $count_0_lcssa = $count_0;
       label = 38;
       break L30;
      }
      if (($count_0 | 0) > 7 & $36) {
       $erange_0_lcssa = $erange_0;
       $value_0_lcssa$1 = $value_0$1;
       $value_0_lcssa$0 = $value_0$0;
       $count_0_lcssa = $count_0;
       label = 38;
       break L30;
      }
      $94$0 = _bitshift64Shl($value_0$0 | 0, $value_0$1 | 0, $37$0 | 0) | 0;
      $96 = $89 - $38 | 0;
      $98$0 = $96 | $94$0;
      $98$1 = (($96 | 0) < 0 | 0 ? -1 : 0) | tempRet0;
      do {
       if ($wchar_max_0$1 >>> 0 < $98$1 >>> 0 | $wchar_max_0$1 >>> 0 == $98$1 >>> 0 & $wchar_max_0$0 >>> 0 < $98$0 >>> 0) {
        if (($9 << 24 >> 24 | 0) == 117 | ($9 << 24 >> 24 | 0) == 85) {
         $erange_1 = $erange_0;
         break;
        }
        if ((HEAP32[23336] | 0) == 0) {
         $_lcssa$1 = $98$1;
         $_lcssa$0 = $98$0;
         label = 61;
         break L30;
        } else {
         $erange_1 = 1;
        }
       } else {
        $erange_1 = $erange_0;
       }
      } while (0);
      $105 = HEAP32[$seq_pp >> 2] | 0;
      HEAP32[$seq_pp >> 2] = $105 + 1;
      $count_0 = $count_0 + 1 | 0;
      $uc_1 = HEAPU8[$105] | 0;
      $value_0$1 = $98$1;
      $value_0$0 = $98$0;
      $erange_0 = $erange_1;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 61) {
     $value_1$1 = $_lcssa$1;
     $value_1$0 = $_lcssa$0;
     $166 = HEAP32[$seq_pp >> 2] | 0;
    } else if ((label | 0) == 38) {
     $113 = (HEAP32[$seq_pp >> 2] | 0) - 1 | 0;
     HEAP32[$seq_pp >> 2] = $113;
     if (($erange_0_lcssa | 0) == 0) {
      $count_0_lcssa138 = $count_0_lcssa;
      $value_0_lcssa139$1 = $value_0_lcssa$1;
      $value_0_lcssa139$0 = $value_0_lcssa$0;
      $118 = $113;
      label = 40;
      break;
     }
     $value_1$1 = $value_0_lcssa$1 & $wchar_max_0$1;
     $value_1$0 = $value_0_lcssa$0 & $wchar_max_0$0;
     $166 = $113;
    }
   } while (0);
   do {
    if ((label | 0) == 40) {
     if (($count_0_lcssa138 | 0) == 0 & ($bits_0 | 0) == 4) {
      $150 = $118;
      break L25;
     }
     if (!(($9 << 24 >> 24 | 0) == 117 | ($9 << 24 >> 24 | 0) == 85)) {
      $$etemp$8$1 = 0;
      if (($wide | 0) == 0 & ($value_0_lcssa139$1 >>> 0 > $$etemp$8$1 >>> 0 | $value_0_lcssa139$1 >>> 0 == $$etemp$8$1 >>> 0 & $value_0_lcssa139$0 >>> 0 > 255 >>> 0)) {
       $value_1$1 = $value_0_lcssa139$1 & 0;
       $value_1$0 = $value_0_lcssa139$0 & 255;
       $166 = $118;
       break;
      } else {
       $_0$1 = $value_0_lcssa139$1;
       $_0$0 = $value_0_lcssa139$0;
       return (tempRet0 = $_0$1, $_0$0) | 0;
      }
     }
     if (!(($count_0_lcssa138 | 0) > 3 | $9 << 24 >> 24 != 117)) {
      $150 = $118;
      break L25;
     }
     $_not98 = $9 << 24 >> 24 != 85;
     if (!(($count_0_lcssa138 | 0) > 7 | $_not98)) {
      $150 = $118;
      break L25;
     }
     $$etemp$2$1 = 0;
     if ($value_0_lcssa139$1 >>> 0 < $$etemp$2$1 >>> 0 | $value_0_lcssa139$1 >>> 0 == $$etemp$2$1 >>> 0 & $value_0_lcssa139$0 >>> 0 < 160 >>> 0) {
      if (($value_0_lcssa139$0 | 0) == 96 & ($value_0_lcssa139$1 | 0) == 0 | ($value_0_lcssa139$0 | 0) == 64 & ($value_0_lcssa139$1 | 0) == 0 | ($value_0_lcssa139$0 | 0) == 36 & ($value_0_lcssa139$1 | 0) == 0) {
       label = 46;
      } else {
       label = 48;
      }
     } else {
      label = 46;
     }
     do {
      if ((label | 0) == 46) {
       if ((HEAP32[23328] | 0) != 0) {
        break;
       }
       $value_0_off$0 = _i64Add($value_0_lcssa139$0, $value_0_lcssa139$1, -55296, -1) | 0;
       $value_0_off$1 = tempRet0;
       $$etemp$7$1 = 0;
       if ($value_0_off$1 >>> 0 < $$etemp$7$1 >>> 0 | $value_0_off$1 >>> 0 == $$etemp$7$1 >>> 0 & $value_0_off$0 >>> 0 < 2048 >>> 0) {
        label = 48;
       }
      }
     } while (0);
     do {
      if ((label | 0) == 48) {
       if ((HEAP32[23336] | 0) == 0) {
        _cerror(9784, 0, $value_0_lcssa139$0, 0);
        break;
       }
       if ((HEAP32[4] & 8 | 0) == 0) {
        break;
       }
       _cwarn(9784, 0, $value_0_lcssa139$0, 0);
      }
     } while (0);
     if (($count_0_lcssa138 | 0) < 8 | $_not98) {
      $_0$1 = $value_0_lcssa139$1;
      $_0$0 = $value_0_lcssa139$0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
     }
     HEAP32[$ucn8 >> 2] = 1;
     $_0$1 = $value_0_lcssa139$1;
     $_0$0 = $value_0_lcssa139$0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
   } while (0);
   $167 = HEAP8[$166] | 0;
   HEAP8[$166] = 0;
   $170 = (HEAP32[23336] | 0) != 0;
   do {
    if (($wide | 0) == 0) {
     if (!$170) {
      _cerror(9648, 0, 8, $1);
      break;
     }
     if ((HEAP32[4] & 8 | 0) == 0) {
      break;
     }
     _cwarn(9648, 12504, 8, $1);
    } else {
     if (!$170) {
      _cerror(9648, 0, $mbits, $1);
      break;
     }
     if ((HEAP32[4] & 8 | 0) == 0) {
      break;
     }
     _cwarn(9648, 12504, $mbits, $1);
    }
   } while (0);
   HEAP8[HEAP32[$seq_pp >> 2] | 0] = $167;
   $188 = (HEAP32[23336] | 0) == 0;
   $_0$1 = $188 ? -1 : $value_1$1;
   $_0$0 = $188 ? -1 : $value_1$0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 $151 = HEAP8[$150] | 0;
 HEAP8[$150] = 0;
 $152 = HEAP32[23336] | 0;
 $154 = HEAP32[4] | 0;
 if (($152 | 0) == 0) {
  if (($154 & 1 | 0) != 0) {
   label = 59;
  }
 } else {
  if (($154 & 8 | 0) != 0) {
   label = 59;
  }
 }
 if ((label | 0) == 59) {
  _cwarn(9408, ($152 | 0) != 0 ? 12504 : 0, 0, $1);
 }
 HEAP8[HEAP32[$seq_pp >> 2] | 0] = $151;
 HEAP32[$seq_pp >> 2] = $2;
 $_0$1 = 0;
 $_0$0 = 92;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _do_include($next) {
 $next = $next | 0;
 var $fullname_i_i_i = 0, $src_dir_i = 0, $header = 0, $1 = 0, $8 = 0, $18 = 0, $21 = 0, $_lcssa = 0, $hp_1_lcssa = 0, $hp_022 = 0, $32 = 0, $33 = 0, $_off0 = 0, $hp_120 = 0, $40 = 0, $41 = 0, $hp_0_lcssa = 0, $51 = 0, $delim_0 = 0, $55 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $93 = 0, $94 = 0, $_0_i_i = 0, $99 = 0, $105 = 0, $107 = 0, $110 = 0, $116 = 0, $_0_i6_i = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $129 = 0, $has_dir_0_i = 0, $147 = 0, $_not_i = 0, $156 = 0, $167 = 0, $168 = 0, $incptr_0_i_i = 0, $173 = 0, $174 = 0, $183 = 0, $186 = 0, $i_037_i_i_i = 0, $191 = 0, $192 = 0, $193 = 0, $195 = 0, $j_0_i_i_i_i = 0, $201 = 0, $213 = 0, $file_032_i_i_i = 0, $220 = 0, $221 = 0, $226 = 0, $227 = 0, $_sum_i_i_i = 0, $230 = 0, $_sum30_i_i_i = 0, $231 = 0, $j_0_i25_i_i_i = 0, $237 = 0, $250 = 0, $251 = 0, $255 = 0, $257 = 0, $262 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $274 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12312 | 0;
 $fullname_i_i_i = sp | 0;
 $src_dir_i = sp + 4104 | 0;
 $header = sp + 8200 | 0;
 $1 = _skip_ws() | 0;
 if (($1 | 0) == 10) {
  _cerror(12768, 0, 0, 0);
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $8 = (HEAP32[HEAP32[89668] >> 2] | 0) - 1 | 0;
 do {
  if ((HEAP32[592] | 0) == 0) {
   $delim_0 = $1;
  } else {
   if ((HEAP16[(HEAP32[91636] | 0) + ($1 << 1) >> 1] & 1) == 0) {
    $delim_0 = $1;
    break;
   }
   $18 = $header | 0;
   HEAP8[$18] = 0;
   if ((_get_unexpandable($1, 0) | 0) == 0) {
    $hp_0_lcssa = $18;
   } else {
    $21 = $header + 4096 | 0;
    $hp_022 = $18;
    while (1) {
     if ($21 >>> 0 < ($hp_022 + ((HEAP32[5584] | 0) - 22344) | 0) >>> 0) {
      _cfatal(20368, $18, 0, 22344);
     }
     $32 = _stpcpy($hp_022 | 0, 22344) | 0;
     $33 = _get_ch() | 0;
     if ((HEAP16[(HEAP32[91636] | 0) + ($33 << 1) >> 1] & 64) == 0) {
      $hp_1_lcssa = $32;
      $_lcssa = $33;
     } else {
      $hp_120 = $32;
      $_off0 = $33 & 255;
      while (1) {
       $40 = $hp_120 + 1 | 0;
       HEAP8[$hp_120] = $_off0;
       $41 = _get_ch() | 0;
       if ((HEAP16[(HEAP32[91636] | 0) + ($41 << 1) >> 1] & 64) == 0) {
        $hp_1_lcssa = $40;
        $_lcssa = $41;
        break;
       } else {
        $hp_120 = $40;
        $_off0 = $41 & 255;
       }
      }
     }
     if ((_get_unexpandable($_lcssa, 0) | 0) == 0) {
      $hp_0_lcssa = $hp_1_lcssa;
      break;
     } else {
      $hp_022 = $hp_1_lcssa;
     }
    }
   }
   HEAP8[$hp_0_lcssa] = 0;
   if ((HEAP32[89616] | 0) == -1) {
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   }
   _unget_string($18, 0) | 0;
   $51 = _skip_ws() | 0;
   if (($51 | 0) != 10) {
    $delim_0 = $51;
    break;
   }
   _cerror(12768, 0, 0, 0);
   $_0 = 0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 HEAP32[5584] = 22344;
 $55 = _scan_token($delim_0, 22336, 26440) | 0;
 do {
  if (($55 | 0) == 67) {
   $65 = HEAP32[5584] | 0;
  } else {
   if (($55 | 0) == 71 & (HEAP32[89554] | 0) == 14) {
    $62 = _scan_quote($delim_0, 22344, 26440, 1) | 0;
    HEAP32[5584] = $62;
    if (($62 | 0) != 0) {
     $65 = $62;
     break;
    }
   } else {
    _cerror(12424, $8, 0, 0);
   }
   _skip_nl();
   $_0 = 0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 $66 = $65 - 1 | 0;
 HEAP32[5584] = $66;
 HEAP8[$66] = 0;
 $67 = _save_string(22345) | 0;
 do {
  if ((_skip_ws() | 0) == 10) {
   label = 28;
  } else {
   if ((HEAP32[592] | 0) != 0) {
    _cerror(20408, (HEAP32[HEAP32[89668] >> 2] | 0) - 1 | 0, 0, 0);
    _skip_nl();
    break;
   }
   if ((HEAP32[682] | 0) == 1) {
    _skip_nl();
    label = 28;
    break;
   }
   if ((HEAP32[4] & 1 | 0) != 0) {
    _cwarn(20408, (HEAP32[HEAP32[89668] >> 2] | 0) - 1 | 0, 0, 0);
   }
   _skip_nl();
   label = 28;
  }
 } while (0);
 if ((label | 0) == 28) {
  $93 = ($delim_0 | 0) == 34;
  $94 = $src_dir_i | 0;
  _memset($94 | 0, 0, 4096) | 0;
  if (($67 | 0) == 0) {
   $_0_i_i = 0;
  } else {
   $_0_i_i = (HEAP8[$67] | 0) == 47;
  }
  $99 = $93 ^ 1;
  L52 : do {
   if ($_0_i_i | $99) {
    $has_dir_0_i = 0;
   } else {
    if ((HEAP32[634] & 2 | 0) == 0) {
     $has_dir_0_i = 0;
     break;
    }
    $105 = HEAP32[89668] | 0;
    $107 = HEAP32[$105 + 36 >> 2] | 0;
    do {
     if (($107 | 0) == 0) {
      $_0_i6_i = 0;
     } else {
      $110 = _strrchr($107 | 0, 47) | 0;
      if (($110 | 0) == 0) {
       $_0_i6_i = 0;
       break;
      }
      $116 = $110 - $107 + 1 | 0;
      _memcpy($94 | 0, $107 | 0, $116) | 0;
      HEAP8[$src_dir_i + $116 | 0] = 0;
      $_0_i6_i = 1;
     }
    } while (0);
    $119 = HEAP32[$105 + 40 >> 2] | 0;
    $120 = _strlen($94 | 0) | 0;
    $121 = $src_dir_i + $120 | 0;
    do {
     if (($119 | 0) != 0) {
      $124 = _strrchr($119 | 0, 47) | 0;
      if (($124 | 0) == 0) {
       break;
      }
      $129 = $124 - $119 + 1 | 0;
      _memcpy($121 | 0, $119 | 0, $129) | 0;
      HEAP8[$src_dir_i + ($129 + $120) | 0] = 0;
      $has_dir_0_i = 1;
      break L52;
     }
    } while (0);
    if (($_0_i6_i | 0) != 0) {
     $has_dir_0_i = 1;
     break;
    }
    $has_dir_0_i = (HEAP8[HEAP32[HEAP32[$105 + 32 >> 2] >> 2] | 0] | 0) != 0 | 0;
   }
  } while (0);
  if ((HEAP32[89594] & 1 | 0) != 0) {
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 21112, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $67, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
  L68 : do {
   if ($93) {
    $147 = HEAP32[634] | 0;
    do {
     if (($147 & 1 | 0) != 0 | ($has_dir_0_i | 0) == 0 | $_0_i_i) {
      $_not_i = (_open_file(2704, 0, $67) | 0) != 0;
      if ($_not_i | $_0_i_i) {
       if ($_not_i) {
        $_0 = 1;
       } else {
        break L68;
       }
       STACKTOP = sp;
       return $_0 | 0;
      } else {
       if (!$93) {
        label = 51;
        break L68;
       }
       $156 = HEAP32[634] | 0;
       break;
      }
     } else {
      $156 = $147;
     }
    } while (0);
    if (($156 & 2 | 0) == 0 | ($has_dir_0_i | 0) == 0) {
     label = 51;
     break;
    }
    if ((_open_file(HEAP32[(HEAP32[89668] | 0) + 32 >> 2] | 0, $94, $67) | 0) == 0) {
     label = 51;
     break;
    } else {
     $_0 = 1;
    }
    STACKTOP = sp;
    return $_0 | 0;
   } else {
    if (!$_0_i_i) {
     label = 51;
     break;
    }
    if ((_open_file(2704, 0, $67) | 0) == 0) {
     break;
    } else {
     $_0 = 1;
    }
    STACKTOP = sp;
    return $_0 | 0;
   }
  } while (0);
  L83 : do {
   if ((label | 0) == 51) {
    $167 = $fullname_i_i_i | 0;
    $168 = $fullname_i_i_i;
    $incptr_0_i_i = HEAP32[89674] | 0;
    L85 : while (1) {
     if ($incptr_0_i_i >>> 0 >= (HEAP32[89672] | 0) >>> 0) {
      break L83;
     }
     $173 = HEAP32[$incptr_0_i_i >> 2] | 0;
     $174 = _strlen($173 | 0) | 0;
     if (((_strlen($67 | 0) | 0) + $174 | 0) >>> 0 > 4095 >>> 0) {
      _cfatal(20368, $173, 0, $67);
     }
     do {
      if (($incptr_0_i_i | 0) == (HEAP32[22296] | 0) & $99) {
       $183 = _strchr($67 | 0, 47) | 0;
       if (($183 | 0) == 0) {
        break;
       }
       HEAP8[$183] = 0;
       $186 = $183 + 1 | 0;
       if ((HEAP32[89564] | 0) > 0) {
        $i_037_i_i_i = 0;
        do {
         $191 = _stpcpy($167 | 0, HEAP32[359928 + ($i_037_i_i_i << 2) >> 2] | 0) | 0;
         $192 = _sprintf($191 | 0, 20776, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $67, HEAP32[tempVarArgs + 8 >> 2] = 20952, HEAP32[tempVarArgs + 16 >> 2] = 47, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $193 = $191 + $192 | 0;
         $195 = $193 - $168 | 0;
         $j_0_i_i_i_i = 0;
         while (1) {
          if ($j_0_i_i_i_i >>> 0 >= 2 >>> 0) {
           break;
          }
          $201 = _sprintf($193 | 0, 20768, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[2520 + ($j_0_i_i_i_i << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = 47, HEAP32[tempVarArgs + 16 >> 2] = $186, tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
          if (($195 + $201 | 0) > 4096) {
           _cfatal(20744, 0, 0, 0);
          }
          if ((_open_file(2704, 0, $167) | 0) == 0) {
           $j_0_i_i_i_i = $j_0_i_i_i_i + 1 | 0;
          } else {
           break L85;
          }
         }
         $i_037_i_i_i = $i_037_i_i_i + 1 | 0;
        } while (($i_037_i_i_i | 0) < (HEAP32[89564] | 0));
       }
       $213 = HEAP32[89668] | 0;
       if (($213 | 0) != 0) {
        $file_032_i_i_i = $213;
        do {
         L108 : do {
          if ((HEAP32[$file_032_i_i_i + 8 >> 2] | 0) != 0) {
           $220 = HEAP32[$file_032_i_i_i + 40 >> 2] | 0;
           $221 = _strstr($220 | 0, 20952) | 0;
           if (($221 | 0) == 0) {
            break;
           }
           $226 = $221 - $220 | 0;
           $227 = $226 + 11 | 0;
           _memcpy($167 | 0, $220 | 0, $227) | 0;
           $_sum_i_i_i = $226 + 22 | 0;
           _memcpy($fullname_i_i_i + $227 | 0, 21032, 12) | 0;
           $230 = _sprintf($fullname_i_i_i + $_sum_i_i_i | 0, 20776, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $67, HEAP32[tempVarArgs + 8 >> 2] = 20952, HEAP32[tempVarArgs + 16 >> 2] = 47, tempVarArgs) | 0) | 0;
           STACKTOP = tempVarArgs;
           $_sum30_i_i_i = $230 + $_sum_i_i_i | 0;
           $231 = $fullname_i_i_i + $_sum30_i_i_i | 0;
           $j_0_i25_i_i_i = 0;
           while (1) {
            if ($j_0_i25_i_i_i >>> 0 >= 2 >>> 0) {
             break L108;
            }
            $237 = _sprintf($231 | 0, 20768, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[2520 + ($j_0_i25_i_i_i << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = 47, HEAP32[tempVarArgs + 16 >> 2] = $186, tempVarArgs) | 0) | 0;
            STACKTOP = tempVarArgs;
            if (($237 + $_sum30_i_i_i | 0) > 4096) {
             _cfatal(20744, 0, 0, 0);
            }
            if ((_open_file(2704, 0, $167) | 0) == 0) {
             $j_0_i25_i_i_i = $j_0_i25_i_i_i + 1 | 0;
            } else {
             break L85;
            }
           }
          }
         } while (0);
         $file_032_i_i_i = HEAP32[$file_032_i_i_i + 16 >> 2] | 0;
        } while (($file_032_i_i_i | 0) != 0);
       }
       HEAP8[$183] = 47;
      }
     } while (0);
     if ((_open_file($incptr_0_i_i, 0, $67) | 0) == 0) {
      $incptr_0_i_i = $incptr_0_i_i + 4 | 0;
     } else {
      $_0 = 1;
      label = 96;
      break;
     }
    }
    if ((label | 0) == 96) {
     STACKTOP = sp;
     return $_0 | 0;
    }
    if (!(HEAP8[2912] | 0)) {
     $_0 = 1;
     STACKTOP = sp;
     return $_0 | 0;
    }
    $250 = HEAP32[(HEAP32[89668] | 0) + 44 >> 2] | 0;
    $251 = HEAP32[89558] | 0;
    do {
     if (($251 | 0) == 0) {
      HEAP32[89604] = 64;
      $255 = _xmalloc(512) | 0;
      HEAP32[89558] = $255;
      HEAP32[89560] = $255;
      $272 = $255;
     } else {
      $257 = HEAP32[89560] | 0;
      $262 = HEAP32[89604] | 0;
      if (($257 - $251 >> 3 | 0) < ($262 | 0)) {
       $272 = $257;
       break;
      }
      $268 = _xrealloc($251, $262 << 4) | 0;
      HEAP32[89558] = $268;
      $269 = HEAP32[89604] | 0;
      $270 = $268 + ($269 << 3) | 0;
      HEAP32[89560] = $270;
      HEAP32[89604] = $269 << 1;
      $272 = $270;
     }
    } while (0);
    HEAP32[$272 >> 2] = $250;
    $274 = _strlen($250 | 0) | 0;
    HEAP32[(HEAP32[89560] | 0) + 4 >> 2] = $274;
    HEAP32[89560] = (HEAP32[89560] | 0) + 8;
    $_0 = 1;
    STACKTOP = sp;
    return $_0 | 0;
   }
  } while (0);
  _cerror(12592, $67, 0, 0);
 }
 _free($67);
 $_0 = 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _do_msg($severity, $format, $arg1, $arg2, $arg3) {
 $severity = $severity | 0;
 $format = $format | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $arg_s = 0, $arg_t = 0, $file_097 = 0, $7 = 0, $i_0107 = 0, $9 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $_pn = 0, $tp_0101 = 0, $21 = 0, $tp_1 = 0, $tp_0_be = 0, $sp_0_be = 0, $46 = 0, $49 = 0, $51 = 0, $sp_1 = 0, $sp_2122 = 0, $73 = 0, $file_098 = 0, $magicptr = 0, $file_0 = 0, $84 = 0, $88 = 0, $90 = 0, $97 = 0, $111 = 0, $_0_i = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $127 = 0, $135 = 0, $file_192 = 0, $141 = 0, $142 = 0, $145 = 0, $151 = 0, $155 = 0, $164 = 0, $165 = 0, $169 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $188 = 0, $191 = 0, $_0_i80 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $207 = 0, $212 = 0, $ind_089 = 0, $217 = 0, $ind_done_0 = 0, $file_287 = 0, $file_288 = 0, $233 = 0, $241 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $arg_s = sp | 0;
 $arg_t = sp + 8 | 0;
 _fflush(HEAP32[89990] | 0) | 0;
 HEAP32[$arg_s >> 2] = $arg1;
 HEAP32[$arg_s + 4 >> 2] = $arg3;
 $i_0107 = 0;
 $7 = $arg1;
 while (1) {
  do {
   if (($7 | 0) == 0) {
    $9 = _malloc(1) | 0;
    HEAP32[$arg_t + ($i_0107 << 2) >> 2] = $9;
    $19 = $9;
    label = 6;
   } else {
    $14 = _malloc((_strlen($7 | 0) | 0) + 1 | 0) | 0;
    HEAP32[$arg_t + ($i_0107 << 2) >> 2] = $14;
    $16 = HEAP8[$7] | 0;
    if ($16 << 24 >> 24 == 0) {
     $19 = $14;
     label = 6;
     break;
    } else {
     $tp_0101 = $14;
     $_pn = $7;
     $20 = $16;
    }
    while (1) {
     $21 = $_pn + 1 | 0;
     L7 : do {
      switch ($20 << 24 >> 24 | 0) {
      case 10:
       {
        HEAP8[$tp_0101] = 32;
        $sp_0_be = $21;
        $tp_0_be = $tp_0101 + 1 | 0;
        break;
       }
      case 31:
       {
        if ((HEAP32[682] | 0) == 1 | (HEAP32[592] | 0) != 0) {
         $sp_0_be = $21;
         $tp_0_be = $tp_0101;
        } else {
         label = 10;
        }
        break;
       }
      case 24:
       {
        if ((HEAP32[682] | 0) != 3) {
         HEAP8[$tp_0101] = 32;
         $sp_0_be = $21;
         $tp_0_be = $tp_0101 + 1 | 0;
         break L7;
        }
        $49 = $_pn + 2 | 0;
        $51 = HEAP8[$21] | 0;
        if (($51 | 0) == 3) {
         $sp_1 = $_pn + 3 | 0;
         label = 19;
        } else if (($51 | 0) == 4) {
         if ((HEAP32[89547] | 0) == 0) {
          $sp_0_be = $49;
          $tp_0_be = $tp_0101;
          break L7;
         }
         $sp_2122 = $_pn + 3 | 0;
         label = 23;
        } else if (($51 | 0) == 1) {
         $sp_1 = $49;
         label = 19;
        } else if (($51 | 0) == 2) {
         if ((HEAP32[89547] | 0) == 0) {
          $sp_0_be = $49;
          $tp_0_be = $tp_0101;
          break L7;
         } else {
          $sp_2122 = $49;
          label = 23;
         }
        } else {
         $sp_0_be = $49;
         $tp_0_be = $tp_0101;
         break L7;
        }
        if ((label | 0) == 23) {
         label = 0;
         $sp_0_be = $sp_2122 + 2 | 0;
         $tp_0_be = $tp_0101;
         break L7;
        } else if ((label | 0) == 19) {
         label = 0;
         $sp_0_be = $sp_1 + 2 | 0;
         $tp_0_be = $tp_0101;
         break L7;
        }
        break;
       }
      case 26:
       {
        if ((HEAP32[592] | 0) == 0) {
         HEAP8[$tp_0101] = 32;
         $tp_1 = $tp_0101 + 1 | 0;
        } else {
         $tp_1 = $tp_0101;
        }
        $sp_0_be = (HEAP32[89594] & 8 | 0) == 0 | (HEAP32[89688] | 0) != 0 ? $21 : $_pn + 3 | 0;
        $tp_0_be = $tp_1;
        break;
       }
      case 28:
      case 30:
      case 29:
      case 25:
       {
        if ((HEAP32[592] | 0) == 0) {
         label = 10;
        } else {
         $sp_0_be = $21;
         $tp_0_be = $tp_0101;
        }
        break;
       }
      default:
       {
        HEAP8[$tp_0101] = $20;
        $sp_0_be = $21;
        $tp_0_be = $tp_0101 + 1 | 0;
       }
      }
     } while (0);
     if ((label | 0) == 10) {
      label = 0;
      HEAP8[$tp_0101] = 32;
      $sp_0_be = $21;
      $tp_0_be = $tp_0101 + 1 | 0;
     }
     $46 = HEAP8[$sp_0_be] | 0;
     if ($46 << 24 >> 24 == 0) {
      break;
     } else {
      $tp_0101 = $tp_0_be;
      $_pn = $sp_0_be;
      $20 = $46;
     }
    }
    HEAP8[(HEAP8[$sp_0_be - 1 | 0] | 0) == 10 ? $tp_0_be - 1 | 0 : $tp_0_be] = 0;
   }
  } while (0);
  if ((label | 0) == 6) {
   label = 0;
   HEAP8[$19] = 0;
  }
  $73 = $i_0107 + 1 | 0;
  if (($73 | 0) >= 2) {
   break;
  }
  $i_0107 = $73;
  $7 = HEAP32[$arg_s + ($73 << 2) >> 2] | 0;
 }
 $file_097 = HEAP32[89668] | 0;
 L38 : do {
  if (($file_097 | 0) != 0) {
   $file_098 = $file_097;
   while (1) {
    $magicptr = HEAP32[$file_098 + 8 >> 2] | 0;
    if (!(($magicptr | 0) == (-1 | 0) | ($magicptr | 0) == 0)) {
     break;
    }
    $file_0 = HEAP32[$file_098 + 16 >> 2] | 0;
    if (($file_0 | 0) == 0) {
     break L38;
    } else {
     $file_098 = $file_0;
    }
   }
   HEAP32[$file_098 + 4 >> 2] = HEAP32[23332];
   $84 = HEAP32[23332] | 0;
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 8568, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[91368], HEAP32[tempVarArgs + 8 >> 2] = $84, HEAP32[tempVarArgs + 16 >> 2] = $severity, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
 } while (0);
 $88 = HEAP32[$arg_t >> 2] | 0;
 $90 = HEAP32[$arg_t + 4 >> 2] | 0;
 FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, $format, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $88, HEAP32[tempVarArgs + 8 >> 2] = $arg2, HEAP32[tempVarArgs + 16 >> 2] = $90, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 1) | 0;
 if ((HEAP32[89551] | 0) != 0) {
  _free($88);
  _free($90);
  STACKTOP = sp;
  return;
 }
 $97 = HEAP32[89668] | 0;
 do {
  if (($97 | 0) != 0) {
   if ((HEAP32[$97 + 8 >> 2] | 0) == 0) {
    $file_192 = $97;
   } else {
    L51 : do {
     if ((HEAP32[682] | 0) == 1) {
      FUNCTION_TABLE_iii[HEAP32[686] & 15](8480, 1) | 0;
      $111 = HEAP32[89994] | 0;
      $_0_i = HEAP32[$97 + 52 >> 2] | 0;
      while (1) {
       $112 = $_0_i + 1 | 0;
       $113 = HEAP8[$_0_i] | 0;
       $114 = $113 << 24 >> 24;
       if (($113 << 24 >> 24 | 0) == 31) {
        $_0_i = $112;
        continue;
       } else if (($113 << 24 >> 24 | 0) == 0) {
        break L51;
       }
       $116 = HEAP32[688] | 0;
       do {
        if ((HEAP32[89990] | 0) == ($111 | 0)) {
         $127 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($111 | 0)) {
          $127 = 1;
          break;
         }
         $127 = (HEAP32[89996] | 0) == ($111 | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$116 & 15]($114, $127) | 0;
       $_0_i = $112;
      }
     } else {
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 8408, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$97 + 52 >> 2], tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
     }
    } while (0);
    $135 = HEAP32[$97 + 16 >> 2] | 0;
    if (($135 | 0) == 0) {
     break;
    } else {
     $file_192 = $135;
    }
   }
   do {
    L64 : do {
     if ((HEAP32[$file_192 + 8 >> 2] | 0) == 0) {
      $141 = $file_192 + 48 | 0;
      $142 = HEAP32[$141 >> 2] | 0;
      if (($142 | 0) == 0) {
       break;
      }
      $145 = _look_id($142) | 0;
      if ((HEAP16[$145 + 4 >> 1] | 0) <= -773) {
       break;
      }
      $151 = HEAP32[$file_192 + 16 >> 2] | 0;
      do {
       if (($151 | 0) != 0) {
        $155 = HEAP32[$151 + 48 >> 2] | 0;
        if (($155 | 0) == 0) {
         break;
        }
        if ((_strcmp(HEAP32[$141 >> 2] | 0, $155 | 0) | 0) == 0) {
         break L64;
        }
       }
      } while (0);
      _dump_a_def(15024, $145, 0, 1, HEAP32[89994] | 0);
     } else {
      $164 = $file_192 + 52 | 0;
      $165 = HEAP32[$164 >> 2] | 0;
      if ((HEAP8[$165] | 0) == 0) {
       $169 = $165;
       tempBigInt = 10;
       HEAP8[$169] = tempBigInt;
       tempBigInt = tempBigInt >> 8;
       HEAP8[$169 + 1 | 0] = tempBigInt;
      }
      $173 = HEAP32[690] | 0;
      if ((HEAP32[682] | 0) != 1) {
       $176 = HEAP32[$file_192 + 4 >> 2] | 0;
       if (($176 | 0) == 0) {
        $181 = 8192;
       } else {
        $181 = HEAP32[$file_192 + 44 >> 2] | 0;
       }
       $182 = HEAP32[$164 >> 2] | 0;
       FUNCTION_TABLE_iiii[$173 & 31](1, 8272, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $181, HEAP32[tempVarArgs + 8 >> 2] = $176, HEAP32[tempVarArgs + 16 >> 2] = $182, tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
       break;
      }
      $188 = HEAP32[$file_192 + 4 >> 2] | 0;
      FUNCTION_TABLE_iiii[$173 & 31](1, 8096, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$file_192 + 44 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $188, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      $191 = HEAP32[89994] | 0;
      $_0_i80 = HEAP32[$164 >> 2] | 0;
      while (1) {
       $192 = $_0_i80 + 1 | 0;
       $193 = HEAP8[$_0_i80] | 0;
       $194 = $193 << 24 >> 24;
       if (($193 << 24 >> 24 | 0) == 0) {
        break L64;
       } else if (($193 << 24 >> 24 | 0) == 31) {
        $_0_i80 = $192;
        continue;
       }
       $196 = HEAP32[688] | 0;
       do {
        if ((HEAP32[89990] | 0) == ($191 | 0)) {
         $207 = 0;
        } else {
         if ((HEAP32[89994] | 0) == ($191 | 0)) {
          $207 = 1;
          break;
         }
         $207 = (HEAP32[89996] | 0) == ($191 | 0) ? 2 : -1;
        }
       } while (0);
       FUNCTION_TABLE_iii[$196 & 15]($194, $207) | 0;
       $_0_i80 = $192;
      }
     }
    } while (0);
    $file_192 = HEAP32[$file_192 + 16 >> 2] | 0;
   } while (($file_192 | 0) != 0);
  }
 } while (0);
 $212 = HEAP32[89614] | 0;
 if (($212 | 0) == 0) {
  _free($88);
  _free($90);
  STACKTOP = sp;
  return;
 }
 HEAP32[90002] = $212;
 if ((HEAP32[90036] | 0) < 0) {
  _free($88);
  _free($90);
  STACKTOP = sp;
  return;
 } else {
  $ind_089 = 0;
 }
 do {
  $217 = 360008 + ($ind_089 << 3) | 0;
  $ind_done_0 = 0;
  while (1) {
   if (($ind_done_0 | 0) >= ($ind_089 | 0)) {
    label = 70;
    break;
   }
   if ((_strcmp(HEAP32[$217 >> 2] | 0, HEAP32[360008 + ($ind_done_0 << 3) >> 2] | 0) | 0) == 0) {
    break;
   } else {
    $ind_done_0 = $ind_done_0 + 1 | 0;
   }
  }
  L101 : do {
   if ((label | 0) == 70) {
    label = 0;
    $file_287 = HEAP32[89668] | 0;
    if (($file_287 | 0) != 0) {
     $file_288 = $file_287;
     do {
      do {
       if ((HEAP32[$file_288 + 8 >> 2] | 0) == 0) {
        $233 = HEAP32[$file_288 + 48 >> 2] | 0;
        if (($233 | 0) == 0) {
         break;
        }
        if ((_strcmp(HEAP32[$217 >> 2] | 0, $233 | 0) | 0) == 0) {
         break L101;
        }
       }
      } while (0);
      $file_288 = HEAP32[$file_288 + 16 >> 2] | 0;
     } while (($file_288 | 0) != 0);
    }
    $241 = _look_id(HEAP32[$217 >> 2] | 0) | 0;
    if (($241 | 0) == 0) {
     break;
    }
    if ((HEAP16[$241 + 4 >> 1] | 0) < -772) {
     break;
    }
    _dump_a_def(15024, $241, 0, 1, HEAP32[89994] | 0);
   }
  } while (0);
  $ind_089 = $ind_089 + 1 | 0;
 } while (($ind_089 | 0) <= (HEAP32[90036] | 0));
 _free($88);
 _free($90);
 STACKTOP = sp;
 return;
}
function _stringize($defp, $argp, $out) {
 $defp = $defp | 0;
 $argp = $argp | 0;
 $out = $out | 0;
 var $arg_end_inf = 0, $out_p = 0, $3 = 0, $6 = 0, $num_arg_magic_0_ph = 0, $_0_ph = 0, $7 = 0, $_0 = 0, $8 = 0, $20 = 0, $num_arg_magic_1 = 0, $_1 = 0, $23 = 0, $24 = 0, $27 = 0, $31 = 0, $_sum7099118_in = 0, $_pn = 0, $_pn140 = 0, $nmagic_0_ph_ph114 = 0, $_sum70104_in = 0, $32 = 0, $_pn140_pn = 0, $_sum69102_in = 0, $33 = 0, $_sum69102 = 0, $_sum73103 = 0, $34 = 0, $_sum70104 = 0, $36 = 0, $39 = 0, $58 = 0, $59 = 0, $68 = 0, $71 = 0, $nmagic_0_ph_ph107 = 0, $num_arg_magic_2 = 0, $82 = 0, $84 = 0, $stray_bsl_0 = 0, $85 = 0, $86 = 0, $87 = 0, $95 = 0, $106 = 0, $stray_bsl_1 = 0, $124 = 0, $_in = 0, $126 = 0, $127 = 0, $136 = 0, $137 = 0, $140 = 0, $146 = 0, $154 = 0, $156 = 0, $159 = 0, $167 = 0, $_in119 = 0, $173 = 0, $175 = 0, $187 = 0, $200 = 0, $201 = 0, $not_ = 0, $220 = 0, $225 = 0, $229 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $arg_end_inf = sp | 0;
 $out_p = sp + 32 | 0;
 HEAP32[$out_p >> 2] = $out;
 $3 = (HEAP32[89547] | 0) != 0 ? 5 : 2;
 L1 : do {
  if ((HEAP32[22292] | 0) == 0) {
   $_1 = $argp;
   $num_arg_magic_1 = 0;
  } else {
   $_0_ph = $argp;
   $num_arg_magic_0_ph = 0;
   $6 = $out;
   while (1) {
    $7 = HEAP32[91636] | 0;
    $_0 = $_0_ph;
    while (1) {
     $8 = HEAP8[$_0] | 0;
     if ($8 << 24 >> 24 == 24) {
      if ((HEAP8[$_0 + 1 | 0] | 0) == 3) {
       break;
      }
     }
     if ((HEAP16[$7 + (($8 & 255) << 1) >> 1] & 64) == 0) {
      $_1 = $_0;
      $num_arg_magic_1 = $num_arg_magic_0_ph;
      break L1;
     }
     if ($8 << 24 >> 24 == 24) {
      break;
     } else {
      $_0 = $_0 + 1 | 0;
     }
    }
    HEAP8[$6] = HEAP8[$_0] | 0;
    HEAP8[$6 + 1 | 0] = HEAP8[$_0 + 1 | 0] | 0;
    HEAP8[$6 + 2 | 0] = HEAP8[$_0 + 2 | 0] | 0;
    HEAP8[$6 + 3 | 0] = HEAP8[$_0 + 3 | 0] | 0;
    HEAP8[$6 + 4 | 0] = HEAP8[$_0 + 4 | 0] | 0;
    $20 = $6 + 5 | 0;
    HEAP32[$out_p >> 2] = $20;
    $_0_ph = $_0 + 5 | 0;
    $num_arg_magic_0_ph = $num_arg_magic_0_ph + 1 | 0;
    $6 = $20;
   }
  }
 } while (0);
 $23 = _unget_string($_1, 0) | 0;
 $24 = HEAP32[89668] | 0;
 $27 = _strlen(HEAP32[$24 + 52 >> 2] | 0) | 0;
 do {
  if ((HEAP32[22292] | 0) == 0) {
   $num_arg_magic_2 = $num_arg_magic_1;
  } else {
   L14 : do {
    if ($27 >>> 0 > $3 >>> 0) {
     $31 = $3 - 2 | 0;
     $nmagic_0_ph_ph114 = 0;
     $_pn140 = $27;
     $_pn = $24;
     $_sum7099118_in = $27;
     while (1) {
      $_pn140_pn = $_pn140;
      $32 = $_pn;
      $_sum70104_in = $_sum7099118_in;
      L18 : while (1) {
       $_sum69102_in = $_pn140_pn - $3 | 0;
       $33 = $32 + 52 | 0;
       $_sum69102 = $_sum69102_in - 1 | 0;
       $_sum73103 = $_sum70104_in - 2 | 0;
       $34 = $32 + 52 | 0;
       $_sum70104 = $_sum70104_in - 2 | 0;
       do {
        $36 = HEAP32[$33 >> 2] | 0;
        $39 = (HEAP8[$36 + $_sum69102 | 0] | 0) == 24;
        if ($39) {
         if ((HEAP8[$36 + $_sum69102_in | 0] | 0) == 4) {
          label = 17;
         } else {
          label = 15;
         }
        } else {
         label = 15;
        }
        if ((label | 0) == 15) {
         label = 0;
         if ((HEAP8[$36 + $_sum70104 | 0] | 0) != 31) {
          $nmagic_0_ph_ph107 = $nmagic_0_ph_ph114;
          break L14;
         }
         if ($39) {
          label = 17;
         }
        }
        if ((label | 0) == 17) {
         label = 0;
         if ((HEAP8[$36 + $_sum69102_in | 0] | 0) == 4) {
          break L18;
         }
        }
        $68 = $36 + $_sum73103 | 0;
       } while ((HEAP8[$68] | 0) != 31);
       $71 = $_sum70104_in - 1 | 0;
       HEAP8[$68] = 28;
       HEAP8[(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) + $71 | 0] = 0;
       if ($71 >>> 0 > $3 >>> 0) {
        $_pn140_pn = $71;
        $32 = HEAP32[89668] | 0;
        $_sum70104_in = $71;
       } else {
        $nmagic_0_ph_ph107 = $nmagic_0_ph_ph114;
        break L14;
       }
      }
      if ((HEAP32[89547] | 0) == 0) {
       $58 = $36;
      } else {
       _memcpy($arg_end_inf + ($nmagic_0_ph_ph114 << 2) | 0, $36 + ($_sum69102_in + 1) | 0, $31) | 0;
       HEAP8[$arg_end_inf + ($nmagic_0_ph_ph114 << 2) + $31 | 0] = 0;
       $58 = HEAP32[$34 >> 2] | 0;
      }
      $59 = $nmagic_0_ph_ph114 + 1 | 0;
      HEAP8[$58 + $_sum69102 | 0] = 28;
      HEAP8[(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) + $_sum69102_in | 0] = 0;
      if ($_sum69102_in >>> 0 > $3 >>> 0) {
       $nmagic_0_ph_ph114 = $59;
       $_pn140 = $_sum69102_in;
       $_pn = HEAP32[89668] | 0;
       $_sum7099118_in = $_sum69102_in;
      } else {
       $nmagic_0_ph_ph107 = $59;
       break;
      }
     }
    } else {
     $nmagic_0_ph_ph107 = 0;
    }
   } while (0);
   if (($num_arg_magic_1 | 0) <= ($nmagic_0_ph_ph107 | 0)) {
    $num_arg_magic_2 = $num_arg_magic_1;
    break;
   }
   HEAP32[$out_p >> 2] = $out + ($nmagic_0_ph_ph107 * 5 | 0);
   $num_arg_magic_2 = $nmagic_0_ph_ph107;
  }
 } while (0);
 $82 = HEAP32[$out_p >> 2] | 0;
 HEAP32[$out_p >> 2] = $82 + 1;
 HEAP8[$82] = 34;
 $84 = HEAP32[2] | 0;
 $stray_bsl_0 = 0;
 L38 : while (1) {
  $85 = _get_ch() | 0;
  $86 = HEAP32[682] | 0;
  $87 = ($86 | 0) == 9;
  if (!($87 & ($23 | 0) == (HEAP32[89668] | 0))) {
   if (($86 | 0) != 3 | ($85 | 0) == 28) {
    break;
   }
  }
  L43 : do {
   switch ($85 | 0) {
   case 92:
    {
     $stray_bsl_1 = 1;
     break;
    }
   case 31:
    {
     $stray_bsl_0 = $stray_bsl_0;
     continue L38;
     break;
    }
   case 32:
   case 9:
    {
     $95 = HEAP32[$out_p >> 2] | 0;
     HEAP32[$out_p >> 2] = $95 + 1;
     HEAP8[$95] = $85;
     $stray_bsl_0 = $stray_bsl_0;
     continue L38;
     break;
    }
   case 26:
    {
     if ((HEAP32[22292] | 0) == 0) {
      $stray_bsl_0 = $stray_bsl_0;
      continue L38;
     }
     _get_ch() | 0;
     _get_ch() | 0;
     $stray_bsl_0 = $stray_bsl_0;
     continue L38;
     break;
    }
   default:
    {
     if (($85 | 0) != 24) {
      $stray_bsl_1 = $stray_bsl_0;
      break L43;
     }
     $106 = _get_ch() | 0;
     if (($106 | 0) == 3) {
      _get_ch() | 0;
      label = 35;
     } else if (($106 | 0) == 1) {
      label = 35;
     }
     if ((label | 0) == 35) {
      label = 0;
      _get_ch() | 0;
      _get_ch() | 0;
     }
     if ((HEAP32[89547] | 0) == 0) {
      $stray_bsl_0 = $stray_bsl_0;
      continue L38;
     }
     if (($106 | 0) == 4) {
      _get_ch() | 0;
     } else if (($106 | 0) != 2) {
      $stray_bsl_0 = $stray_bsl_0;
      continue L38;
     }
     _get_ch() | 0;
     _get_ch() | 0;
     $stray_bsl_0 = $stray_bsl_0;
     continue L38;
    }
   }
  } while (0);
  HEAP32[5584] = 22344;
  if (((_scan_token($85, 22336, $84) | 0) - 67 | 0) >>> 0 >= 4 >>> 0) {
   HEAP32[$out_p >> 2] = _stpcpy(HEAP32[$out_p >> 2] | 0, 22344) | 0;
   $stray_bsl_0 = $stray_bsl_1;
   continue;
  }
  HEAP32[5584] = 22345;
  $124 = HEAP8[22344] | 0;
  if ($124 << 24 >> 24 != 0) {
   $126 = 22345;
   $_in = $124;
   do {
    $127 = $_in & 255;
    if ((HEAP16[(HEAP32[91636] | 0) + ($127 << 1) >> 1] & HEAP32[89598] | 0) == 0) {
     do {
      if (($_in << 24 >> 24 | 0) == 92) {
       if ((HEAP32[682] | 0) != 9 & (HEAP32[23328] | 0) != 0) {
        $154 = HEAP8[$126] | 0;
        if (($154 << 24 >> 24 | 0) == 117 | ($154 << 24 >> 24 | 0) == 85) {
         break;
        }
       }
       $156 = HEAP32[$out_p >> 2] | 0;
       HEAP32[$out_p >> 2] = $156 + 1;
       HEAP8[$156] = 92;
      } else if (($_in << 24 >> 24 | 0) == 34) {
       $146 = HEAP32[$out_p >> 2] | 0;
       HEAP32[$out_p >> 2] = $146 + 1;
       HEAP8[$146] = 92;
      }
     } while (0);
     $159 = HEAP32[$out_p >> 2] | 0;
     HEAP32[$out_p >> 2] = $159 + 1;
     HEAP8[$159] = $_in;
    } else {
     $136 = HEAP32[89600] | 0;
     $137 = HEAP32[$out_p >> 2] | 0;
     HEAP32[$out_p >> 2] = $137 + 1;
     HEAP8[$137] = $_in;
     FUNCTION_TABLE_iiii[$136 & 31]($127, 22336, $out_p) | 0;
    }
    $140 = HEAP32[5584] | 0;
    $126 = $140 + 1 | 0;
    HEAP32[5584] = $126;
    $_in = HEAP8[$140] | 0;
   } while ($_in << 24 >> 24 != 0);
  }
  HEAP8[HEAP32[$out_p >> 2] | 0] = 0;
  $stray_bsl_0 = $stray_bsl_1;
 }
 if ($87) {
  _unget_ch();
 }
 $167 = HEAP32[$out_p >> 2] | 0;
 HEAP32[$out_p >> 2] = $167 + 1;
 HEAP8[$167] = 34;
 if (!((HEAP32[22292] | 0) == 0 | ($num_arg_magic_2 | 0) == 0)) {
  $_in119 = $num_arg_magic_2;
  do {
   $_in119 = $_in119 - 1 | 0;
   $173 = HEAP32[$out_p >> 2] | 0;
   HEAP32[$out_p >> 2] = $173 + 1;
   HEAP8[$173] = 24;
   $175 = HEAP32[$out_p >> 2] | 0;
   HEAP32[$out_p >> 2] = $175 + 1;
   HEAP8[$175] = 4;
   if ((HEAP32[89547] | 0) != 0) {
    HEAP32[$out_p >> 2] = _stpcpy(HEAP32[$out_p >> 2] | 0, $arg_end_inf + ($_in119 << 2) | 0) | 0;
   }
  } while (($_in119 | 0) != 0);
 }
 HEAP8[HEAP32[$out_p >> 2] | 0] = 0;
 if (($stray_bsl_0 | 0) != 0) {
  $187 = $defp + 25 | 0;
  _unget_string($out, $187) | 0;
  if ((HEAP32[89594] & 4 | 0) != 0) {
   _dump_string(10888, HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0);
  }
  _scan_quote(_get_ch() | 0, 22344, $84, 1) | 0;
  $200 = HEAP32[89668] | 0;
  $201 = HEAP32[$200 >> 2] | 0;
  $not_ = (HEAP8[$201] | 0) == 0;
  HEAP32[$200 >> 2] = $201 + (_strlen($201 | 0) | 0);
  _get_ch() | 0;
  _unget_ch();
  if ($not_) {
   $229 = HEAP32[$out_p >> 2] | 0;
   STACKTOP = sp;
   return $229 | 0;
  }
  if (!(($defp | 0) == 0 | ($187 | 0) == (HEAP32[89614] | 0))) {
   _expanding($187, 0);
  }
  _cerror(10672, $out, 0, 0);
  $229 = HEAP32[$out_p >> 2] | 0;
  STACKTOP = sp;
  return $229 | 0;
 }
 if ((HEAP32[4] & 4 | 0) == 0) {
  $229 = HEAP32[$out_p >> 2] | 0;
  STACKTOP = sp;
  return $229 | 0;
 }
 $220 = HEAP32[584] | 0;
 if (((HEAP32[$out_p >> 2] | 0) - $out | 0) <= ($220 | 0)) {
  $229 = HEAP32[$out_p >> 2] | 0;
  STACKTOP = sp;
  return $229 | 0;
 }
 do {
  if (($defp | 0) != 0) {
   $225 = $defp + 25 | 0;
   if (($225 | 0) == (HEAP32[89614] | 0)) {
    break;
   }
   _expanding($225, 0);
  }
 } while (0);
 _cwarn(10472, 0, $220, $out);
 $229 = HEAP32[$out_p >> 2] | 0;
 STACKTOP = sp;
 return $229 | 0;
}
function _get_line($in_comment) {
 $in_comment = $in_comment | 0;
 var $1 = 0, $5 = 0, $13 = 0, $18 = 0, $24 = 0, $cat_line_0_ph79 = 0, $ptr_0_ph78 = 0, $converted_0_ph77 = 0, $25 = 0, $26 = 0, $28 = 0, $ptr_069 = 0, $converted_068 = 0, $30 = 0, $49 = 0, $52 = 0, $_sum49 = 0, $60 = 0, $73 = 0, $len_0 = 0, $converted_1 = 0, $converted_2 = 0, $len_1 = 0, $102 = 0, $113 = 0, $115 = 0, $124 = 0, $129 = 0, $135 = 0, $136 = 0, $140 = 0, $145 = 0, $157 = 0, $181 = 0, $183 = 0, $185 = 0, $195 = 0, $197 = 0, $198 = 0, $216 = 0, $218 = 0, $221 = 0, $224 = 0, $233 = 0, $235 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $256 = 0, $267 = 0, $281 = 0, $286 = 0, $296 = 0, $_0_i = 0, $310 = 0, $318 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[89668] | 0;
 if (($1 | 0) == 0) {
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $5 = HEAP32[$1 + 52 >> 2] | 0;
 HEAP32[$1 >> 2] = $5;
 if ((HEAP32[89594] & 8 | 0) != 0 & (HEAP32[23332] | 0) == 0) {
  HEAP32[91643] = 0;
  HEAP32[91377] = 0;
 }
 $13 = HEAP32[89668] | 0;
 $18 = $5;
 L7 : do {
  if ((_fgets($5 | 0, (HEAP32[$13 + 52 >> 2] | 0) + 65536 - $18 | 0, HEAP32[$13 + 8 >> 2] | 0) | 0) != 0) {
   $converted_0_ph77 = 0;
   $ptr_0_ph78 = $5;
   $cat_line_0_ph79 = 0;
   $24 = $18;
   L8 : while (1) {
    $25 = ($cat_line_0_ph79 | 0) == 0;
    $26 = ($cat_line_0_ph79 | 0) < 256;
    $converted_068 = $converted_0_ph77;
    $ptr_069 = $ptr_0_ph78;
    $28 = $24;
    while (1) {
     $30 = (HEAP32[23332] | 0) + 1 | 0;
     HEAP32[23332] = $30;
     do {
      if ((HEAP32[592] | 0) != 0) {
       if (($30 | 0) != ((HEAP32[591] | 0) + 1 | 0)) {
        break;
       }
       if ((HEAP32[4] & 1 | 0) == 0) {
        break;
       }
       _do_msg(12448, 7192, 0, $30, 0);
      }
     } while (0);
     if ((HEAP32[89594] & 66 | 0) != 0) {
      $49 = HEAP32[91368] | 0;
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 7160, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23332], HEAP32[tempVarArgs + 8 >> 2] = $49, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      _dump_string(0, $ptr_069);
     }
     $52 = _strlen($ptr_069 | 0) | 0;
     $_sum49 = $52 - 1 | 0;
     $60 = $ptr_069 + $_sum49 | 0;
     if (($52 + $28 - (HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) | 0) > 65534) {
      if ((HEAP8[$60] | 0) != 10) {
       label = 14;
       break L8;
      }
     }
     if ((HEAP8[$60] | 0) != 10) {
      break L7;
     }
     do {
      if (($52 | 0) > 1) {
       $73 = $ptr_069 + ($52 - 2) | 0;
       if ((HEAP8[$73] | 0) != 13) {
        $len_0 = $52;
        break;
       }
       HEAP8[$73] = 10;
       HEAP8[$60] = 0;
       if (HEAP8[6120] | 0) {
        $len_0 = $_sum49;
        break;
       }
       if ((HEAP32[4] & 1 | 0) == 0) {
        $len_0 = $_sum49;
        break;
       }
       _do_msg(12448, 6976, 0, 0, 0);
       HEAP8[6120] = 1;
       $len_0 = $_sum49;
      } else {
       $len_0 = $52;
      }
     } while (0);
     if ((HEAP32[592] | 0) == 0) {
      break L8;
     }
     if ((HEAP32[89548] | 0) == 0) {
      $converted_1 = $converted_068;
     } else {
      $converted_1 = _cnv_trigraph($ptr_069) | 0;
     }
     if ((HEAP32[682] | 0) == 9 & (HEAP32[89549] | 0) != 0) {
      $converted_2 = (_cnv_digraph($ptr_069) | 0) + $converted_1 | 0;
     } else {
      $converted_2 = $converted_1;
     }
     if (($converted_2 | 0) == 0) {
      $len_1 = $len_0;
     } else {
      $len_1 = _strlen($ptr_069 | 0) | 0;
     }
     $102 = $len_1 - 2 | 0;
     if (($102 | 0) <= -1) {
      label = 39;
      break L8;
     }
     if ((HEAP8[$ptr_069 + $102 | 0] | 0) != 92) {
      label = 39;
      break L8;
     }
     if ((_last_is_mbchar($ptr_069, $102) | 0) != 0) {
      label = 39;
      break L8;
     }
     $113 = HEAP32[89668] | 0;
     $115 = (HEAP32[$113 >> 2] | 0) + $102 | 0;
     HEAP32[$113 >> 2] = $115;
     HEAP32[5582] = 1;
     if ((HEAP32[89594] & 8 | 0) != 0 & (HEAP32[730] | 0) != 0) {
      if ($25) {
       label = 35;
       break;
      }
      if ($26) {
       break;
      }
     }
     $124 = HEAP32[89668] | 0;
     $129 = $115;
     if ((_fgets($115 | 0, (HEAP32[$124 + 52 >> 2] | 0) + 65536 - $129 | 0, HEAP32[$124 + 8 >> 2] | 0) | 0) == 0) {
      break L7;
     } else {
      $converted_068 = $converted_2;
      $ptr_069 = $115;
      $28 = $129;
     }
    }
    if ((label | 0) == 35) {
     label = 0;
     HEAP32[91642] = HEAP32[23332];
    }
    $135 = HEAP32[89668] | 0;
    $136 = $135 + 52 | 0;
    $140 = $cat_line_0_ph79 + 1 | 0;
    HEAP32[366576 + ($140 << 2) >> 2] = (_strlen(HEAP32[$136 >> 2] | 0) | 0) - 2;
    $145 = $115;
    if ((_fgets($115 | 0, (HEAP32[$136 >> 2] | 0) + 65536 - $145 | 0, HEAP32[$135 + 8 >> 2] | 0) | 0) == 0) {
     break L7;
    } else {
     $converted_0_ph77 = $converted_2;
     $ptr_0_ph78 = $115;
     $cat_line_0_ph79 = $140;
     $24 = $145;
    }
   }
   do {
    if ((label | 0) == 39) {
     $157 = HEAP32[584] | 0;
     if (($len_1 + $28 - (HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) | 0) <= ($157 + 1 | 0)) {
      break;
     }
     if ((HEAP32[4] & 4 | 0) == 0) {
      break;
     }
     _do_msg(12448, 6904, 0, $157, 0);
    } else if ((label | 0) == 14) {
     if (($52 | 0) > 65534) {
      _cfatal(7112, 0, 0, 0);
      return 0;
     } else {
      _cfatal(7024, 0, 0, 0);
      return 0;
     }
    }
   } while (0);
   do {
    if ((HEAP32[89594] & 8 | 0) != 0 & (HEAP32[730] | 0) != 0) {
     if (!(($cat_line_0_ph79 | 0) != 0 & $26)) {
      break;
     }
     HEAP32[366576 + ($cat_line_0_ph79 + 1 << 2) >> 2] = (_strlen(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) | 0) - 1;
     HEAP32[91643] = HEAP32[23332];
    }
   } while (0);
   $181 = HEAP32[89668] | 0;
   $183 = HEAP32[$181 + 52 >> 2] | 0;
   HEAP32[$181 >> 2] = $183;
   $_0 = $183;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 $185 = HEAP32[89668] | 0;
 if ((_ferror(HEAP32[$185 + 8 >> 2] | 0) | 0) != 0) {
  _cfatal(6848, 0, 0, 0);
  return 0;
 }
 $195 = (HEAP32[$185 + 16 >> 2] | 0) != 0 ? 22280 : 22248;
 $197 = HEAP32[$185 + 52 >> 2] | 0;
 $198 = _strlen($197 | 0) | 0;
 do {
  if (($198 | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP8[$197 + ($198 - 1) | 0] | 0) == 10) {
    label = 54;
    break;
   }
   HEAP8[$197 + $198 | 0] = 10;
   HEAP8[$197 + ($198 + 1) | 0] = 0;
   do {
    if ((HEAP32[682] | 0) != 1) {
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     _do_msg(12448, 6800, $195, 0, 22152);
    }
   } while (0);
   $216 = HEAP32[89668] | 0;
   $218 = HEAP32[$216 + 52 >> 2] | 0;
   HEAP32[$216 >> 2] = $218;
   $_0_i = $218;
   label = 79;
  }
 } while (0);
 L75 : do {
  if ((label | 0) == 54) {
   $221 = (HEAP32[592] | 0) == 0;
   do {
    if (!$221) {
     $224 = HEAP32[$185 >> 2] | 0;
     if ($197 >>> 0 >= $224 >>> 0) {
      break;
     }
     HEAP8[$224] = 10;
     HEAP8[$224 + 1 | 0] = 0;
     if ((HEAP32[4] & 1 | 0) != 0) {
      _do_msg(12448, 6800, $195, 0, 21936);
     }
     $233 = HEAP32[89668] | 0;
     $235 = HEAP32[$233 + 52 >> 2] | 0;
     HEAP32[$233 >> 2] = $235;
     $_0_i = $235;
     label = 79;
     break L75;
    }
   } while (0);
   if (($in_comment | 0) != 0) {
    do {
     if ((HEAP32[682] | 0) == 1) {
      $248 = $197;
     } else {
      if ((HEAP32[4] & 1 | 0) == 0) {
       $248 = $197;
       break;
      }
      _do_msg(12448, 6800, $195, 0, 22e3);
      $248 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
     }
    } while (0);
    $249 = $248;
    tempBigInt = 667434;
    HEAP8[$249] = tempBigInt;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$249 + 1 | 0] = tempBigInt;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$249 + 2 | 0] = tempBigInt;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$249 + 3 | 0] = tempBigInt;
    $250 = HEAP32[89668] | 0;
    $252 = HEAP32[$250 + 52 >> 2] | 0;
    HEAP32[$250 >> 2] = $252;
    $_0_i = $252;
    label = 79;
    break;
   }
   $256 = HEAP32[$185 + 20 >> 2] | 0;
   do {
    if ($256 >>> 0 < (HEAP32[1502] | 0) >>> 0) {
     if (!$221) {
      _do_msg(12624, 6720, $195, HEAP32[$256 + 16 >> 2] | 0, 0);
      HEAP32[90042] = (HEAP32[90042] | 0) + 1;
      $267 = HEAP32[(HEAP32[89668] | 0) + 20 >> 2] | 0;
      HEAP32[1502] = $267;
      HEAP32[730] = HEAP32[$267 >> 2];
      break;
     }
     if ((HEAP32[682] | 0) != 2) {
      break;
     }
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     _do_msg(12448, 6720, $195, HEAP32[$256 + 16 >> 2] | 0, 0);
    }
   } while (0);
   $281 = HEAP32[89616] | 0;
   do {
    if (!(($281 | 0) == (-1 | 0) | ($281 | 0) == 0)) {
     $286 = (HEAP32[592] | 0) != 0;
     if (((HEAP32[89686] | 0) == 0 | (HEAP32[682] | 0) != 3) & $286) {
      break;
     }
     if ($286) {
      _do_msg(12624, 6616, $195, $281, 0);
      HEAP32[90042] = (HEAP32[90042] | 0) + 1;
      HEAP32[89616] = -1;
      break;
     }
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     _do_msg(12448, 6616, $195, $281, 0);
    }
   } while (0);
   $296 = HEAP32[89692] | 0;
   if (!(($296 | 0) != 0 & (HEAP32[682] | 0) == 2)) {
    break;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    break;
   }
   _do_msg(12448, 21816, $195, $296, 0);
  }
 } while (0);
 do {
  if ((label | 0) == 79) {
   if (($_0_i | 0) == 0) {
    break;
   } else {
    $_0 = $_0_i;
   }
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 if ((HEAP32[89544] | 0) == 0) {
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $310 = (HEAP32[89566] | 0) - 1 | 0;
 HEAP32[89566] = $310;
 if ((HEAP32[89542] | 0) != 0 & (HEAP32[730] | 0) != 0) {
  $318 = ($310 | 0) == 0 | 0;
 } else {
  $318 = 0;
 }
 HEAP32[89624] = $318;
 $_0 = 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _collect_args($defp, $arglist, $m_num) {
 $defp = $defp | 0;
 $arglist = $arglist | 0;
 $m_num = $m_num | 0;
 var $argp = 0, $seq = 0, $loc = 0, $mgc_prefix = 0, $1 = 0, $3 = 0, $4 = 0, $10 = 0, $15 = 0, $17 = 0, $_ = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $31 = 0, $32 = 0, $locs_0_ph = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $nargs_0 = 0, $valid_argp_1 = 0, $more_to_come_0 = 0, $44 = 0, $84 = 0, $87 = 0, $c_0 = 0, $90 = 0, $_valid_argp_1 = 0, $nargs_1 = 0, $valid_argp_3 = 0, $c_1 = 0, $103 = 0, $107 = 0, $108 = 0, $_valid_argp_3 = 0, $nargs_2 = 0, $valid_argp_5 = 0, $132 = 0, $159 = 0, $c_2134 = 0, $165 = 0, $167 = 0, $169 = 0, $c_2_lcssa = 0, $172 = 0, $174 = 0, $175 = 0, $176 = 0, $180 = 0, $182 = 0, $c_3133 = 0, $198 = 0, $_nargs_2 = 0, $i_01_i = 0, $212 = 0, $nargs_4 = 0, $nargs_5 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $argp = sp | 0;
 $seq = sp + 8 | 0;
 $loc = sp + 16 | 0;
 $mgc_prefix = sp + 24 | 0;
 $1 = $defp + 25 | 0;
 HEAP32[$argp >> 2] = HEAP32[$arglist >> 2];
 $3 = $defp + 4 | 0;
 $4 = HEAP16[$3 >> 1] | 0;
 if ((HEAP32[89594] & 4 | 0) == 0) {
  $10 = $4;
 } else {
  _dump_unget(8864);
  $10 = HEAP16[$3 >> 1] | 0;
 }
 if ($10 << 16 >> 16 == -769) {
  $15 = 1;
 } else {
  $15 = $10 << 16 >> 16 & -769;
 }
 $17 = HEAP32[$argp >> 2] | 0;
 $_ = ($15 | 0) == 0 ? $17 : 0;
 HEAP8[$17] = 0;
 $18 = HEAP32[$argp >> 2] | 0;
 $19 = $18 + 131072 | 0;
 $20 = $18 + 132096 | 0;
 $21 = $18 + 263168 | 0;
 $22 = _stpcpy($20 | 0, $1 | 0) | 0;
 HEAP32[$seq >> 2] = $22 + 1;
 HEAP8[$22] = 40;
 do {
  if ((HEAP32[682] | 0) == 3) {
   HEAP32[89686] = 1;
   if ((HEAP32[22292] | 0) == 0 | ($m_num | 0) == 0) {
    $locs_0_ph = 0;
    break;
   }
   $31 = _xmalloc(4080) | 0;
   $32 = $31;
   HEAP32[$loc >> 2] = $32;
   HEAP32[(HEAP32[89620] | 0) + ($m_num * 36 | 0) + 32 >> 2] = $32;
   _memset($31 | 0, 0, 4080) | 0;
   $locs_0_ph = $32;
  } else {
   $locs_0_ph = 0;
  }
 } while (0);
 $35 = $mgc_prefix;
 $36 = ($m_num | 0) == 0;
 $38 = ($4 & 256) == 0;
 $39 = $15 - 1 | 0;
 $40 = ($defp | 0) == 0;
 $more_to_come_0 = 0;
 $valid_argp_1 = $_;
 $nargs_0 = 0;
 L11 : while (1) {
  _memset($35 | 0, 0, 12) | 0;
  $44 = _squeeze_ws($seq, 0, (HEAP32[22292] | 0) == 0 | $36 ? 0 : $mgc_prefix) | 0;
  if (($44 | 0) == 44 | ($44 | 0) == 41) {
   _scan_token($44, $seq, $21) | 0;
  } else {
   HEAP8[HEAP32[$seq >> 2] | 0] = 0;
  }
  switch ($44 | 0) {
  case 10:
   {
    label = 28;
    break L11;
    break;
   }
  case 28:
   {
    label = 29;
    break L11;
    break;
   }
  case 41:
   {
    if (($more_to_come_0 | 0) == 0) {
     label = 14;
     break L11;
    } else {
     label = 16;
    }
    break;
   }
  case 44:
   {
    label = 16;
    break;
   }
  case 0:
   {
    $nargs_5 = -255;
    break L11;
    break;
   }
  default:
   {
    $c_1 = $44;
    $valid_argp_3 = $valid_argp_1;
    $nargs_1 = $nargs_0;
   }
  }
  if ((label | 0) == 16) {
   label = 0;
   if (!((HEAP32[22292] | 0) == 0 | $36)) {
    HEAP32[$loc >> 2] = (HEAP32[$loc >> 2] | 0) + 16;
   }
   if ((HEAP32[4] & 2 | 0) != 0) {
    if (!($40 | ($1 | 0) == (HEAP32[89614] | 0))) {
     _expanding($1, 0);
    }
    _cwarn(14688, $20, 0, 0);
   }
   if (($nargs_0 | 0) == ($39 | 0) & (((HEAP32[592] | 0) == 0 | $38) ^ 1)) {
    $c_0 = _get_an_arg($44, $argp, $19, $seq, 1, $39, $loc, $m_num, (HEAP32[22292] | 0) == 0 | $36 ? 0 : $mgc_prefix) | 0;
   } else {
    if ((HEAP32[682] | 0) == 3) {
     $84 = HEAP32[$argp >> 2] | 0;
     HEAP32[$argp >> 2] = $84 + 1;
     HEAP8[$84] = 28;
    }
    $87 = HEAP32[$argp >> 2] | 0;
    HEAP32[$argp >> 2] = $87 + 1;
    HEAP8[$87] = 0;
    $c_0 = $44;
   }
   $90 = $nargs_0 + 1 | 0;
   $_valid_argp_1 = ($90 | 0) == ($15 | 0) ? HEAP32[$argp >> 2] | 0 : $valid_argp_1;
   if (($c_0 | 0) == 44) {
    $more_to_come_0 = 1;
    $valid_argp_1 = $_valid_argp_1;
    $nargs_0 = $90;
    continue;
   } else {
    $c_1 = $c_0;
    $valid_argp_3 = $_valid_argp_1;
    $nargs_1 = $90;
   }
  }
  if (($c_1 | 0) == 41) {
   $valid_argp_5 = $valid_argp_3;
   $nargs_2 = $nargs_1;
   label = 40;
   break;
  }
  if ($38) {
   $103 = 0;
  } else {
   $103 = ($nargs_1 | 0) == ($39 | 0) | 0;
  }
  $107 = _get_an_arg($c_1, $argp, $19, $seq, $103, $nargs_1, $loc, $m_num, (HEAP32[22292] | 0) == 0 | $36 ? 0 : $mgc_prefix) | 0;
  $108 = $nargs_1 + 1 | 0;
  $_valid_argp_3 = ($108 | 0) == ($15 | 0) ? HEAP32[$argp >> 2] | 0 : $valid_argp_3;
  if (($107 | 0) == 41) {
   $valid_argp_5 = $_valid_argp_3;
   $nargs_2 = $108;
   label = 40;
   break;
  } else if (($107 | 0) == 0) {
   $nargs_5 = -255;
   break;
  } else if (($107 | 0) == (-1 | 0)) {
   label = 36;
   break;
  }
  $more_to_come_0 = ($107 | 0) == 44 | 0;
  $valid_argp_1 = $_valid_argp_3;
  $nargs_0 = $108;
 }
 do {
  if ((label | 0) == 28) {
   _unget_ch();
   label = 29;
  } else if ((label | 0) == 14) {
   if ((HEAP32[22292] | 0) == 0 | $36) {
    $valid_argp_5 = $valid_argp_1;
    $nargs_2 = $nargs_0;
    label = 40;
    break;
   }
   HEAP32[$loc >> 2] = (HEAP32[$loc >> 2] | 0) + 16;
   $valid_argp_5 = $valid_argp_1;
   $nargs_2 = $nargs_0;
   label = 40;
  } else if ((label | 0) == 36) {
   if (!($40 | ($1 | 0) == (HEAP32[89614] | 0))) {
    _expanding($1, 0);
   }
   _cerror(19800, $20, 0, 0);
   $nargs_5 = -255;
  }
 } while (0);
 do {
  if ((label | 0) == 40) {
   do {
    if (($nargs_2 | 0) == 0 & ($15 | 0) == 1) {
     if ((HEAP32[4] & 2 | 0) == 0) {
      break;
     }
     if (!($40 | ($1 | 0) == (HEAP32[89614] | 0))) {
      _expanding($1, 0);
     }
     _cwarn(14688, $20, 0, 0);
    } else {
     if (($nargs_2 | 0) == ($15 | 0)) {
      break;
     }
     $132 = (HEAP32[682] | 0) == 1;
     if ($132) {
      if ((HEAP32[4] & 1 | 0) == 0) {
       break;
      }
     }
     if ((HEAP32[592] | 0) == 0 | $38) {
      if (!$132) {
       label = 55;
      }
     } else {
      if (!(($nargs_2 | 0) == ($39 | 0) | $132)) {
       label = 55;
      }
     }
     if ((label | 0) == 55) {
      if (!($40 | ($1 | 0) == (HEAP32[89614] | 0))) {
       _expanding($1, 0);
      }
      _cerror(20176, ($nargs_2 | 0) < ($15 | 0) ? 7944 : 7144, $15, $20);
      break;
     }
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     if (!($40 | ($1 | 0) == (HEAP32[89614] | 0))) {
      _expanding($1, 0);
     }
     _cwarn(20176, ($nargs_2 | 0) < ($15 | 0) ? 7944 : 7144, $15, $20);
    }
   } while (0);
   $159 = ($15 | 0) < ($nargs_2 | 0);
   do {
    if ($159) {
     HEAP32[$argp >> 2] = $valid_argp_5;
     $175 = $valid_argp_5;
    } else {
     if (($nargs_2 | 0) < ($15 | 0)) {
      $c_2134 = $nargs_2;
      while (1) {
       if ((HEAP32[682] | 0) == 3) {
        $165 = HEAP32[$argp >> 2] | 0;
        HEAP32[$argp >> 2] = $165 + 1;
        HEAP8[$165] = 28;
       }
       $167 = HEAP32[$argp >> 2] | 0;
       HEAP32[$argp >> 2] = $167 + 1;
       HEAP8[$167] = 0;
       $169 = $c_2134 + 1 | 0;
       if (($169 | 0) < ($15 | 0)) {
        $c_2134 = $169;
       } else {
        $c_2_lcssa = $15;
        break;
       }
      }
     } else {
      $c_2_lcssa = $nargs_2;
     }
     $172 = HEAP32[$argp >> 2] | 0;
     if (($c_2_lcssa | 0) != 0) {
      $175 = $172;
      break;
     }
     $174 = $172 + 1 | 0;
     HEAP32[$argp >> 2] = $174;
     $175 = $174;
    }
   } while (0);
   $176 = HEAP32[$arglist >> 2] | 0;
   $180 = _xrealloc($176, $175 - $176 | 0) | 0;
   HEAP32[$argp >> 2] = $180;
   HEAP32[$arglist >> 2] = $180;
   if (($15 | 0) > 1) {
    $c_3133 = 1;
    $182 = $180;
    do {
     $182 = $182 + ((_strlen($182 | 0) | 0) + 1) | 0;
     HEAP32[$argp >> 2] = $182;
     HEAP32[$arglist + ($c_3133 << 2) >> 2] = $182;
     $c_3133 = $c_3133 + 1 | 0;
    } while (($c_3133 | 0) < ($15 | 0));
   }
   if (!((HEAP32[22292] | 0) == 0 | $36)) {
    $198 = _xrealloc($locs_0_ph, (HEAP32[$loc >> 2] | 0) - $locs_0_ph | 0) | 0;
    HEAP32[(HEAP32[89620] | 0) + ($m_num * 36 | 0) + 32 >> 2] = $198;
   }
   if ((HEAP32[89594] & 4 | 0) == 0) {
    $nargs_5 = $nargs_2;
    break;
   }
   do {
    if (($nargs_2 | 0) > 0) {
     $_nargs_2 = $159 ? $15 : $nargs_2;
     FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 21192, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $_nargs_2, HEAP32[tempVarArgs + 8 >> 2] = 22200, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     if (($_nargs_2 | 0) > 0) {
      $i_01_i = 0;
     } else {
      $nargs_4 = $_nargs_2;
      break;
     }
     while (1) {
      $212 = $i_01_i + 1 | 0;
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 20680, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $212, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      _dump_string(0, HEAP32[$arglist + ($i_01_i << 2) >> 2] | 0);
      if (($212 | 0) < ($_nargs_2 | 0)) {
       $i_01_i = $212;
      } else {
       $nargs_4 = $_nargs_2;
       break;
      }
     }
    } else {
     $nargs_4 = $nargs_2;
    }
   } while (0);
   _dump_unget(22200);
   $nargs_5 = $nargs_4;
  } else if ((label | 0) == 29) {
   if (!($40 | ($1 | 0) == (HEAP32[89614] | 0))) {
    _expanding($1, 0);
   }
   _cerror(19800, $20, 0, 0);
   $nargs_5 = -255;
  }
 } while (0);
 if ((HEAP32[682] | 0) != 3) {
  $221 = HEAP16[$3 >> 1] | 0;
  $222 = $221 << 16 >> 16 < -769;
  $223 = $221 << 16 >> 16;
  $224 = $222 ? $223 : $nargs_5;
  STACKTOP = sp;
  return $224 | 0;
 }
 HEAP32[89686] = 0;
 $221 = HEAP16[$3 >> 1] | 0;
 $222 = $221 << 16 >> 16 < -769;
 $223 = $221 << 16 >> 16;
 $224 = $222 ? $223 : $nargs_5;
 STACKTOP = sp;
 return $224 | 0;
}
function _put_depend($filename) {
 $filename = $filename | 0;
 var $prefix_i = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $14 = 0, $filename__i = 0, $17 = 0, $len_0_i = 0, $cp_0_i = 0, $41 = 0, $48 = 0, $50 = 0, $p_015_i_i = 0, $_014_i_i = 0, $51 = 0, $_1_i_i = 0, $p_0_pn_i_i = 0, $q_0_i_i = 0, $56 = 0, $57 = 0, $_2_i_i = 0, $62 = 0, $63 = 0, $64 = 0, $_0_lcssa_i_i = 0, $out_p_0_i = 0, $70 = 0, $72 = 0, $77 = 0, $78 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $91 = 0, $102 = 0, $108 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $pos_p_030 = 0, $cp_0 = 0, $130 = 0, $cp_1 = 0, $134 = 0, $135 = 0, $_pre_phi = 0, $c_0_off0 = 0, $cp_2 = 0, $143 = 0, $145 = 0, $148 = 0, $150 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $pos_p_1 = 0, $178 = 0, $182 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $201 = 0, $206 = 0, $207 = 0, $209 = 0, $216 = 0, $217 = 0, $218 = 0, $220 = 0, $226 = 0, $227 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 $prefix_i = sp | 0;
 do {
  if ((HEAP32[23492] | 0) == 0) {
   HEAP32[23488] = 65536;
   HEAP32[23484] = _xmalloc(65536) | 0;
   HEAP32[23480] = 256;
   HEAP32[23482] = _xmalloc(1024) | 0;
   $7 = HEAP32[23484] | 0;
   $8 = $prefix_i | 0;
   $9 = HEAP32[89578] | 0;
   $11 = HEAP32[89588] | 0;
   if (($9 | 0) != 0 & ($11 | 0) != 0) {
    $cp_0_i = 0;
   } else {
    $14 = _strrchr($filename | 0, 47) | 0;
    $filename__i = ($14 | 0) == 0 ? $filename : $14 + 1 | 0;
    $17 = _strrchr($filename__i | 0, 46) | 0;
    if (($17 | 0) == 0) {
     $len_0_i = _strlen($filename__i | 0) | 0;
    } else {
     $len_0_i = $17 - $filename__i | 0;
    }
    _memcpy($8 | 0, $filename__i | 0, $len_0_i) | 0;
    HEAP8[$prefix_i + $len_0_i | 0] = 46;
    $cp_0_i = $prefix_i + ($len_0_i + 1) | 0;
   }
   do {
    if (($11 | 0) == 0) {
     if ((HEAP32[89590] & 4 | 0) == 0) {
      HEAP32[89588] = HEAP32[89990];
      HEAP32[89566] = (HEAP32[89566] | 0) + 1;
      $41 = $9;
      break;
     } else {
      tempBigInt = 100;
      HEAP8[$cp_0_i] = tempBigInt;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$cp_0_i + 1 | 0] = tempBigInt;
      HEAP32[89588] = _fopen($8 | 0, 13848) | 0;
      $41 = HEAP32[89578] | 0;
      break;
     }
    } else {
     $41 = $9;
    }
   } while (0);
   do {
    if (($41 | 0) == 0) {
     tempBigInt = 111;
     HEAP8[$cp_0_i] = tempBigInt;
     tempBigInt = tempBigInt >> 8;
     HEAP8[$cp_0_i + 1 | 0] = tempBigInt;
     $out_p_0_i = _stpcpy($7 | 0, $8 | 0) | 0;
    } else {
     if ((HEAP32[89590] & 16 | 0) == 0) {
      $out_p_0_i = _stpcpy($7 | 0, $41 | 0) | 0;
      break;
     }
     $48 = HEAP8[$41] | 0;
     if ($48 << 24 >> 24 == 0) {
      $_0_lcssa_i_i = $7;
     } else {
      $_014_i_i = $7;
      $p_015_i_i = $41;
      $50 = $48;
      while (1) {
       $51 = $50 << 24 >> 24;
       L24 : do {
        if (($51 | 0) == 36) {
         HEAP8[$_014_i_i] = 36;
         $_2_i_i = $_014_i_i + 1 | 0;
        } else if (($51 | 0) == 32 | ($51 | 0) == 9) {
         $p_0_pn_i_i = $p_015_i_i;
         $_1_i_i = $_014_i_i;
         while (1) {
          $q_0_i_i = $p_0_pn_i_i - 1 | 0;
          if ((HEAP32[89578] | 0) >>> 0 > $q_0_i_i >>> 0) {
           break;
          }
          $56 = (HEAP8[$q_0_i_i] | 0) == 92;
          $57 = $_1_i_i + 1 | 0;
          HEAP8[$_1_i_i] = 92;
          if ($56) {
           $p_0_pn_i_i = $q_0_i_i;
           $_1_i_i = $57;
          } else {
           $_2_i_i = $57;
           break L24;
          }
         }
         HEAP8[$_1_i_i] = 92;
         $_2_i_i = $_1_i_i + 1 | 0;
        } else {
         $_2_i_i = $_014_i_i;
        }
       } while (0);
       HEAP8[$_2_i_i] = HEAP8[$p_015_i_i] | 0;
       $62 = $p_015_i_i + 1 | 0;
       $63 = $_2_i_i + 1 | 0;
       $64 = HEAP8[$62] | 0;
       if ($64 << 24 >> 24 == 0) {
        $_0_lcssa_i_i = $63;
        break;
       } else {
        $_014_i_i = $63;
        $p_015_i_i = $62;
        $50 = $64;
       }
      }
     }
     HEAP8[$_0_lcssa_i_i] = 0;
     $out_p_0_i = $_0_lcssa_i_i;
    }
   } while (0);
   $70 = $out_p_0_i + 1 | 0;
   HEAP8[$out_p_0_i] = 58;
   HEAP8[$70] = 0;
   HEAP32[23486] = $70;
   HEAP32[23492] = HEAP32[89588];
   $72 = HEAP32[23484] | 0;
   HEAP32[23490] = _strlen($72 | 0) | 0;
   HEAP32[23478] = 0;
   $165 = 0;
   $164 = $72;
  } else {
   if (($filename | 0) != 0) {
    $165 = HEAP32[23478] | 0;
    $164 = HEAP32[23484] | 0;
    break;
   }
   $77 = HEAP32[23486] | 0;
   $78 = $77 + 2 | 0;
   HEAP8[$77] = HEAP8[13448] | 0;
   HEAP8[$77 + 1 | 0] = HEAP8[13449] | 0;
   HEAP8[$77 + 2 | 0] = HEAP8[13450] | 0;
   HEAP32[23486] = $78;
   L38 : do {
    if ((HEAP32[89590] & 8 | 0) != 0) {
     $83 = HEAP32[23484] | 0;
     $85 = (_strlen($83 | 0) | 0) << 1;
     $86 = HEAP32[23478] | 0;
     $88 = ($86 << 1) + $85 | 0;
     if ($88 >>> 0 > 1048575 >>> 0) {
      _cerror(13288, 0, 0, 0);
      $91 = HEAP32[23492] | 0;
      if (($91 | 0) == (HEAP32[89990] | 0)) {
       FUNCTION_TABLE_iii[HEAP32[686] & 15](HEAP32[23484] | 0, 0) | 0;
       STACKTOP = sp;
       return;
      } else {
       _fputs(HEAP32[23484] | 0, $91 | 0) | 0;
       STACKTOP = sp;
       return;
      }
     }
     $102 = HEAP32[23488] | 0;
     if ($88 >>> 0 < $102 >>> 0) {
      $113 = $86;
      $112 = $83;
     } else {
      $108 = $102 << 1;
      HEAP32[23488] = $108;
      $109 = _xrealloc($83, $108) | 0;
      HEAP32[23484] = $109;
      HEAP32[23486] = $109 + ($78 - $83);
      $113 = HEAP32[23478] | 0;
      $112 = $109;
     }
     $114 = $113 - 1 | 0;
     HEAP32[23478] = $114;
     $115 = HEAP32[23482] | 0;
     if (($114 | 0) < 0) {
      break;
     }
     $pos_p_030 = $115;
     $120 = $115 + ($114 << 2) | 0;
     $119 = $112;
     while (1) {
      if (($pos_p_030 | 0) == ($120 | 0)) {
       $cp_0 = $119 + (HEAP32[$120 >> 2] | 0) | 0;
       while (1) {
        if ((HEAP8[$cp_0] | 0) == 10) {
         break;
        } else {
         $cp_0 = $cp_0 + 1 | 0;
        }
       }
       $cp_2 = $cp_0;
       $c_0_off0 = 10;
       $_pre_phi = $pos_p_030 + 4 | 0;
      } else {
       $130 = $pos_p_030 + 4 | 0;
       $cp_1 = $119 + ((HEAP32[$130 >> 2] | 0) - 1) | 0;
       while (1) {
        $134 = HEAP8[$cp_1] | 0;
        if (!(($134 << 24 >> 24 | 0) == 32 | ($134 << 24 >> 24 | 0) == 92 | ($134 << 24 >> 24 | 0) == 10)) {
         break;
        }
        $cp_1 = $cp_1 - 1 | 0;
       }
       $135 = $cp_1 + 1 | 0;
       $cp_2 = $135;
       $c_0_off0 = HEAP8[$135] | 0;
       $_pre_phi = $130;
      }
      HEAP8[$cp_2] = 0;
      $143 = _stpcpy(HEAP32[23486] | 0, (HEAP32[23484] | 0) + (HEAP32[$pos_p_030 >> 2] | 0) | 0) | 0;
      $145 = $143;
      tempBigInt = 657978;
      HEAP8[$145] = tempBigInt;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$145 + 1 | 0] = tempBigInt;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$145 + 2 | 0] = tempBigInt;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$145 + 3 | 0] = tempBigInt;
      HEAP32[23486] = $143 + 3;
      HEAP8[$cp_2] = $c_0_off0;
      $148 = (HEAP32[23482] | 0) + (HEAP32[23478] << 2) | 0;
      if ($_pre_phi >>> 0 > $148 >>> 0) {
       break L38;
      }
      $pos_p_030 = $_pre_phi;
      $120 = $148;
      $119 = HEAP32[23484] | 0;
     }
    }
   } while (0);
   $150 = HEAP32[23492] | 0;
   if (($150 | 0) == (HEAP32[89990] | 0)) {
    FUNCTION_TABLE_iii[HEAP32[686] & 15](HEAP32[23484] | 0, 0) | 0;
   } else {
    _fputs(HEAP32[23484] | 0, $150 | 0) | 0;
    _fclose(HEAP32[23492] | 0) | 0;
   }
   HEAP32[23492] = 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 $166 = _strlen($filename | 0) | 0;
 $167 = HEAP32[23482] | 0;
 $168 = $167 + ($165 << 2) | 0;
 $pos_p_1 = $167;
 while (1) {
  if ($pos_p_1 >>> 0 >= $168 >>> 0) {
   break;
  }
  if ((_memcmp($164 + (HEAP32[$pos_p_1 >> 2] | 0) | 0, $filename | 0, $166 | 0) | 0) == 0) {
   label = 66;
   break;
  } else {
   $pos_p_1 = $pos_p_1 + 4 | 0;
  }
 }
 if ((label | 0) == 66) {
  STACKTOP = sp;
  return;
 }
 $178 = HEAP32[23490] | 0;
 if (($178 + $166 | 0) >>> 0 > 76 >>> 0) {
  $182 = HEAP32[23486] | 0;
  HEAP8[$182] = HEAP8[13016] | 0;
  HEAP8[$182 + 1 | 0] = HEAP8[13017] | 0;
  HEAP8[$182 + 2 | 0] = HEAP8[13018] | 0;
  HEAP8[$182 + 3 | 0] = HEAP8[13019] | 0;
  HEAP8[$182 + 4 | 0] = HEAP8[13020] | 0;
  HEAP32[23486] = $182 + 4;
  HEAP32[23490] = 1;
  $185 = 1;
 } else {
  $185 = $178;
 }
 $186 = $166 + 1 | 0;
 HEAP32[23490] = $185 + $186;
 if (($165 | 0) > 4095) {
  label = 56;
 } else {
  if (((HEAP32[23486] | 0) + $186 | 0) >>> 0 < ($164 + 1048576 | 0) >>> 0) {
   $196 = $165;
  } else {
   label = 56;
  }
 }
 if ((label | 0) == 56) {
  _cfatal(12888, $164, 0, 0);
  $196 = HEAP32[23478] | 0;
 }
 $197 = HEAP32[23480] | 0;
 if ($196 >>> 0 >= $197 >>> 0) {
  $201 = HEAP32[23482] | 0;
  HEAP32[23480] = $197 << 1;
  HEAP32[23482] = _xrealloc($201, $197 << 3) | 0;
 }
 $206 = HEAP32[23484] | 0;
 $207 = HEAP32[23488] | 0;
 $209 = HEAP32[23486] | 0;
 if (($206 + $207 | 0) >>> 0 > ($209 + $186 | 0) >>> 0) {
  $220 = $209;
 } else {
  $216 = $207 << 1;
  HEAP32[23488] = $216;
  $217 = _xrealloc($206, $216) | 0;
  HEAP32[23484] = $217;
  $218 = $217 + ($209 - $206) | 0;
  HEAP32[23486] = $218;
  $220 = $218;
 }
 HEAP32[23486] = $220 + 1;
 HEAP8[$220] = 32;
 $226 = (HEAP32[23486] | 0) - (HEAP32[23484] | 0) | 0;
 $227 = HEAP32[23478] | 0;
 HEAP32[23478] = $227 + 1;
 HEAP32[(HEAP32[23482] | 0) + ($227 << 2) >> 2] = $226;
 HEAP32[23486] = _stpcpy(HEAP32[23486] | 0, $filename | 0) | 0;
 STACKTOP = sp;
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = $a$0 | 0;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $88 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = $a$0 | 0 | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $r_sroa_0_0_extract_trunc = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _get_ch() {
 var $1 = 0, $_lcssa = 0, $2 = 0, $3 = 0, $7 = 0, $17 = 0, $24 = 0, $25 = 0, $36 = 0, $44 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $60 = 0, $file_07_i = 0, $file_08_i = 0, $73 = 0, $77 = 0, $80 = 0, $file_0_i = 0, $_pre_phi = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $102 = 0, $109 = 0, $118 = 0, $141 = 0, $147 = 0, $149 = 0, $156 = 0, $159 = 0, $166 = 0, $168 = 0, $170 = 0, $171 = 0, $184 = 0, $189 = 0, $191 = 0, $206 = 0, $219 = 0, $i_05_i_i = 0, $221 = 0, $storemerge_in_i = 0, $storemerge_i = 0, $235 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[89668] | 0;
 L1 : do {
  if (HEAP8[2896] | 0) {
   $_lcssa = $1;
  } else {
   $7 = $1;
   L2 : while (1) {
    if (($7 | 0) == 0) {
     $_0 = 0;
     label = 62;
     break;
    }
    do {
     if ((HEAP32[682] | 0) == 9) {
      if ((HEAP32[$7 + 8 >> 2] | 0) == 0) {
       break;
      }
      $17 = HEAP32[89666] | 0;
      if (($17 | 0) == 1) {
       label = 7;
       break L2;
      } else if (($17 | 0) != 2) {
       break;
      }
      HEAP32[89666] = 0;
     }
    } while (0);
    if ((HEAP32[592] | 0) == 0 & HEAP8[2376]) {
     $24 = $7 | 0;
     $25 = HEAP32[$24 >> 2] | 0;
     if ((HEAP8[$25] | 0) == 32) {
      HEAP32[$24 >> 2] = $25 + 1;
     }
     HEAP8[2376] = 0;
    }
    do {
     if ((HEAP32[89594] & 64 | 0) == 0) {
      $_pre_phi = $7 | 0;
     } else {
      $36 = HEAP32[690] | 0;
      do {
       if ((HEAP32[$7 + 8 >> 2] | 0) == 0) {
        $44 = HEAP32[$7 + 40 >> 2] | 0;
        if (($44 | 0) != 0) {
         $50 = $44;
         break;
        }
        $48 = HEAP32[$7 + 48 >> 2] | 0;
        $50 = ($48 | 0) == 0 ? 14e3 : $48;
       } else {
        $50 = HEAP32[91368] | 0;
       }
      } while (0);
      $51 = $7 | 0;
      $52 = HEAP32[$51 >> 2] | 0;
      $54 = HEAPU8[$52] | 0;
      $55 = HEAP32[23332] | 0;
      $56 = $7 + 52 | 0;
      $60 = $52 - (HEAP32[$56 >> 2] | 0) | 0;
      FUNCTION_TABLE_iiii[$36 & 31](2, 14072, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = $50, HEAP32[tempVarArgs + 8 >> 2] = $54, HEAP32[tempVarArgs + 16 >> 2] = $55, HEAP32[tempVarArgs + 24 >> 2] = $60, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      _dump_string(0, HEAP32[$56 >> 2] | 0);
      FUNCTION_TABLE_iii[HEAP32[686] & 15](9944, 2) | 0;
      FUNCTION_TABLE_iii[HEAP32[686] & 15](9760, 2) | 0;
      FUNCTION_TABLE_iii[HEAP32[686] & 15](13856, 2) | 0;
      FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
      $file_07_i = HEAP32[89668] | 0;
      if (($file_07_i | 0) == 0) {
       $_pre_phi = $51;
       break;
      } else {
       $file_08_i = $file_07_i;
      }
      while (1) {
       $73 = HEAP32[$file_08_i + 40 >> 2] | 0;
       if (($73 | 0) == 0) {
        $77 = HEAP32[$file_08_i + 48 >> 2] | 0;
        $80 = ($77 | 0) == 0 ? 14e3 : $77;
       } else {
        $80 = $73;
       }
       _dump_string($80, HEAP32[$file_08_i >> 2] | 0);
       $file_0_i = HEAP32[$file_08_i + 16 >> 2] | 0;
       if (($file_0_i | 0) == 0) {
        $_pre_phi = $51;
        break;
       } else {
        $file_08_i = $file_0_i;
       }
      }
     }
    } while (0);
    $85 = HEAP32[$_pre_phi >> 2] | 0;
    $86 = $85 + 1 | 0;
    HEAP32[$_pre_phi >> 2] = $86;
    $87 = HEAP8[$85] | 0;
    $88 = $87 & 255;
    do {
     if ($87 << 24 >> 24 != 0) {
      if ((HEAP32[592] | 0) != 0) {
       $_0 = $88;
       label = 64;
       break L2;
      }
      if (!($87 << 24 >> 24 == 92 & (HEAP8[2904] ^ 1))) {
       $_0 = $88;
       label = 65;
       break L2;
      }
      if (!((HEAP8[$86] | 0) == 10 & (HEAP32[89690] | 0) != 0)) {
       $_0 = $88;
       label = 66;
       break L2;
      }
      $102 = HEAP32[$7 + 52 >> 2] | 0;
      if ((_strlen($102 | 0) | 0) == 2) {
       $109 = 0;
      } else {
       $109 = (HEAP32[89622] | 0) == 0 | 0;
      }
      if ((_last_is_mbchar($102, $109) | 0) != 0) {
       $_0 = $88;
       label = 67;
       break L2;
      }
      if ((HEAP8[(HEAP32[$_pre_phi >> 2] | 0) - 2 | 0] | 0) != 32) {
       break;
      }
      HEAP8[2376] = 1;
     }
    } while (0);
    $118 = $7 + 8 | 0;
    if ((HEAP32[$118 >> 2] | 0) == 0) {
     label = 34;
    } else {
     if ((_parse_line() | 0) == 0) {
      label = 34;
     }
    }
    if ((label | 0) == 34) {
     label = 0;
     HEAP32[89668] = HEAP32[$7 + 16 >> 2];
     _free(HEAP32[$7 + 52 >> 2] | 0);
     if ((HEAP32[89668] | 0) == 0) {
      label = 35;
      break;
     }
     $141 = HEAP32[$7 + 48 >> 2] | 0;
     do {
      if ((HEAP32[$118 >> 2] | 0) == 0) {
       if (($141 | 0) == 0) {
        break;
       }
       if ((HEAP32[89614] | 0) == 0) {
        _free($141);
        break;
       }
       $219 = HEAP32[90036] | 0;
       if (($219 | 0) < 15) {
        $storemerge_in_i = $219;
       } else {
        $i_05_i_i = 1;
        do {
         $221 = 360012 + ($i_05_i_i << 3) | 0;
         if ((HEAP32[$221 >> 2] | 0) != 0) {
          _free(HEAP32[360008 + ($i_05_i_i << 3) >> 2] | 0);
          HEAP32[$221 >> 2] = 0;
         }
         $i_05_i_i = $i_05_i_i + 1 | 0;
        } while (($i_05_i_i | 0) < 16);
        HEAP32[90036] = 0;
        $storemerge_in_i = 0;
       }
       $storemerge_i = $storemerge_in_i + 1 | 0;
       HEAP32[90036] = $storemerge_i;
       HEAP32[360008 + ($storemerge_i << 3) >> 2] = $141;
       HEAP32[360012 + ($storemerge_i << 3) >> 2] = 1;
      } else {
       _free($141);
       _free(HEAP32[$7 + 36 >> 2] | 0);
       _fclose(HEAP32[$118 >> 2] | 0) | 0;
       $147 = HEAP32[89668] | 0;
       $149 = HEAP32[$147 + 44 >> 2] | 0;
       HEAP32[91368] = $149;
       HEAP32[91370] = HEAP32[$147 + 40 >> 2];
       if ((HEAP32[$147 + 12 >> 2] | 0) == 0) {
        $166 = $147;
       } else {
        $156 = _fopen($149 | 0, 13768) | 0;
        HEAP32[(HEAP32[89668] | 0) + 8 >> 2] = $156;
        $159 = HEAP32[89668] | 0;
        _fseek(HEAP32[$159 + 8 >> 2] | 0, HEAP32[$159 + 12 >> 2] | 0, 0) | 0;
        $166 = HEAP32[89668] | 0;
       }
       $168 = HEAP32[$166 >> 2] | 0;
       $170 = HEAP32[$166 + 52 >> 2] | 0;
       $171 = _realloc($170, 65536) | 0;
       if (($171 | 0) == 0) {
        label = 40;
        break L2;
       }
       HEAP32[(HEAP32[89668] | 0) + 52 >> 2] = $171;
       $184 = HEAP32[89668] | 0;
       HEAP32[$184 >> 2] = (HEAP32[$184 + 52 >> 2] | 0) + ($168 - $170);
       $189 = HEAP32[89668] | 0;
       $191 = HEAP32[$189 + 4 >> 2] | 0;
       HEAP32[23332] = $191;
       HEAP32[89676] = HEAP32[$189 + 32 >> 2];
       HEAP32[89670] = (HEAP32[89670] | 0) - 1;
       HEAP32[23332] = $191 + 1;
       if ((HEAP32[$189 + 28 >> 2] | 0) == 0) {
        $206 = (HEAP32[$7 + 28 >> 2] | 0) != 0 ? 0 : 2;
       } else {
        $206 = 1;
       }
       _sharp(0, $206);
       HEAP32[23332] = (HEAP32[23332] | 0) - 1;
       HEAP32[89568] = 0;
       if ((HEAP32[89594] & 8 | 0) == 0) {
        break;
       }
       HEAP32[91643] = 0;
       HEAP32[91377] = 0;
      }
     } while (0);
     _free($7);
    }
    $235 = HEAP32[89668] | 0;
    if (HEAP8[2896] | 0) {
     $_lcssa = $235;
     break L1;
    } else {
     $7 = $235;
    }
   }
   if ((label | 0) == 7) {
    HEAP32[89666] = 2;
    $_0 = 32;
    STACKTOP = sp;
    return $_0 | 0;
   } else if ((label | 0) == 35) {
    _free(HEAP32[$7 + 48 >> 2] | 0);
    _free(HEAP32[$7 + 36 >> 2] | 0);
    _free($7);
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   } else if ((label | 0) == 40) {
    if ((HEAP32[89594] & 128 | 0) == 0) {
     _cfatal(7968, 0, 65536, 0);
     return 0;
    }
    _print_heap();
    _cfatal(7968, 0, 65536, 0);
    return 0;
   } else if ((label | 0) == 62) {
    STACKTOP = sp;
    return $_0 | 0;
   } else if ((label | 0) == 64) {
    STACKTOP = sp;
    return $_0 | 0;
   } else if ((label | 0) == 65) {
    STACKTOP = sp;
    return $_0 | 0;
   } else if ((label | 0) == 66) {
    STACKTOP = sp;
    return $_0 | 0;
   } else if ((label | 0) == 67) {
    STACKTOP = sp;
    return $_0 | 0;
   }
  }
 } while (0);
 $2 = $_lcssa | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + 1;
 $_0 = HEAPU8[$3] | 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _scan_quote($delim, $out, $out_end, $diag) {
 $delim = $delim | 0;
 $out = $out | 0;
 $out_end = $out_end | 0;
 $diag = $diag | 0;
 var $out_p = 0, $_delim = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $33 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $62 = 0, $or_cond3 = 0, $67 = 0, $69 = 0, $cnt_0 = 0, $74 = 0, $77 = 0, $c_0 = 0, $127 = 0, $c_179 = 0, $c_180 = 0, $135 = 0, $137 = 0, $146 = 0, $148 = 0, $217 = 0, $224 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $out_p = sp | 0;
 HEAP32[$out_p >> 2] = $out;
 if ((HEAP32[592] | 0) != 0) {
  HEAP8[2896] = 1;
 }
 HEAP32[$out_p >> 2] = $out + 1;
 HEAP8[$out] = $delim;
 $_delim = ($delim | 0) == 60 ? 62 : $delim;
 $8 = $_delim & 255;
 $9 = ($diag | 0) == 0;
 $10 = ($_delim | 0) == 62;
 L4 : while (1) {
  $11 = _get_ch() | 0;
  L6 : do {
   if (($11 | 0) == 0) {
    $c_179 = 0;
    label = 38;
   } else {
    do {
     if ((HEAP16[(HEAP32[91636] | 0) + ($11 << 1) >> 1] & HEAP32[89598] | 0) == 0) {
      if (($11 | 0) == ($_delim | 0)) {
       if (($_delim | 0) == 10 | ($_delim | 0) == 0) {
        $c_179 = $_delim;
        label = 38;
        break L6;
       } else {
        $c_180 = $_delim;
        break L6;
       }
      }
      $62 = HEAP32[682] | 0;
      do {
       if (($11 | 0) != 92 | $10) {
        if (($62 | 0) == 9 & ($11 | 0) == 32 & $10) {
         if ((HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) == 0) {
          continue L4;
         }
        }
        if (($11 | 0) == 10) {
         $c_179 = 10;
         label = 38;
         break L6;
        } else {
         $c_0 = $11;
        }
       } else {
        $or_cond3 = ($62 | 0) == 3 & (HEAP32[23330] | 0) != 0;
        $67 = HEAP32[$out_p >> 2] | 0;
        HEAP32[$out_p >> 2] = $67 + 1;
        HEAP8[$67] = 92;
        $69 = _get_ch() | 0;
        do {
         if ($or_cond3) {
          if (($69 | 0) == 85) {
           $cnt_0 = 8;
          } else if (($69 | 0) == 117) {
           $cnt_0 = 4;
          } else {
           break;
          }
          $74 = HEAP32[$out_p >> 2] | 0;
          HEAP32[$out_p >> 2] = $74 + 1;
          HEAP8[$74] = $69;
          $77 = _scan_ucn($cnt_0, HEAP32[$out_p >> 2] | 0) | 0;
          if (($77 | 0) == 0) {
           continue L4;
          }
          HEAP32[$out_p >> 2] = $77;
          continue L4;
         }
        } while (0);
        if ((HEAP16[(HEAP32[91636] | 0) + ($69 << 1) >> 1] & HEAP32[89598] | 0) != 0) {
         _unget_ch();
         continue L4;
        }
        if (!((HEAP32[592] | 0) == 0 & ($69 | 0) == 10)) {
         $c_0 = $69;
         break;
        }
        HEAP32[$out_p >> 2] = (HEAP32[$out_p >> 2] | 0) - 1;
        if ((_cat_line(1) | 0) == 0) {
         $c_179 = 10;
         label = 38;
         break L6;
        }
        $c_0 = _get_ch() | 0;
       }
      } while (0);
      do {
       if (!$9) {
        if ((_iscntrl($c_0 | 0) | 0) == 0) {
         break;
        }
        if ((HEAP16[(HEAP32[91636] | 0) + ($c_0 << 1) >> 1] & 32) != 0) {
         break;
        }
        if ((HEAP32[4] & 1 | 0) == 0) {
         break;
        }
        _do_msg(12448, 20064, 0, $c_0, 0);
       }
      } while (0);
      $127 = HEAP32[$out_p >> 2] | 0;
      HEAP32[$out_p >> 2] = $127 + 1;
      HEAP8[$127] = $c_0;
     } else {
      $23 = HEAP32[89668] | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      $25 = HEAP32[89600] | 0;
      $27 = HEAP32[$out_p >> 2] | 0;
      HEAP32[$out_p >> 2] = $27 + 1;
      HEAP8[$27] = $11;
      if (((FUNCTION_TABLE_iiii[$25 & 31]($11, $23, $out_p) | 0) & 32768 | 0) == 0) {
       break;
      }
      $33 = HEAP32[89668] | 0;
      if ((HEAP32[730] | 0) == 0 | (HEAP32[$33 + 8 >> 2] | 0) == 0 | $9) {
       continue L4;
      }
      if ((HEAP32[4] & 1 | 0) == 0) {
       continue L4;
      }
      $46 = (HEAP32[$33 >> 2] | 0) - $24 | 0;
      $47 = $46 + 2 | 0;
      $48 = _malloc($47) | 0;
      if (($48 | 0) == 0) {
       label = 10;
       break L4;
      }
      $56 = $46 + 1 | 0;
      _memcpy($48 | 0, $24 | 0, $56) | 0;
      HEAP8[$48 + $56 | 0] = 0;
      _do_msg(12448, 20496, $48, 0, 0);
      _free($48);
      continue L4;
     }
    } while (0);
    if ((HEAP32[$out_p >> 2] | 0) >>> 0 > $out_end >>> 0) {
     label = 36;
     break L4;
    } else {
     continue L4;
    }
   }
  } while (0);
  if ((label | 0) == 38) {
   label = 0;
   _unget_ch();
   $c_180 = $c_179;
  }
  $135 = ($c_180 | 0) == ($_delim | 0);
  if ($135) {
   $137 = HEAP32[$out_p >> 2] | 0;
   HEAP32[$out_p >> 2] = $137 + 1;
   HEAP8[$137] = $8;
  }
  HEAP8[HEAP32[$out_p >> 2] | 0] = 0;
  if ($9) {
   label = 72;
   break;
  }
  $146 = (HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) == 0 ? 0 : 7864;
  if ($135) {
   label = 57;
   break;
  }
  $148 = HEAP32[682] | 0;
  if (($148 | 0) == 1) {
   label = 44;
   break;
  }
  if (($_delim | 0) == 39) {
   label = 51;
   break;
  } else if (($_delim | 0) != 34) {
   label = 55;
   break;
  }
  if (!(($148 | 0) != 9 & (HEAP32[89550] | 0) != 0)) {
   label = 50;
   break;
  }
  if ((HEAP32[4] & 1 | 0) != 0) {
   _do_msg(12448, 7056, 19408, 0, 0);
  }
  if ((_cat_line(0) | 0) == 0) {
   label = 56;
   break;
  }
 }
 do {
  if ((label | 0) == 10) {
   if ((HEAP32[89594] & 128 | 0) == 0) {
    _cfatal(7968, 0, $47, 0);
    return 0;
   }
   _print_heap();
   _cfatal(7968, 0, $47, 0);
   return 0;
  } else if ((label | 0) == 50) {
   _do_msg(12624, 7056, $146, 0, 0);
   HEAP32[90042] = (HEAP32[90042] | 0) + 1;
   label = 56;
  } else if ((label | 0) == 51) {
   if (!(($148 | 0) != 9 & (HEAP32[89550] | 0) != 0)) {
    _do_msg(12624, 22056, $out, 0, $146);
    HEAP32[90042] = (HEAP32[90042] | 0) + 1;
    label = 56;
    break;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    HEAP8[2896] = 0;
    $224 = HEAP32[$out_p >> 2] | 0;
    STACKTOP = sp;
    return $224 | 0;
   }
   _do_msg(12448, 22056, $out, 0, 0);
   HEAP8[2896] = 0;
   $224 = HEAP32[$out_p >> 2] | 0;
   STACKTOP = sp;
   return $224 | 0;
  } else if ((label | 0) == 36) {
   HEAP8[$out_end] = 0;
   _cfatal(19728, 0, 0, 0);
   return 0;
  } else if ((label | 0) == 44) {
   if (!(($_delim | 0) == 39 | ($_delim | 0) == 34)) {
    label = 55;
    break;
   }
   HEAP8[2896] = 0;
   $224 = HEAP32[$out_p >> 2] | 0;
   STACKTOP = sp;
   return $224 | 0;
  } else if ((label | 0) == 72) {
   HEAP8[2896] = 0;
   $224 = HEAP32[$out_p >> 2] | 0;
   STACKTOP = sp;
   return $224 | 0;
  } else if ((label | 0) == 57) {
   if (($_delim | 0) != 39) {
    if (!((HEAP32[682] | 0) == 9 & $10)) {
     break;
    }
    if ((HEAP32[4] & 2 | 0) == 0) {
     break;
    }
    _do_msg(12448, 18760, $out, 0, $146);
    break;
   }
   if (((HEAP32[$out_p >> 2] | 0) - $out | 0) >= 3) {
    break;
   }
   if ((HEAP32[682] | 0) != 9 & (HEAP32[89550] | 0) != 0) {
    if ((HEAP32[4] & 1 | 0) == 0) {
     break;
    }
    _do_msg(12448, 21064, $out, 0, $146);
    break;
   } else {
    _do_msg(12624, 21064, $out, 0, $146);
    HEAP32[90042] = (HEAP32[90042] | 0) + 1;
    HEAP32[$out_p >> 2] = 0;
    HEAP8[2896] = 0;
    $224 = HEAP32[$out_p >> 2] | 0;
    STACKTOP = sp;
    return $224 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 55) {
  _do_msg(12624, 19184, $out, 0, $146);
  HEAP32[90042] = (HEAP32[90042] | 0) + 1;
  label = 56;
 }
 if ((label | 0) == 56) {
  HEAP32[$out_p >> 2] = 0;
 }
 if ((HEAP32[592] | 0) == 0) {
  HEAP8[2896] = 0;
  $224 = HEAP32[$out_p >> 2] | 0;
  STACKTOP = sp;
  return $224 | 0;
 }
 $217 = HEAP32[584] | 0;
 if (((HEAP32[$out_p >> 2] | 0) - $out | 0) <= ($217 | 0)) {
  HEAP8[2896] = 0;
  $224 = HEAP32[$out_p >> 2] | 0;
  STACKTOP = sp;
  return $224 | 0;
 }
 if ((HEAP32[4] & 4 | 0) == 0) {
  HEAP8[2896] = 0;
  $224 = HEAP32[$out_p >> 2] | 0;
  STACKTOP = sp;
  return $224 | 0;
 }
 _do_msg(12448, 18016, 0, $217, 0);
 HEAP8[2896] = 0;
 $224 = HEAP32[$out_p >> 2] | 0;
 STACKTOP = sp;
 return $224 | 0;
}
function _set_encoding($name, $env, $pragma) {
 $name = $name | 0;
 $env = $env | 0;
 $pragma = $pragma | 0;
 var $sp_i = 0, $tmp_i = 0, $tp_i = 0, $norm = 0, $17 = 0, $19 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $36 = 0, $46 = 0, $51 = 0, $55 = 0, $cp_0_ph_i = 0, $57 = 0, $59 = 0, $al_0_i = 0, $77 = 0, $al_0_1_i = 0, $92 = 0, $al_0_2_i = 0, $99 = 0, $al_0_3_i = 0, $106 = 0, $al_0_4_i = 0, $113 = 0, $al_0_5_i = 0, $120 = 0, $al_0_6_i = 0, $127 = 0, $al_0_7_i = 0, $134 = 0, $loc_0 = 0, $loc_016 = 0, $loc_015 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144 | 0;
 $sp_i = sp | 0;
 $tmp_i = sp + 8 | 0;
 $tp_i = sp + 4112 | 0;
 $norm = sp + 4120 | 0;
 L1 : do {
  if ((_strlen($name | 0) | 0) >>> 0 > 19 >>> 0) {
   do {
    if (!(($env | 0) == 0 & ($pragma | 0) == 0)) {
     if ((HEAP32[4] & 1 | 0) == 0) {
      break;
     }
     _cwarn(20552, $name, 0, 0);
     break L1;
    }
   } while (0);
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 20552, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $name, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 1) | 0;
  }
 } while (0);
 $17 = $norm | 0;
 _strcpy($17 | 0, $name | 0) | 0;
 $19 = $norm + 5 | 0;
 if ((HEAP8[$19] | 0) == 46) {
  _memmove($17 | 0, $19 | 0, (_strlen($19 | 0) | 0) + 1 | 0) | 0;
 }
 $26 = _strlen($17 | 0) | 0;
 $27 = $norm + $26 | 0;
 $29 = $tmp_i | 0;
 HEAP32[$sp_i >> 2] = $17;
 if (($26 | 0) > 0) {
  $32 = $tmp_i + 1 | 0;
  $34 = $17;
  while (1) {
   $36 = HEAPU8[$34] | 0;
   if ((HEAP16[(HEAP32[91636] | 0) + ($36 << 1) >> 1] & HEAP32[89596] | 0) == 0) {
    $51 = (_tolower($36 | 0) | 0) & 255;
    HEAP8[HEAP32[$sp_i >> 2] | 0] = $51;
   } else {
    HEAP32[$tp_i >> 2] = $29;
    HEAP32[$sp_i >> 2] = $34 + 1;
    $46 = HEAP8[$34] | 0;
    HEAP32[$tp_i >> 2] = $32;
    HEAP8[$29] = $46;
    FUNCTION_TABLE_iiii[HEAP32[89600] & 31]($36, $sp_i, $tp_i) | 0;
   }
   $55 = (HEAP32[$sp_i >> 2] | 0) + 1 | 0;
   HEAP32[$sp_i >> 2] = $55;
   if ($55 >>> 0 < $27 >>> 0) {
    $34 = $55;
   } else {
    $cp_0_ph_i = $17;
    break;
   }
  }
 } else {
  $cp_0_ph_i = $17;
 }
 L19 : while (1) {
  $57 = $cp_0_ph_i + 1 | 0;
  while (1) {
   $59 = HEAP8[$cp_0_ph_i] | 0;
   if (($59 << 24 >> 24 | 0) == 0) {
    break L19;
   } else if (!(($59 << 24 >> 24 | 0) == 95 | ($59 << 24 >> 24 | 0) == 45 | ($59 << 24 >> 24 | 0) == 46)) {
    $cp_0_ph_i = $57;
    continue L19;
   }
   _memmove($cp_0_ph_i | 0, $57 | 0, _strlen($cp_0_ph_i | 0) | 0) | 0;
  }
 }
 L25 : do {
  if ((HEAP8[$name] | 0) == 0) {
   HEAP32[692] = 16;
   $loc_016 = 368680;
  } else {
   do {
    if ((_memcmp($17 | 0, 13872, 7) | 0) != 0) {
     if ((_memcmp($17 | 0, 12632, 5) | 0) == 0) {
      break;
     }
     if ((_memcmp($17 | 0, 11600, 2) | 0) == 0) {
      break;
     } else {
      $al_0_i = 2;
     }
     while (1) {
      if (($al_0_i | 0) >= 6) {
       $al_0_1_i = 2;
       label = 33;
       break;
      }
      $77 = HEAP32[6128 + ($al_0_i << 2) >> 2] | 0;
      if ((_strcmp($77 | 0, $17 | 0) | 0) == 0) {
       label = 25;
       break;
      } else {
       $al_0_i = $al_0_i + 1 | 0;
      }
     }
     L34 : do {
      if ((label | 0) == 25) {
       HEAP32[692] = 0;
       $loc_0 = $77;
       label = 47;
      } else if ((label | 0) == 33) {
       while (1) {
        label = 0;
        if (($al_0_1_i | 0) >= 6) {
         $al_0_2_i = 2;
         break;
        }
        $92 = HEAP32[6152 + ($al_0_1_i << 2) >> 2] | 0;
        if ((_strcmp($92 | 0, $17 | 0) | 0) == 0) {
         label = 26;
         break;
        } else {
         $al_0_1_i = $al_0_1_i + 1 | 0;
         label = 33;
        }
       }
       if ((label | 0) == 26) {
        HEAP32[692] = 16;
        $loc_0 = $92;
        label = 47;
        break;
       }
       while (1) {
        if (($al_0_2_i | 0) >= 6) {
         $al_0_3_i = 2;
         break;
        }
        $99 = HEAP32[6176 + ($al_0_2_i << 2) >> 2] | 0;
        if ((_strcmp($99 | 0, $17 | 0) | 0) == 0) {
         label = 27;
         break;
        } else {
         $al_0_2_i = $al_0_2_i + 1 | 0;
        }
       }
       if ((label | 0) == 27) {
        HEAP32[692] = 32;
        $loc_0 = $99;
        label = 47;
        break;
       }
       while (1) {
        if (($al_0_3_i | 0) >= 6) {
         $al_0_4_i = 2;
         break;
        }
        $106 = HEAP32[6200 + ($al_0_3_i << 2) >> 2] | 0;
        if ((_strcmp($106 | 0, $17 | 0) | 0) == 0) {
         label = 28;
         break;
        } else {
         $al_0_3_i = $al_0_3_i + 1 | 0;
        }
       }
       if ((label | 0) == 28) {
        HEAP32[692] = 48;
        $loc_0 = $106;
        label = 47;
        break;
       }
       while (1) {
        if (($al_0_4_i | 0) >= 6) {
         $al_0_5_i = 2;
         break;
        }
        $113 = HEAP32[6224 + ($al_0_4_i << 2) >> 2] | 0;
        if ((_strcmp($113 | 0, $17 | 0) | 0) == 0) {
         label = 29;
         break;
        } else {
         $al_0_4_i = $al_0_4_i + 1 | 0;
        }
       }
       if ((label | 0) == 29) {
        HEAP32[692] = 128;
        $loc_0 = $113;
        label = 47;
        break;
       }
       while (1) {
        if (($al_0_5_i | 0) >= 6) {
         $al_0_6_i = 2;
         break;
        }
        $120 = HEAP32[6248 + ($al_0_5_i << 2) >> 2] | 0;
        if ((_strcmp($120 | 0, $17 | 0) | 0) == 0) {
         label = 30;
         break;
        } else {
         $al_0_5_i = $al_0_5_i + 1 | 0;
        }
       }
       if ((label | 0) == 30) {
        HEAP32[692] = 144;
        $loc_0 = $120;
        label = 47;
        break;
       }
       while (1) {
        if (($al_0_6_i | 0) >= 6) {
         $al_0_7_i = 2;
         break;
        }
        $127 = HEAP32[6272 + ($al_0_6_i << 2) >> 2] | 0;
        if ((_strcmp($127 | 0, $17 | 0) | 0) == 0) {
         label = 31;
         break;
        } else {
         $al_0_6_i = $al_0_6_i + 1 | 0;
        }
       }
       if ((label | 0) == 31) {
        HEAP32[692] = 256;
        $loc_0 = $127;
        label = 47;
        break;
       }
       while (1) {
        if (($al_0_7_i | 0) >= 6) {
         break L34;
        }
        $134 = HEAP32[6296 + ($al_0_7_i << 2) >> 2] | 0;
        if ((_strcmp($134 | 0, $17 | 0) | 0) == 0) {
         break;
        } else {
         $al_0_7_i = $al_0_7_i + 1 | 0;
        }
       }
       HEAP32[692] = 4096;
       $loc_0 = $134;
       label = 47;
      }
     } while (0);
     if ((label | 0) == 47) {
      if (($loc_0 | 0) != 0) {
       $loc_016 = $loc_0;
       break L25;
      }
     }
     do {
      if (!(($env | 0) == 0 & ($pragma | 0) == 0)) {
       if ((HEAP32[4] & 1 | 0) == 0) {
        break;
       }
       _cwarn(15056, $name, 0, 0);
       $loc_015 = 0;
       STACKTOP = sp;
       return $loc_015 | 0;
      }
     } while (0);
     FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 15056, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $name, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 1) | 0;
     $loc_015 = 0;
     STACKTOP = sp;
     return $loc_015 | 0;
    }
   } while (0);
   HEAP32[692] = 0;
   $loc_016 = 368680;
  }
 } while (0);
 _mb_init();
 $loc_015 = $loc_016;
 STACKTOP = sp;
 return $loc_015 | 0;
}
function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $15 = 0, $16 = 0, $34 = 0, $52 = 0, $55 = 0, $69 = 0, $72 = 0, $86 = 0, $94 = 0, $storemerge27 = 0, $storemerge = 0, $103 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $139 = 0, $_pre_phi = 0, $144 = 0, $147 = 0, $150 = 0, $155 = 0, $159 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $175 = 0, $RP_0 = 0, $R_0 = 0, $177 = 0, $178 = 0, $181 = 0, $182 = 0, $R_1 = 0, $193 = 0, $195 = 0, $209 = 0, $226 = 0, $239 = 0, $258 = 0, $272 = 0, $newp_0 = 0;
 $1 = $p + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 & -8;
 $4 = $p;
 $5 = $4 + $3 | 0;
 $6 = $5;
 $7 = HEAP32[92178] | 0;
 if ($4 >>> 0 < $7 >>> 0) {
  _abort();
  return 0;
 }
 $10 = $2 & 3;
 if (!(($10 | 0) != 1 & $4 >>> 0 < $5 >>> 0)) {
  _abort();
  return 0;
 }
 $15 = $4 + ($3 | 4) | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 if (($16 & 1 | 0) == 0) {
  _abort();
  return 0;
 }
 if (($10 | 0) == 0) {
  if ($nb >>> 0 < 256 >>> 0) {
   $newp_0 = 0;
   return $newp_0 | 0;
  }
  do {
   if ($3 >>> 0 >= ($nb + 4 | 0) >>> 0) {
    if (($3 - $nb | 0) >>> 0 > HEAP32[89574] << 1 >>> 0) {
     break;
    } else {
     $newp_0 = $p;
    }
    return $newp_0 | 0;
   }
  } while (0);
  $newp_0 = 0;
  return $newp_0 | 0;
 }
 if ($3 >>> 0 >= $nb >>> 0) {
  $34 = $3 - $nb | 0;
  if ($34 >>> 0 <= 15 >>> 0) {
   $newp_0 = $p;
   return $newp_0 | 0;
  }
  HEAP32[$1 >> 2] = $2 & 1 | $nb | 2;
  HEAP32[$4 + ($nb + 4) >> 2] = $34 | 3;
  HEAP32[$15 >> 2] = HEAP32[$15 >> 2] | 1;
  _dispose_chunk($4 + $nb | 0, $34);
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 if (($6 | 0) == (HEAP32[92180] | 0)) {
  $52 = (HEAP32[92177] | 0) + $3 | 0;
  if ($52 >>> 0 <= $nb >>> 0) {
   $newp_0 = 0;
   return $newp_0 | 0;
  }
  $55 = $52 - $nb | 0;
  HEAP32[$1 >> 2] = $2 & 1 | $nb | 2;
  HEAP32[$4 + ($nb + 4) >> 2] = $55 | 1;
  HEAP32[92180] = $4 + $nb;
  HEAP32[92177] = $55;
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 if (($6 | 0) == (HEAP32[92179] | 0)) {
  $69 = (HEAP32[92176] | 0) + $3 | 0;
  if ($69 >>> 0 < $nb >>> 0) {
   $newp_0 = 0;
   return $newp_0 | 0;
  }
  $72 = $69 - $nb | 0;
  if ($72 >>> 0 > 15 >>> 0) {
   HEAP32[$1 >> 2] = $2 & 1 | $nb | 2;
   HEAP32[$4 + ($nb + 4) >> 2] = $72 | 1;
   HEAP32[$4 + $69 >> 2] = $72;
   $86 = $4 + ($69 + 4) | 0;
   HEAP32[$86 >> 2] = HEAP32[$86 >> 2] & -2;
   $storemerge = $4 + $nb | 0;
   $storemerge27 = $72;
  } else {
   HEAP32[$1 >> 2] = $2 & 1 | $69 | 2;
   $94 = $4 + ($69 + 4) | 0;
   HEAP32[$94 >> 2] = HEAP32[$94 >> 2] | 1;
   $storemerge = 0;
   $storemerge27 = 0;
  }
  HEAP32[92176] = $storemerge27;
  HEAP32[92179] = $storemerge;
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 if (($16 & 2 | 0) != 0) {
  $newp_0 = 0;
  return $newp_0 | 0;
 }
 $103 = ($16 & -8) + $3 | 0;
 if ($103 >>> 0 < $nb >>> 0) {
  $newp_0 = 0;
  return $newp_0 | 0;
 }
 $106 = $103 - $nb | 0;
 $107 = $16 >>> 3;
 L52 : do {
  if ($16 >>> 0 < 256 >>> 0) {
   $112 = HEAP32[$4 + ($3 + 8) >> 2] | 0;
   $115 = HEAP32[$4 + ($3 + 12) >> 2] | 0;
   $118 = 368736 + ($107 << 1 << 2) | 0;
   do {
    if (($112 | 0) != ($118 | 0)) {
     if ($112 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     }
     if ((HEAP32[$112 + 12 >> 2] | 0) == ($6 | 0)) {
      break;
     }
     _abort();
     return 0;
    }
   } while (0);
   if (($115 | 0) == ($112 | 0)) {
    HEAP32[92174] = HEAP32[92174] & ~(1 << $107);
    break;
   }
   do {
    if (($115 | 0) == ($118 | 0)) {
     $_pre_phi = $115 + 8 | 0;
    } else {
     if ($115 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     }
     $139 = $115 + 8 | 0;
     if ((HEAP32[$139 >> 2] | 0) == ($6 | 0)) {
      $_pre_phi = $139;
      break;
     }
     _abort();
     return 0;
    }
   } while (0);
   HEAP32[$112 + 12 >> 2] = $115;
   HEAP32[$_pre_phi >> 2] = $112;
  } else {
   $144 = $5;
   $147 = HEAP32[$4 + ($3 + 24) >> 2] | 0;
   $150 = HEAP32[$4 + ($3 + 12) >> 2] | 0;
   do {
    if (($150 | 0) == ($144 | 0)) {
     $169 = $4 + ($3 + 20) | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (($170 | 0) == 0) {
      $174 = $4 + ($3 + 16) | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if (($175 | 0) == 0) {
       $R_1 = 0;
       break;
      } else {
       $R_0 = $175;
       $RP_0 = $174;
      }
     } else {
      $R_0 = $170;
      $RP_0 = $169;
     }
     while (1) {
      $177 = $R_0 + 20 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (($178 | 0) != 0) {
       $R_0 = $178;
       $RP_0 = $177;
       continue;
      }
      $181 = $R_0 + 16 | 0;
      $182 = HEAP32[$181 >> 2] | 0;
      if (($182 | 0) == 0) {
       break;
      } else {
       $R_0 = $182;
       $RP_0 = $181;
      }
     }
     if ($RP_0 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      $R_1 = $R_0;
      break;
     }
    } else {
     $155 = HEAP32[$4 + ($3 + 8) >> 2] | 0;
     if ($155 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     }
     $159 = $155 + 12 | 0;
     if ((HEAP32[$159 >> 2] | 0) != ($144 | 0)) {
      _abort();
      return 0;
     }
     $163 = $150 + 8 | 0;
     if ((HEAP32[$163 >> 2] | 0) == ($144 | 0)) {
      HEAP32[$159 >> 2] = $150;
      HEAP32[$163 >> 2] = $155;
      $R_1 = $150;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   if (($147 | 0) == 0) {
    break;
   }
   $193 = $4 + ($3 + 28) | 0;
   $195 = 369e3 + (HEAP32[$193 >> 2] << 2) | 0;
   do {
    if (($144 | 0) == (HEAP32[$195 >> 2] | 0)) {
     HEAP32[$195 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[92175] = HEAP32[92175] & ~(1 << HEAP32[$193 >> 2]);
     break L52;
    } else {
     if ($147 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
      return 0;
     }
     $209 = $147 + 16 | 0;
     if ((HEAP32[$209 >> 2] | 0) == ($144 | 0)) {
      HEAP32[$209 >> 2] = $R_1;
     } else {
      HEAP32[$147 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      break L52;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
    _abort();
    return 0;
   }
   HEAP32[$R_1 + 24 >> 2] = $147;
   $226 = HEAP32[$4 + ($3 + 16) >> 2] | 0;
   do {
    if (($226 | 0) != 0) {
     if ($226 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$R_1 + 16 >> 2] = $226;
      HEAP32[$226 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   $239 = HEAP32[$4 + ($3 + 20) >> 2] | 0;
   if (($239 | 0) == 0) {
    break;
   }
   if ($239 >>> 0 < (HEAP32[92178] | 0) >>> 0) {
    _abort();
    return 0;
   } else {
    HEAP32[$R_1 + 20 >> 2] = $239;
    HEAP32[$239 + 24 >> 2] = $R_1;
    break;
   }
  }
 } while (0);
 if ($106 >>> 0 < 16 >>> 0) {
  HEAP32[$1 >> 2] = $103 | HEAP32[$1 >> 2] & 1 | 2;
  $258 = $4 + ($103 | 4) | 0;
  HEAP32[$258 >> 2] = HEAP32[$258 >> 2] | 1;
  $newp_0 = $p;
  return $newp_0 | 0;
 } else {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & 1 | $nb | 2;
  HEAP32[$4 + ($nb + 4) >> 2] = $106 | 3;
  $272 = $4 + ($103 | 4) | 0;
  HEAP32[$272 >> 2] = HEAP32[$272 >> 2] | 1;
  _dispose_chunk($4 + $nb | 0, $106);
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 return 0;
}
function _init_sys_macro() {
 var $timestr_i_i = 0, $tvec_i_i = 0, $tmp_i_i = 0, $tmp_i = 0, $i_03_i = 0, $4 = 0, $5 = 0, $12 = 0, $21 = 0, $23 = 0, $cp_0_i_i = 0, $28 = 0, $cp_1_i_i = 0, $30 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $70 = 0, $77 = 0, $94 = 0, $98 = 0, $104 = 0, $109 = 0, $113 = 0, $114 = 0, $118 = 0, $121 = 0, $124 = 0, $130 = 0, $157 = 0, $160 = 0, $i_05_i = 0, $166 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 $timestr_i_i = sp | 0;
 $tvec_i_i = sp + 16 | 0;
 $tmp_i_i = sp + 24 | 0;
 $tmp_i = sp + 40 | 0;
 L1 : do {
  if ((HEAP32[90340] | 0) > 0) {
   $i_03_i = 0;
   while (1) {
    $4 = HEAP32[360336 + ($i_03_i << 2) >> 2] | 0;
    $5 = HEAP32[682] | 0;
    if (($5 | 0) == 3 & (HEAP32[89548] | 0) != 0) {
     _cnv_trigraph($4) | 0;
     $12 = HEAP32[682] | 0;
    } else {
     $12 = $5;
    }
    if (($12 | 0) == 9 & (HEAP32[89549] | 0) != 0) {
     _cnv_digraph($4) | 0;
    }
    $21 = _xmalloc((_strlen($4 | 0) | 0) + 4 | 0) | 0;
    _strcpy($21 | 0, $4 | 0) | 0;
    $23 = _strchr($21 | 0, 61) | 0;
    if (($23 | 0) == 0) {
     $cp_0_i_i = 20248;
    } else {
     HEAP8[$23] = 32;
     $cp_0_i_i = 7016;
    }
    _strcat($21 | 0, $cp_0_i_i | 0) | 0;
    $28 = HEAP32[91636] | 0;
    $cp_1_i_i = $21;
    while (1) {
     $30 = HEAP8[$cp_1_i_i] | 0;
     if ((HEAP16[$28 + (($30 & 255) << 1) >> 1] & 32) == 0) {
      $cp_1_i_i = $cp_1_i_i + 1 | 0;
     } else {
      break;
     }
    }
    HEAP8[$cp_1_i_i] = 0;
    if ((_look_id($21) | 0) != 0) {
     _undefine($21) | 0;
    }
    HEAP8[$cp_1_i_i] = $30;
    _unget_string($21, 0) | 0;
    if ((_do_define(0, 0) | 0) == 0) {
     break;
    }
    HEAP8[$cp_1_i_i] = 0;
    if ((_strcmp($21 | 0, 20232) | 0) == 0) {
     HEAP16[(_look_id($21) | 0) + 4 >> 1] = -773;
    }
    _free($21);
    _skip_nl();
    $i_03_i = $i_03_i + 1 | 0;
    if (($i_03_i | 0) >= (HEAP32[90340] | 0)) {
     break L1;
    }
   }
   _usage(68);
  }
 } while (0);
 $56 = $tmp_i | 0;
 $57 = HEAP32[580] | 0;
 $59 = HEAP32[91372] | 0;
 $60 = ($59 | 0) != 0;
 do {
  if (($57 | 0) == -1) {
   if ($60) {
    $70 = $59;
    break;
   }
   HEAP32[23324] = (HEAP32[23326] | 0) != 0 ? 199409 : 0;
   $70 = 0;
  } else {
   if ($60) {
    HEAP32[91372] = $57;
    $70 = $57;
    break;
   } else {
    HEAP32[23324] = $57;
    $70 = 0;
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[2712] | 0) {
   _un_predefine(1);
  } else {
   if ((HEAP32[23326] | $70 | 0) == 0) {
    break;
   }
   _un_predefine(0);
  }
 } while (0);
 $77 = HEAP32[91372] | 0;
 _sprintf($56 | 0, 19720, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = ($77 | 0) != 0 ? $77 : HEAP32[23324] | 0, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 do {
  if ((HEAP32[91372] | 0) == 0) {
   if ((HEAP32[23324] | 0) == 0) {
    break;
   }
   _look_and_install(19664, -773, HEAP32[676] | 0, $56) | 0;
  } else {
   _look_and_install(19696, -773, HEAP32[676] | 0, $56) | 0;
  }
 } while (0);
 $94 = HEAP32[91372] | 0;
 if (($94 | 0) == 0) {
  $98 = (HEAP32[23324] | 0) > 199900;
  do {
   if ($98) {
    HEAP32[584] = 4095;
    HEAP32[585] = 63;
    HEAP32[586] = 127;
    HEAP32[587] = 63;
    HEAP32[588] = 63;
    HEAP32[589] = 15;
    HEAP32[590] = 4095;
    HEAP32[591] = 2147483647;
   } else {
    if ((HEAP32[592] | 0) == 0) {
     break;
    }
    HEAP32[584] = 509;
    HEAP32[585] = 31;
    HEAP32[586] = 31;
    HEAP32[587] = 32;
    HEAP32[588] = 8;
    HEAP32[589] = 8;
    HEAP32[590] = 1024;
    HEAP32[591] = 32767;
   }
  } while (0);
  $104 = $98 & 1;
 } else {
  HEAP32[584] = 65536;
  HEAP32[585] = 1024;
  HEAP32[586] = 256;
  HEAP32[587] = 256;
  HEAP32[588] = 256;
  HEAP32[589] = 256;
  HEAP32[590] = 65536;
  HEAP32[591] = 32767;
  $104 = 1;
 }
 HEAP32[23330] = $104;
 if (($94 | 0) > 199900) {
  $109 = 1;
 } else {
  $109 = (HEAP32[23324] | 0) > 199900 | 0;
 }
 HEAP32[23328] = $109;
 if ((HEAP32[592] | 0) == 0) {
  $157 = $109;
 } else {
  $113 = $tmp_i_i | 0;
  $114 = $timestr_i_i | 0;
  _look_and_install(19616, -775, HEAP32[676] | 0, 19528) | 0;
  $118 = HEAP32[676] | 0;
  _look_and_install(19512, -776, $118, $118) | 0;
  _time($tvec_i_i | 0) | 0;
  $121 = _ctime($tvec_i_i | 0) | 0;
  $124 = HEAP8[$121 + 8 | 0] | 0;
  $130 = HEAP8[$121 + 9 | 0] | 0;
  _sprintf($114 | 0, 19448, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = $121 + 4, HEAP32[tempVarArgs + 8 >> 2] = $124 << 24 >> 24 == 48 ? 32 : $124 << 24 >> 24, HEAP32[tempVarArgs + 16 >> 2] = $130, HEAP32[tempVarArgs + 24 >> 2] = $121 + 20, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _look_and_install(19392, -774, HEAP32[676] | 0, $114) | 0;
  _sprintf($114 | 0, 19376, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $121 + 11, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _look_and_install(19352, -774, HEAP32[676] | 0, $114) | 0;
  if ((_look_id(20440) | 0) == 0) {
   _sprintf($113 | 0, 19344, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 1, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   _look_and_install(20440, -772, HEAP32[676] | 0, $113) | 0;
  }
  do {
   if ((HEAP32[91372] | 0) == 0) {
    if ((_look_id(20232) | 0) != 0) {
     break;
    }
    _sprintf($113 | 0, 19344, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23326], tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    _look_and_install(20232, -773, HEAP32[676] | 0, $113) | 0;
   }
  } while (0);
  $157 = HEAP32[23328] | 0;
 }
 if (($157 | 0) != 0) {
  $160 = $tmp_i_i | 0;
  _sprintf($160 | 0, 19640, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 25, HEAP32[tempVarArgs + 8 >> 2] = 19656, HEAP32[tempVarArgs + 16 >> 2] = 127, HEAP32[tempVarArgs + 24 >> 2] = 1, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _look_and_install(19656, -769, 19632, $160) | 0;
 }
 if ((HEAP32[22290] | 0) > 0) {
  $i_05_i = 0;
  do {
   $166 = HEAP32[88904 + ($i_05_i << 2) >> 2] | 0;
   do {
    if ((_look_id($166) | 0) == 0) {
     if ((HEAP32[4] & 8 | 0) == 0) {
      break;
     }
     FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 20304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $166, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
    } else {
     _undefine($166) | 0;
    }
   } while (0);
   $i_05_i = $i_05_i + 1 | 0;
  } while (($i_05_i | 0) < (HEAP32[22290] | 0));
 }
 if ((HEAP32[89594] & 8 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _dump_def(0, 1);
 STACKTOP = sp;
 return;
}
function _dump_string($why, $text) {
 $why = $why | 0;
 $text = $text | 0;
 var $9 = 0, $_in = 0, $text_pn = 0, $14 = 0, $15 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $c_0 = 0, $cp_1 = 0, $59 = 0, $67 = 0, $99 = 0, $chr_0_ph = 0, $cp_2_ph38 = 0, $cp_0_be = 0, $113 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if (($why | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $why, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 FUNCTION_TABLE_iii[HEAP32[686] & 15](12304, 2) | 0;
 if (($text | 0) == 0) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](14e3, 2) | 0;
  STACKTOP = sp;
  return;
 }
 $9 = HEAP8[$text] | 0;
 L8 : do {
  if ($9 << 24 >> 24 != 0) {
   $text_pn = $text;
   $_in = $9;
   while (1) {
    $14 = $text_pn + 1 | 0;
    $15 = $_in & 255;
    L11 : do {
     switch ($15 | 0) {
     case 30:
      {
       if ((HEAP32[592] | 0) == 0) {
        label = 27;
       } else {
        $cp_2_ph38 = $14;
        $chr_0_ph = 11296;
        label = 33;
       }
       break;
      }
     case 29:
      {
       if ((HEAP32[592] | 0) == 0) {
        label = 27;
       } else {
        $cp_2_ph38 = $14;
        $chr_0_ph = 11168;
        label = 33;
       }
       break;
      }
     case 31:
      {
       $99 = HEAP32[682] | 0;
       if (($99 | 0) == 3) {
        $cp_2_ph38 = $14;
        $chr_0_ph = 10296;
        label = 33;
        break L11;
       } else if (($99 | 0) != 1) {
        label = 30;
        break L11;
       }
       $cp_2_ph38 = $14;
       $chr_0_ph = 10152;
       label = 33;
       break;
      }
     case 25:
      {
       if ((HEAP32[592] | 0) == 0) {
        label = 27;
       } else {
        $cp_2_ph38 = $14;
        $chr_0_ph = 11480;
        label = 33;
       }
       break;
      }
     case 127:
      {
       FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12224, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAPU8[$14] | 0, tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
       $cp_0_be = $text_pn + 2 | 0;
       break;
      }
     case 24:
      {
       if ((HEAP32[682] | 0) != 3) {
        label = 30;
        break L11;
       }
       if ((HEAP32[89594] & 8 | 0) == 0) {
        label = 30;
        break L11;
       }
       $30 = $text_pn + 2 | 0;
       $31 = HEAP8[$14] | 0;
       $32 = $31 & 255;
       $34 = (HEAP32[89547] | 0) == 0;
       if ($34) {
        if (($31 << 24 >> 24 | 0) == 3 | ($31 << 24 >> 24 | 0) == 1) {
         label = 12;
        } else {
         $cp_1 = $30;
         $c_0 = 24;
        }
       } else {
        label = 12;
       }
       if ((label | 0) == 12) {
        label = 0;
        $cp_1 = $text_pn + 4 | 0;
        $c_0 = (HEAPU8[$text_pn + 3 | 0] | 0 | -256) + ((HEAPU8[$30] | 0) * 255 | 0) | 0;
       }
       if (($32 | 0) == 1) {
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $c_0, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $cp_0_be = $cp_1;
        break L11;
       } else if (($32 | 0) == 4) {
        if ($34) {
         $cp_2_ph38 = $cp_1;
         $chr_0_ph = 11584;
         label = 33;
         break L11;
        }
        $67 = (HEAPU8[$cp_1] | 0) - 1 | 0;
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 11792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $c_0, HEAP32[tempVarArgs + 8 >> 2] = $67, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $cp_0_be = $cp_1 + 1 | 0;
        break L11;
       } else if (($32 | 0) == 3) {
        $59 = (HEAPU8[$cp_1] | 0) - 1 | 0;
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 11864, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $c_0, HEAP32[tempVarArgs + 8 >> 2] = $59, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $cp_0_be = $cp_1 + 1 | 0;
        break L11;
       } else if (($32 | 0) == 2) {
        if ($34) {
         $cp_2_ph38 = $cp_1;
         $chr_0_ph = 11984;
         label = 33;
         break L11;
        }
        FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 12072, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $c_0, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $cp_0_be = $cp_1;
        break L11;
       } else {
        $cp_0_be = $cp_1;
        break L11;
       }
       break;
      }
     case 28:
      {
       if ((HEAP32[592] | 0) == 0) {
        label = 27;
       } else {
        $cp_2_ph38 = $14;
        $chr_0_ph = 11016;
        label = 33;
       }
       break;
      }
     case 26:
      {
       if ((HEAP32[592] | 0) == 0) {
        label = 27;
        break L11;
       }
       if ((HEAP32[89594] & 8 | 0) == 0 | (HEAP32[89688] | 0) != 0) {
        $cp_2_ph38 = $14;
        $chr_0_ph = 10664;
        label = 33;
        break L11;
       }
       FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 10880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAPU8[$text_pn + 2 | 0] | 0 | -256) + ((HEAPU8[$14] | 0) * 255 | 0), tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
       $cp_0_be = $text_pn + 3 | 0;
       break;
      }
     default:
      {
       label = 30;
      }
     }
    } while (0);
    do {
     if ((label | 0) == 30) {
      label = 0;
      if (($_in & 255) >>> 0 < 32 >>> 0) {
       FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 10464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $15 + 64, tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
       $cp_0_be = $14;
       break;
      } else {
       FUNCTION_TABLE_iii[HEAP32[688] & 15]($15, 2) | 0;
       $cp_0_be = $14;
       break;
      }
     } else if ((label | 0) == 33) {
      label = 0;
      FUNCTION_TABLE_iii[HEAP32[686] & 15]($chr_0_ph, 2) | 0;
      $cp_0_be = $cp_2_ph38;
     } else if ((label | 0) == 27) {
      label = 0;
      FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 10464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $15 + 64, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      $cp_0_be = $14;
     }
    } while (0);
    $113 = HEAP8[$cp_0_be] | 0;
    if ($113 << 24 >> 24 == 0) {
     break L8;
    } else {
     $text_pn = $cp_0_be;
     $_in = $113;
    }
   }
  }
 } while (0);
 FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
 STACKTOP = sp;
 return;
}
function _squeeze_ws($out, $endf, $mgc_seq) {
 $out = $out | 0;
 $endf = $endf | 0;
 $mgc_seq = $mgc_seq | 0;
 var $1 = 0, $3 = 0, $4 = 0, $end_of_file_0_ph = 0, $7 = 0, $8 = 0, $9 = 0, $tsep_0_ph = 0, $space_0_ph = 0, $end_of_file_0_ph80 = 0, $space_0_ph82 = 0, $end_of_file_0_ph83 = 0, $end_of_file_0 = 0, $10 = 0, $20 = 0, $23 = 0, $27 = 0, $end_of_file_1 = 0, $56 = 0, $58 = 0, $60 = 0, $63 = 0, $65 = 0, $68 = 0, $extract_t79 = 0, $_off0 = 0, $75 = 0, $78 = 0, $79 = 0, $85 = 0, $88 = 0, $94 = 0, $99 = 0, $102 = 0, $103 = 0, $_lcssa = 0, $112 = 0, $120 = 0, $123 = 0, $126 = 0, $c_0 = 0, label = 0;
 $1 = HEAP32[89668] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 $4 = ($out | 0) != 0;
 if ($4) {
  $end_of_file_0_ph = ($endf | 0) == 0 | 0;
 } else {
  $end_of_file_0_ph = 1;
 }
 $7 = ($mgc_seq | 0) != 0;
 $8 = $mgc_seq | 0;
 $9 = $mgc_seq + 4 | 0;
 $end_of_file_0_ph80 = $end_of_file_0_ph;
 $space_0_ph = 0;
 $tsep_0_ph = 0;
 L4 : while (1) {
  $end_of_file_0_ph83 = $end_of_file_0_ph80;
  $space_0_ph82 = $space_0_ph;
  L6 : while (1) {
   $end_of_file_0 = $end_of_file_0_ph83;
   while (1) {
    $10 = _get_ch() | 0;
    do {
     if ((HEAP16[(HEAP32[91636] | 0) + ($10 << 1) >> 1] & 32) == 0) {
      label = 12;
     } else {
      if ((HEAP32[592] | 0) == 0) {
       break;
      }
      $20 = HEAP32[682] | 0;
      $23 = ($1 | 0) == (HEAP32[89668] | 0);
      if (($20 | 0) == 9 & $23) {
       break;
      }
      if (($20 | 0) != 3) {
       label = 12;
       break;
      }
      $27 = HEAP32[89616] | 0;
      if (!(($27 | 0) == (-1 | 0) | ($27 | 0) == 0)) {
       break;
      }
      if (!($23 | ($10 | 0) == 24)) {
       $_lcssa = $10;
       break L4;
      }
     }
    } while (0);
    if ((label | 0) == 12) {
     label = 0;
     if (($10 | 0) != 24) {
      $_lcssa = $10;
      break L4;
     }
    }
    if (($end_of_file_0 | 0) != 0 | ($1 | 0) == (HEAP32[89668] | 0)) {
     $end_of_file_1 = $end_of_file_0;
    } else {
     HEAP32[$endf >> 2] = HEAP32[$out >> 2];
     $end_of_file_1 = 1;
    }
    if (($10 | 0) == 10 & (HEAP32[89688] | 0) != 0) {
     $_lcssa = 10;
     break L4;
    }
    if (($10 | 0) == 10) {
     label = 17;
     break;
    } else if (($10 | 0) == 31) {
     break L6;
    } else if (($10 | 0) != 24) {
     break;
    }
    do {
     if ($7) {
      if ((HEAP32[$8 >> 2] | 0) != 0) {
       break;
      }
      HEAP32[$8 >> 2] = HEAP32[$out >> 2];
     }
    } while (0);
    if ($4) {
     $56 = HEAP32[$out >> 2] | 0;
     HEAP32[$out >> 2] = $56 + 1;
     HEAP8[$56] = 24;
     $58 = _get_ch() | 0;
     $60 = HEAP32[$out >> 2] | 0;
     HEAP32[$out >> 2] = $60 + 1;
     HEAP8[$60] = $58;
     $63 = $58;
    } else {
     $63 = _get_ch() | 0;
    }
    do {
     if (($63 | 0) == 4) {
      if ((HEAP32[89547] | 0) == 0) {
       break;
      }
      $85 = _get_ch() | 0;
      if (!$4) {
       label = 35;
       break;
      }
      $88 = HEAP32[$out >> 2] | 0;
      HEAP32[$out >> 2] = $88 + 1;
      HEAP8[$88] = $85;
      label = 35;
     } else if (($63 | 0) == 2) {
      label = 35;
     } else if (($63 | 0) == 1) {
      $extract_t79 = (_get_ch() | 0) & 255;
      if ($4) {
       $_off0 = $extract_t79;
       label = 31;
      } else {
       label = 30;
      }
     } else if (($63 | 0) == 3) {
      $65 = _get_ch() | 0;
      if ($4) {
       $68 = HEAP32[$out >> 2] | 0;
       HEAP32[$out >> 2] = $68 + 1;
       HEAP8[$68] = $65;
       $_off0 = (_get_ch() | 0) & 255;
       label = 31;
       break;
      } else {
       _get_ch() | 0;
       label = 30;
       break;
      }
     }
    } while (0);
    do {
     if ((label | 0) == 35) {
      label = 0;
      if ((HEAP32[89547] | 0) == 0) {
       break;
      }
      $94 = _get_ch() | 0;
      if ($4) {
       $99 = HEAP32[$out >> 2] | 0;
       HEAP32[$out >> 2] = $99 + 1;
       HEAP8[$99] = $94;
       $102 = (_get_ch() | 0) & 255;
       $103 = HEAP32[$out >> 2] | 0;
       HEAP32[$out >> 2] = $103 + 1;
       HEAP8[$103] = $102;
       break;
      } else {
       _get_ch() | 0;
       break;
      }
     } else if ((label | 0) == 30) {
      label = 0;
      _get_ch() | 0;
     } else if ((label | 0) == 31) {
      label = 0;
      $75 = HEAP32[$out >> 2] | 0;
      HEAP32[$out >> 2] = $75 + 1;
      HEAP8[$75] = $_off0;
      $78 = (_get_ch() | 0) & 255;
      $79 = HEAP32[$out >> 2] | 0;
      HEAP32[$out >> 2] = $79 + 1;
      HEAP8[$79] = $78;
     }
    } while (0);
    if (!$7) {
     $end_of_file_0 = $end_of_file_1;
     continue;
    }
    HEAP32[$9 >> 2] = HEAP32[$out >> 2];
    $end_of_file_0 = $end_of_file_1;
   }
   if ((label | 0) == 17) {
    label = 0;
    HEAP32[5582] = 1;
   }
   $end_of_file_0_ph83 = $end_of_file_1;
   $space_0_ph82 = $space_0_ph82 + 1 | 0;
  }
  $end_of_file_0_ph80 = $end_of_file_1;
  $space_0_ph = $space_0_ph82;
  $tsep_0_ph = ((HEAP32[682] | 0) == 3) + $tsep_0_ph | 0;
 }
 if ($4) {
  do {
   if (($space_0_ph82 | 0) == 0) {
    if (($tsep_0_ph | 0) == 0) {
     break;
    }
    $120 = HEAP32[$out >> 2] | 0;
    HEAP32[$out >> 2] = $120 + 1;
    HEAP8[$120] = 31;
   } else {
    $112 = HEAP32[$out >> 2] | 0;
    HEAP32[$out >> 2] = $112 + 1;
    HEAP8[$112] = 32;
    if (($mgc_seq | 0) == 0) {
     break;
    }
    HEAP32[$mgc_seq + 8 >> 2] = 1;
   }
  } while (0);
  HEAP8[HEAP32[$out >> 2] | 0] = 0;
 }
 $123 = HEAP32[682] | 0;
 $126 = ($1 | 0) == (HEAP32[89668] | 0);
 if (!(($123 | 0) != 9 | $126)) {
  _unget_ch();
  $c_0 = ($3 | 0) != 0 ? 0 : 28;
  return $c_0 | 0;
 }
 if ((HEAP32[89616] | 0) != -1 | ($123 | 0) != 3 | $126) {
  $c_0 = $_lcssa;
  return $c_0 | 0;
 }
 _unget_ch();
 $c_0 = 0;
 return $c_0 | 0;
}
function _eval_num($nump) {
 $nump = $nump | 0;
 var $$etemp$1 = 0, $1 = 0, $2 = 0, $3 = 0, $12 = 0, $13 = 0, $14 = 0, $base_0 = 0, $c_0 = 0, $cp_0 = 0, $20$0 = 0, $20$1 = 0, $v1_0$0 = 0, $v1_0$1 = 0, $erange_0 = 0, $c_1 = 0, $cp_1 = 0, $erange_long_0 = 0, $c1_0 = 0, $c1_1 = 0, $erange_1 = 0, $$etemp$4$1 = 0, $45 = 0, $uflag_0 = 0, $lflag_0 = 0, $c_2 = 0, $cp_2 = 0, $llflag_0 = 0, $56 = 0, $58 = 0, $uflag_1 = 0, $lflag_1 = 0, $llflag_1 = 0, $70 = 0, $$etemp$5$1 = 0, $erange_long_2 = 0, $$etemp$6 = 0, $91 = 0, $31$0 = 0, $33$0 = 0, $33$1 = 0, $34$0 = 0, $34$1 = 0, label = 0;
 HEAP32[90040] = 1;
 $$etemp$1 = 360152;
 HEAP32[$$etemp$1 >> 2] = 0;
 HEAP32[$$etemp$1 + 4 >> 2] = 0;
 $1 = $nump + 1 | 0;
 $2 = HEAP8[$nump] | 0;
 $3 = $2 & 255;
 L1 : do {
  if ((HEAP16[(HEAP32[91636] | 0) + ($3 << 1) >> 1] & 2) != 0) {
   do {
    if ($2 << 24 >> 24 == 48) {
     $12 = $nump + 2 | 0;
     $13 = HEAP8[$1] | 0;
     $14 = $13 & 255;
     if (($13 << 24 >> 24 | 0) == 120 | ($13 << 24 >> 24 | 0) == 88) {
      $cp_0 = $nump + 3 | 0;
      $c_0 = HEAPU8[$12] | 0;
      $base_0 = 16;
      break;
     } else if (($13 << 24 >> 24 | 0) == 0) {
      return 360152;
     } else {
      $cp_0 = $12;
      $c_0 = $14;
      $base_0 = 8;
      break;
     }
    } else {
     $cp_0 = $1;
     $c_0 = $3;
     $base_0 = 10;
    }
   } while (0);
   $20$0 = $base_0;
   $20$1 = 0;
   $erange_long_0 = 0;
   $cp_1 = $cp_0;
   $c_1 = $c_0;
   $erange_0 = 0;
   $v1_0$1 = 0;
   $v1_0$0 = 0;
   while (1) {
    if ((_isupper($c_1 | 0) | 0) == 0) {
     $c1_0 = $c_1;
    } else {
     $c1_0 = _tolower($c_1 | 0) | 0;
    }
    $c1_1 = (($c1_0 | 0) > 96 ? -87 : -48) + $c1_0 | 0;
    if (!(($c1_1 | 0) > -1 & ($base_0 | 0) > ($c1_1 | 0))) {
     $llflag_0 = 0;
     $cp_2 = $cp_1;
     $c_2 = $c_1;
     $lflag_0 = 0;
     $uflag_0 = 0;
     break;
    }
    $31$0 = ___muldi3($v1_0$0, $v1_0$1, $20$0, $20$1) | 0;
    $33$0 = _i64Add($c1_1, ($c1_1 | 0) < 0 | 0 ? -1 : 0, $31$0, tempRet0) | 0;
    $33$1 = tempRet0;
    $34$0 = ___udivdi3($33$0, $33$1, $20$0, $20$1) | 0;
    $34$1 = tempRet0;
    if ($34$1 >>> 0 < $v1_0$1 >>> 0 | $34$1 >>> 0 == $v1_0$1 >>> 0 & $34$0 >>> 0 < $v1_0$0 >>> 0) {
     if ((HEAP32[23336] | 0) == 0) {
      label = 36;
      break;
     } else {
      $erange_1 = 1;
     }
    } else {
     $erange_1 = $erange_0;
    }
    $$etemp$4$1 = 0;
    $45 = HEAPU8[$cp_1] | 0;
    $erange_long_0 = (HEAP32[23328] | 0) == 0 & ($33$1 >>> 0 > $$etemp$4$1 >>> 0 | $33$1 >>> 0 == $$etemp$4$1 >>> 0 & $33$0 >>> 0 > -1 >>> 0) ? 1 : $erange_long_0;
    $cp_1 = $cp_1 + 1 | 0;
    $c_1 = $45;
    $erange_0 = $erange_1;
    $v1_0$1 = $33$1;
    $v1_0$0 = $33$0;
   }
   if ((label | 0) == 36) {
    _cerror(16576, $nump, 0, 0);
    HEAP32[90040] = -1;
    return 360152;
   }
   L21 : while (1) {
    L23 : do {
     switch ($c_2 | 0) {
     case 108:
     case 76:
      {
       if (($llflag_0 | 0) != 0) {
        break L1;
       }
       if (($lflag_0 | 0) == 0) {
        $llflag_1 = 0;
        $lflag_1 = 1;
        $uflag_1 = $uflag_0;
        break L23;
       }
       if ((HEAP32[23328] | 0) != 0) {
        $llflag_1 = 1;
        $lflag_1 = $lflag_0;
        $uflag_1 = $uflag_0;
        break L23;
       }
       $56 = HEAP32[23336] | 0;
       $58 = HEAP32[4] | 0;
       if (($56 | 0) == 0) {
        if (($58 & 1 | 0) == 0) {
         $llflag_1 = 1;
         $lflag_1 = $lflag_0;
         $uflag_1 = $uflag_0;
         break L23;
        }
       } else {
        if (($58 & 8 | 0) == 0) {
         $llflag_1 = 1;
         $lflag_1 = $lflag_0;
         $uflag_1 = $uflag_0;
         break L23;
        }
       }
       _cwarn(15264, $nump, 0, ($56 | 0) != 0 ? 12504 : 0);
       $llflag_1 = 1;
       $lflag_1 = $lflag_0;
       $uflag_1 = $uflag_0;
       break;
      }
     case 0:
      {
       break L21;
       break;
      }
     case 117:
     case 85:
      {
       if (($uflag_0 | 0) == 0) {
        $llflag_1 = $llflag_0;
        $lflag_1 = $lflag_0;
        $uflag_1 = 1;
       } else {
        break L1;
       }
       break;
      }
     default:
      {
       break L1;
      }
     }
    } while (0);
    $70 = HEAP8[$cp_2] | 0;
    $llflag_0 = $llflag_1;
    $cp_2 = $cp_2 + 1 | 0;
    $c_2 = $70;
    $lflag_0 = $lflag_1;
    $uflag_0 = $uflag_1;
   }
   do {
    if ((HEAP32[592] | 0) == 0) {
     $$etemp$5$1 = 0;
     $erange_long_2 = ($v1_0$1 | 0) > ($$etemp$5$1 | 0) | ($v1_0$1 | 0) == ($$etemp$5$1 | 0) & $v1_0$0 >>> 0 > 2147483647 >>> 0 ? 1 : $erange_long_0;
    } else {
     if (($uflag_0 | 0) == 0) {
      HEAP32[90040] = ($v1_0$1 >>> 31 | 0 << 1) ^ 1;
      $erange_long_2 = $erange_long_0;
      break;
     } else {
      HEAP32[90040] = 0;
      $erange_long_2 = $erange_long_0;
      break;
     }
    }
   } while (0);
   $$etemp$6 = 360152;
   HEAP32[$$etemp$6 >> 2] = $v1_0$0;
   HEAP32[$$etemp$6 + 4 >> 2] = $v1_0$1;
   do {
    if (($erange_0 | 0) != 0) {
     if ((HEAP32[4] & 8 | 0) == 0) {
      break;
     }
     _cwarn(16576, $nump, 0, 12504);
     return 360152;
    }
   } while (0);
   if (($erange_long_2 | 0) == 0) {
    return 360152;
   }
   $91 = HEAP32[23336] | 0;
   if (($91 | 0) == 0) {
    label = 33;
   } else {
    if ((HEAP32[4] & 8 | 0) == 0) {
     label = 33;
    }
   }
   do {
    if ((label | 0) == 33) {
     if (($91 | HEAP32[23328] | 0) != 0) {
      return 360152;
     }
     if ((HEAP32[4] & 1 | 0) != 0) {
      break;
     }
     return 360152;
    }
   } while (0);
   _cwarn(15832, $nump, 0, ($91 | 0) != 0 ? 12504 : 0);
   return 360152;
  }
 } while (0);
 _cerror(17312, $nump, 0, 0);
 HEAP32[90040] = -1;
 return 360152;
}
function _norm_path($dir, $fname, $inf) {
 $dir = $dir | 0;
 $fname = $fname | 0;
 $inf = $inf | 0;
 var $slbuf1 = 0, $slbuf2 = 0, $st_buf = 0, $debug_buf = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $32 = 0, $33 = 0, $len_0 = 0, $46 = 0, $51 = 0, $len_1 = 0, $55 = 0, $61 = 0, $64 = 0, $71 = 0, $cp1_0 = 0, $83 = 0, $86 = 0, $87 = 0, $88 = 0, $98 = 0, $106 = 0, $norm_name_0_ph = 0, $109 = 0, $111 = 0, $113 = 0, $114 = 0, $119 = 0, $120 = 0, $128 = 0, $134 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12392 | 0;
 $slbuf1 = sp | 0;
 $slbuf2 = sp + 4104 | 0;
 $st_buf = sp + 8208 | 0;
 $debug_buf = sp + 8288 | 0;
 do {
  if (($dir | 0) == 0) {
   label = 4;
  } else {
   if ((HEAP8[$dir] | 0) == 0 | ($fname | 0) == 0) {
    break;
   }
   if ((HEAP8[$fname] | 0) == 47) {
    label = 4;
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  _cfatal(20136, 0, 0, 0);
 }
 if (($inf | 0) == 0) {
  $15 = 0;
 } else {
  $15 = (HEAP32[89594] & 1 | 0) != 0;
 }
 $16 = $slbuf1 | 0;
 _strcpy($16 | 0, $dir | 0) | 0;
 $18 = _strlen($16 | 0) | 0;
 $19 = ($fname | 0) != 0;
 $20 = ($18 | 0) == 0;
 do {
  if ($20 | $19 ^ 1) {
   label = 10;
  } else {
   if ((HEAP8[$slbuf1 + ($18 - 1) | 0] | 0) == 47) {
    label = 10;
    break;
   }
   HEAP8[$slbuf1 + $18 | 0] = 47;
   $28 = $18 + 1 | 0;
   HEAP8[$slbuf1 + $28 | 0] = 0;
   $len_0 = $28;
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   if ($19 | $20) {
    $len_0 = $18;
    break;
   }
   $32 = $18 - 1 | 0;
   $33 = $slbuf1 + $32 | 0;
   if ((HEAP8[$33] | 0) != 47) {
    $len_0 = $18;
    break;
   }
   HEAP8[$33] = 0;
   $len_0 = $32;
  }
 } while (0);
 if ($19) {
  _strcat($16 | 0, $fname | 0) | 0;
 }
 if ((_stat($16 | 0, $st_buf | 0) | 0) != 0) {
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $46 = HEAP32[$st_buf + 12 >> 2] & 61440;
 do {
  if ($19) {
   if (($46 | 0) == 32768) {
    $len_1 = $len_0;
    break;
   } else {
    $_0 = 0;
   }
   STACKTOP = sp;
   return $_0 | 0;
  } else {
   if (($46 | 0) == 16384) {
    HEAP8[$slbuf1 + $len_0 | 0] = 47;
    $51 = $len_0 + 1 | 0;
    HEAP8[$slbuf1 + $51 | 0] = 0;
    $len_1 = $51;
    break;
   } else {
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   }
  }
 } while (0);
 HEAP8[$slbuf1 + $len_1 | 0] = 0;
 $55 = $slbuf2 | 0;
 HEAP8[$55] = 0;
 do {
  if ((HEAP8[$dir] | 0) == 0 | $19) {
   if (!$19) {
    break;
   }
   $61 = _strlen($16 | 0) | 0;
   _strcat($16 | 0, $fname | 0) | 0;
   _deref_syml($16, $55, $slbuf1 + $61 | 0);
   $64 = _readlink($16 | 0, $55 | 0, 4096) | 0;
   if (($64 | 0) <= 0) {
    break;
   }
   HEAP8[$slbuf2 + $64 | 0] = 0;
   if ((HEAP8[$55] | 0) == 47) {
    $cp1_0 = $16;
   } else {
    $71 = _strrchr($16 | 0, 47) | 0;
    $cp1_0 = ($71 | 0) == 0 ? $16 : $71 + 1 | 0;
   }
   _strcpy($cp1_0 | 0, $55 | 0) | 0;
  } else {
   _deref_syml($16, $55, $16);
  }
 } while (0);
 do {
  if ($15) {
   if ((HEAP8[$55] | 0) == 0) {
    break;
   }
   $83 = $19 ? $fname : HEAP32[676] | 0;
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 20032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $dir, HEAP32[tempVarArgs + 8 >> 2] = $83, HEAP32[tempVarArgs + 16 >> 2] = $16, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
 } while (0);
 $86 = _strlen($16 | 0) | 0;
 $87 = $86 + 1 | 0;
 $88 = _xmalloc($87) | 0;
 _strcpy($88 | 0, $16 | 0) | 0;
 do {
  if (($86 | 0) == 1) {
   if ((HEAP8[$88] | 0) == 47) {
    $_0 = $88;
   } else {
    break;
   }
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 if ((_strncmp($88 | 0, 9032, 2) | 0) == 0) {
  $98 = $88 + 2 | 0;
  _memmove($88 | 0, $98 | 0, (_strlen($98 | 0) | 0) + 1 | 0) | 0;
 }
 if ((HEAP8[$88] | 0) == 47) {
  $norm_name_0_ph = $88;
 } else {
  $106 = _xmalloc($87 + (_strlen(361368) | 0) | 0) | 0;
  _strcpy(_stpcpy($106 | 0, 361368) | 0, $88 | 0) | 0;
  _free($88);
  $norm_name_0_ph = $106;
 }
 $109 = _strstr($norm_name_0_ph | 0, 20024) | 0;
 if (($109 | 0) != 0) {
  $113 = $109;
  do {
   $114 = $113 + 2 | 0;
   _memmove($113 | 0, $114 | 0, (_strlen($114 | 0) | 0) + 1 | 0) | 0;
   $113 = _strstr($113 | 0, 20024) | 0;
  } while (($113 | 0) != 0);
 }
 $111 = _strstr($norm_name_0_ph | 0, 20008) | 0;
 L59 : do {
  if (($111 | 0) != 0) {
   $119 = $111;
   do {
    HEAP8[$119] = 0;
    $120 = _strrchr($norm_name_0_ph | 0, 47) | 0;
    if (($120 | 0) == 0) {
     break L59;
    }
    if ((HEAP8[$119 - 1 | 0] | 0) == 46) {
     break L59;
    }
    $128 = $119 + 4 | 0;
    _memmove($120 + 1 | 0, $128 | 0, (_strlen($128 | 0) | 0) + 1 | 0) | 0;
    $119 = _strstr($120 | 0, 20008) | 0;
   } while (($119 | 0) != 0);
  }
 } while (0);
 if (!$15) {
  $_0 = $norm_name_0_ph;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $134 = $debug_buf | 0;
 _strcpy($134 | 0, $dir | 0) | 0;
 _strcat($134 | 0, ($19 ? $fname : HEAP32[676] | 0) | 0) | 0;
 if ((_strcmp($134 | 0, $norm_name_0_ph | 0) | 0) == 0) {
  $_0 = $norm_name_0_ph;
  STACKTOP = sp;
  return $_0 | 0;
 }
 FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 19968, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $134, HEAP32[tempVarArgs + 8 >> 2] = $norm_name_0_ph, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $_0 = $norm_name_0_ph;
 STACKTOP = sp;
 return $_0 | 0;
}
function _do_pragma() {
 var $tp = 0, $1 = 0, $5 = 0, $14 = 0, $26 = 0, $file_0_in = 0, $file_0 = 0, $42 = 0, $43 = 0, $47 = 0, $49 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $75 = 0, $87 = 0, $101 = 0, $117 = 0, $158 = 0, $165 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tp = sp | 0;
 HEAP32[5582] = 1;
 $1 = _skip_ws() | 0;
 $5 = (HEAP32[HEAP32[89668] >> 2] | 0) - 1 | 0;
 if (($1 | 0) == 10) {
  if ((HEAP32[4] & 1 | 0) != 0) {
   _cwarn(12048, 0, 0, 0);
  }
  _unget_ch();
  STACKTOP = sp;
  return;
 }
 HEAP32[$tp >> 2] = 22344;
 $14 = HEAP32[2] | 0;
 L8 : do {
  if ((_scan_token($1, $tp, $14) | 0) == 65) {
   L12 : do {
    if ((_strcmp(358776, 11976) | 0) == 0) {
     $26 = _skip_ws() | 0;
     _unget_ch();
     if (($26 | 0) == 10) {
      $file_0_in = 358672;
     } else {
      if ((HEAP32[4] & 1 | 0) == 0) {
       break;
      }
      _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
      break;
     }
     while (1) {
      $file_0 = HEAP32[$file_0_in >> 2] | 0;
      if ((HEAP32[$file_0 + 8 >> 2] | 0) == 0) {
       $file_0_in = $file_0 + 16 | 0;
      } else {
       break;
      }
     }
     $42 = HEAP32[$file_0 + 44 >> 2] | 0;
     $43 = HEAP32[89558] | 0;
     do {
      if (($43 | 0) == 0) {
       HEAP32[89604] = 64;
       $47 = _xmalloc(512) | 0;
       HEAP32[89558] = $47;
       HEAP32[89560] = $47;
       $64 = $47;
      } else {
       $49 = HEAP32[89560] | 0;
       $54 = HEAP32[89604] | 0;
       if (($49 - $43 >> 3 | 0) < ($54 | 0)) {
        $64 = $49;
        break;
       }
       $60 = _xrealloc($43, $54 << 4) | 0;
       HEAP32[89558] = $60;
       $61 = HEAP32[89604] | 0;
       $62 = $60 + ($61 << 3) | 0;
       HEAP32[89560] = $62;
       HEAP32[89604] = $61 << 1;
       $64 = $62;
      }
     } while (0);
     HEAP32[$64 >> 2] = $42;
     $66 = _strlen($42 | 0) | 0;
     HEAP32[(HEAP32[89560] | 0) + 4 >> 2] = $66;
     HEAP32[89560] = (HEAP32[89560] | 0) + 8;
     break L8;
    } else {
     if ((_strcmp(358776, 11856) | 0) != 0) {
      if ((_strcmp(358776, 10280) | 0) != 0) {
       break;
      }
      do {
       if ((_skip_ws() | 0) == 40) {
        $158 = _skip_ws() | 0;
        HEAP32[$tp >> 2] = 22344;
        if ((_scan_token($158, $tp, $14) | 0) != 67) {
         break;
        }
        if ((_skip_ws() | 0) != 41) {
         break;
        }
        $165 = _skip_ws() | 0;
        _unget_ch();
        if (($165 | 0) == 10) {
         HEAP8[(HEAP32[$tp >> 2] | 0) - 1 | 0] = 0;
         HEAP8[22344] = 0;
         _set_encoding(22345, 0, 1) | 0;
         HEAP8[(HEAP32[$tp >> 2] | 0) - 1 | 0] = 34;
         HEAP8[22344] = 34;
         break L12;
        }
        if ((HEAP32[4] & 1 | 0) == 0) {
         break L12;
        }
        _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
        break L12;
       }
      } while (0);
      if ((HEAP32[4] & 1 | 0) == 0) {
       break L8;
      }
      _cwarn(21792, 358776, 0, 0);
      break L8;
     }
     $75 = _skip_ws() | 0;
     HEAP32[$tp >> 2] = 22344;
     do {
      if ((_scan_token($75, $tp, $14) | 0) != 65) {
       if ((HEAP32[4] & 1 | 0) == 0) {
        break;
       }
       _cwarn(21760, 22344, 0, 0);
      }
     } while (0);
     if ((_strcmp(358776, 11776) | 0) == 0) {
      $87 = _skip_ws() | 0;
      _unget_ch();
      if (($87 | 0) == 10) {
       _dump_def(1, 0);
       break L8;
      }
      if ((HEAP32[4] & 1 | 0) == 0) {
       break L8;
      }
      _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
      break L8;
     }
     if ((_strcmp(358776, 11568) | 0) == 0) {
      $101 = _skip_ws() | 0;
      _unget_ch();
      if (($101 | 0) == 10) {
       FUNCTION_TABLE_iii[HEAP32[686] & 15](11448, 0) | 0;
       break L8;
      }
      if ((HEAP32[4] & 1 | 0) == 0) {
       break L8;
      }
      _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
      break L8;
     }
     if ((_strcmp(358776, 11272) | 0) == 0) {
      $117 = _skip_ws() | 0;
      _unget_ch();
      if (($117 | 0) == 10) {
       _skip_nl();
       _do_preprocessed();
       STACKTOP = sp;
       return;
      } else {
       if ((HEAP32[4] & 1 | 0) == 0) {
        break L8;
       }
       _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
       break L8;
      }
     }
     if ((_strcmp(358776, 11160) | 0) == 0) {
      _cwarn(HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0, 0, 0, 0);
      break L8;
     }
     if ((_strcmp(358776, 11e3) | 0) == 0) {
      _push_or_pop(1);
      break L8;
     }
     if ((_strcmp(358776, 10864) | 0) == 0) {
      _push_or_pop(-1);
      break L8;
     }
     if ((_strcmp(358776, 10656) | 0) == 0) {
      _do_debug(1);
      break L8;
     }
     if ((_strcmp(358776, 10448) | 0) == 0) {
      _do_debug(0);
      break L8;
     }
     if ((HEAP32[4] & 1 | 0) == 0) {
      break L8;
     }
     _cwarn(21792, 358776, 0, 0);
     break L8;
    }
   } while (0);
   _sharp(0, 0);
   if ((HEAP32[89566] | 0) != 0) {
    break;
   }
   FUNCTION_TABLE_iii[HEAP32[686] & 15](10136, 0) | 0;
   FUNCTION_TABLE_iii[HEAP32[686] & 15]($5, 0) | 0;
  } else {
   if ((HEAP32[4] & 1 | 0) == 0) {
    break;
   }
   _cwarn(21760, 22344, 0, 0);
  }
 } while (0);
 do {
 } while ((_get_ch() | 0) != 10);
 STACKTOP = sp;
 return;
}
function _open_file($dirp, $src_dir, $filename) {
 $dirp = $dirp | 0;
 $src_dir = $src_dir | 0;
 $filename = $filename | 0;
 var $1 = 0, $2 = 0, $3 = 0, $12 = 0, $fname_0 = 0, $24 = 0, $30 = 0, $33 = 0, $34 = 0, $inc_07_i = 0, $54 = 0, $59 = 0, $65 = 0, $73 = 0, $76 = 0, $79 = 0, $82 = 0, $86 = 0, $fp_0 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $100 = 0, $104 = 0, $121 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 $1 = sp | 0;
 _memset($1 | 0, 0, 4096) | 0;
 $2 = HEAP32[89668] | 0;
 $3 = ___errno_location() | 0;
 HEAP32[$3 >> 2] = 0;
 if ((HEAP32[89594] & 1 | 0) != 0) {
  $12 = ($src_dir | 0) != 0 ? $src_dir : HEAP32[676] | 0;
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 20696, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$dirp >> 2], HEAP32[tempVarArgs + 8 >> 2] = $12, HEAP32[tempVarArgs + 16 >> 2] = $filename, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 do {
  if (($src_dir | 0) == 0) {
   $fname_0 = $filename;
  } else {
   if ((HEAP8[$src_dir] | 0) == 0) {
    $fname_0 = $filename;
    break;
   }
   _strcpy($1 | 0, $src_dir | 0) | 0;
   _strcat($1 | 0, $filename | 0) | 0;
   $fname_0 = $1;
  }
 } while (0);
 $24 = _norm_path(HEAP32[$dirp >> 2] | 0, $fname_0, 1) | 0;
 if (($24 | 0) == 0) {
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 L11 : do {
  if ((HEAP32[592] | 0) != 0) {
   $30 = HEAP32[89558] | 0;
   if (($30 | 0) == 0) {
    break;
   }
   $33 = _strlen($24 | 0) | 0;
   $34 = HEAP32[89560] | 0;
   if ($30 >>> 0 < $34 >>> 0) {
    $inc_07_i = $30;
   } else {
    break;
   }
   while (1) {
    if ((HEAP32[$inc_07_i + 4 >> 2] | 0) == ($33 | 0)) {
     if ((_strcasecmp(HEAP32[$inc_07_i >> 2] | 0, $24 | 0) | 0) == 0) {
      break;
     }
    }
    $inc_07_i = $inc_07_i + 8 | 0;
    if ($inc_07_i >>> 0 >= $34 >>> 0) {
     break L11;
    }
   }
   if ((HEAP32[89594] & 1 | 0) == 0) {
    $_0 = 1;
    STACKTOP = sp;
    return $_0 | 0;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 20456, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $24, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $_0 = 1;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 $54 = HEAP32[89556] | 0;
 do {
  if (($54 | 0) == 0 | ($54 | 0) > (HEAP32[89670] | 0)) {
   $59 = _fopen($24 | 0, 20688) | 0;
   if (($59 | 0) != 0) {
    $fp_0 = $59;
    break;
   }
   if ((HEAP32[$3 >> 2] | 0) != 24) {
    label = 35;
    break;
   }
   $65 = HEAP32[89556] | 0;
   label = 19;
  } else {
   $65 = $54;
   label = 19;
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   if ((HEAP32[89594] & 1 | 0) != 0 & ($65 | 0) == 0) {
    $73 = HEAP32[$3 >> 2] | 0;
    FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 20608, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[89670], HEAP32[tempVarArgs + 8 >> 2] = $73, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
   }
   $76 = $2 + 8 | 0;
   $79 = $2 + 12 | 0;
   HEAP32[$79 >> 2] = _ftell(HEAP32[$76 >> 2] | 0) | 0;
   _fclose(HEAP32[$76 >> 2] | 0) | 0;
   $82 = _fopen($24 | 0, 20688) | 0;
   if (($82 | 0) == 0) {
    $86 = _fopen(HEAP32[91368] | 0, 20688) | 0;
    HEAP32[$76 >> 2] = $86;
    _fseek($86 | 0, HEAP32[$79 >> 2] | 0, 0) | 0;
    label = 35;
    break;
   }
   if ((HEAP32[89556] | 0) != 0) {
    $fp_0 = $82;
    break;
   }
   HEAP32[89556] = HEAP32[89670];
   $fp_0 = $82;
  }
 } while (0);
 if ((label | 0) == 35) {
  _free($24);
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $94 = $2 | 0;
 $95 = HEAP32[$94 >> 2] | 0;
 $96 = $2 + 52 | 0;
 $97 = HEAP32[$96 >> 2] | 0;
 $100 = $95 - $97 | 0;
 if (($95 | 0) != ($97 | 0)) {
  $104 = _xrealloc($97, $100 + 1 | 0) | 0;
  HEAP32[$96 >> 2] = $104;
  HEAP32[$94 >> 2] = $104 + $100;
 }
 _sharp(0, 0);
 _add_file($fp_0, $src_dir, $filename, $24, 0);
 HEAP32[89676] = $dirp;
 HEAP32[(HEAP32[89668] | 0) + 32 >> 2] = $dirp;
 HEAP32[91368] = $24;
 do {
  if ((HEAP32[89544] | 0) == 0) {
   HEAP32[23332] = 1;
   _sharp(0, 0);
  } else {
   HEAP32[89566] = (HEAP32[89566] | 0) + 1;
   if ((HEAP32[89670] | 0) != 2) {
    break;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 20480, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $24, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
 } while (0);
 HEAP32[23332] = 0;
 $121 = HEAP32[89590] | 0;
 if (($121 | 0) == 0) {
  $_0 = 1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 do {
  if (($121 & 2 | 0) == 0) {
   if ((HEAP32[(HEAP32[89668] | 0) + 24 >> 2] | 0) == 0) {
    break;
   } else {
    $_0 = 1;
   }
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 _put_depend($24);
 $_0 = 1;
 STACKTOP = sp;
 return $_0 | 0;
}
function _get_unexpandable($c, $diag) {
 $c = $c | 0;
 $diag = $diag | 0;
 var $line_col = 0, $tmpcast = 0, $has_pragma = 0, $tmp = 0, $tmp_p = 0, $1 = 0, $_026 = 0, $defp_0 = 0, $fp_0 = 0, $token_type_0 = 0, $5 = 0, $6 = 0, $10 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $defp_1 = 0, $fp_1 = 0, $token_type_1 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $69 = 0, $72 = 0, $73 = 0, $_129 = 0, $_1_be = 0, $97 = 0, $98 = 0, $106 = 0, $110 = 0, $_0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $line_col = sp | 0;
 $tmpcast = $line_col;
 $has_pragma = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $tmp = STACKTOP;
 STACKTOP = STACKTOP + 65552 | 0;
 $tmp_p = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 HEAP32[$line_col >> 2] = 0;
 HEAP32[$line_col + 4 >> 2] = 0;
 $1 = HEAP32[2] | 0;
 $token_type_0 = 0;
 $fp_0 = 0;
 $defp_0 = 0;
 $_026 = $c;
 while (1) {
  if (($_026 | 0) == 10 | ($_026 | 0) == 0) {
   $token_type_1 = $token_type_0;
   $fp_1 = $fp_0;
   $defp_1 = $defp_0;
   break;
  }
  $5 = HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0;
  HEAP32[5584] = 22344;
  $6 = _scan_token($_026, 22336, $1) | 0;
  if (($6 | 0) != 65 | ($5 | 0) == 0) {
   $token_type_1 = $6;
   $fp_1 = $5;
   $defp_1 = $defp_0;
   break;
  }
  $10 = _is_macro(0) | 0;
  if (($10 | 0) == 0) {
   $token_type_1 = 65;
   $fp_1 = $5;
   $defp_1 = 0;
   break;
  }
  FUNCTION_TABLE_iiiiii[HEAP32[90034] & 7]($10, 22344, $1, $tmpcast, $has_pragma) | 0;
  if ((HEAP32[$has_pragma >> 2] | 0) != 0) {
   _do_msg(12624, 14392, 0, 0, 0);
   HEAP32[90042] = (HEAP32[90042] | 0) + 1;
  }
  $21 = $10 + 25 | 0;
  $23 = (_strlen(22344) | 0) + 1 | 0;
  $24 = _get_file($21, 0, 0, $23, 0) | 0;
  _memcpy(HEAP32[$24 + 52 >> 2] | 0, 22344, $23) | 0;
  do {
   $28 = _get_ch() | 0;
  } while ((HEAP16[(HEAP32[91636] | 0) + ($28 << 1) >> 1] & 64) != 0);
  if (!(($24 | 0) != (HEAP32[89668] | 0) & (HEAP32[89616] | 0) != -1)) {
   $token_type_0 = 65;
   $fp_0 = $5;
   $defp_0 = $10;
   $_026 = $28;
   continue;
  }
  if ((HEAP32[4] & 1 | 0) == 0) {
   $token_type_0 = 65;
   $fp_0 = $5;
   $defp_0 = $10;
   $_026 = $28;
   continue;
  }
  _do_msg(12448, 20328, $21, 0, 0);
  if ((HEAP32[89551] | 0) != 0) {
   $token_type_0 = 65;
   $fp_0 = $5;
   $defp_0 = $10;
   $_026 = $28;
   continue;
  }
  _dump_a_def(15024, $10, 0, 1, HEAP32[89994] | 0);
  $token_type_0 = 65;
  $fp_0 = $5;
  $defp_0 = $10;
  $_026 = $28;
 }
 if (($_026 | 0) == 10 | ($_026 | 0) == 0) {
  _unget_ch();
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 if (($fp_1 | 0) != 0 | ($diag | 0) == 0 | ($defp_1 | 0) == 0) {
  $_0 = $token_type_1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 if ((HEAP32[4] & 1 | 0) == 0) {
  $_0 = $token_type_1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $55 = $tmp | 0;
 $56 = $tmp + 65536 | 0;
 $59 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
 $60 = $defp_1 + 25 | 0;
 if (($59 | 0) == 0) {
  $69 = _get_file($60, 0, 0, 1, 0) | 0;
  HEAP8[HEAP32[$69 + 52 >> 2] | 0] = 0;
  $72 = $69;
 } else {
  $64 = (_strlen($59 | 0) | 0) + 1 | 0;
  $65 = _get_file($60, 0, 0, $64, 0) | 0;
  _memcpy(HEAP32[$65 + 52 >> 2] | 0, $59 | 0, $64) | 0;
  $72 = $65;
 }
 $73 = _get_ch() | 0;
 L30 : do {
  if (($72 | 0) == (HEAP32[89668] | 0)) {
   $_129 = $73;
   while (1) {
    HEAP32[$tmp_p >> 2] = $55;
    if ((_scan_token($_129, $tmp_p, $56) | 0) == 65) {
     if ((HEAP32[592] | 0) == 0) {
      if ((_strcmp(358776, 11560) | 0) == 0) {
       label = 28;
       break;
      }
     } else {
      if ((_strcmp(358776, 13840) | 0) == 0) {
       label = 26;
       break;
      }
     }
     $_1_be = _get_ch() | 0;
    } else {
     $_1_be = _get_ch() | 0;
    }
    if (($72 | 0) == (HEAP32[89668] | 0)) {
     $_129 = $_1_be;
    } else {
     break L30;
    }
   }
   if ((label | 0) == 28) {
    _do_msg(12448, 9864, $60, 0, 0);
    break;
   } else if ((label | 0) == 26) {
    _do_msg(12448, 12552, $60, 0, 0);
    break;
   }
  }
 } while (0);
 if (($72 | 0) == (HEAP32[89668] | 0)) {
  $97 = $72 | 0;
  $98 = HEAP32[$97 >> 2] | 0;
  HEAP32[$97 >> 2] = $98 + (_strlen($98 | 0) | 0);
  _get_ch() | 0;
 }
 _unget_ch();
 if (($token_type_1 | 0) != 71) {
  $_0 = $token_type_1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $106 = (_strlen(22344) | 0) + 1 | 0;
 _memcpy(HEAP32[(_get_file(0, 0, 0, $106, 0) | 0) + 52 >> 2] | 0, 22344, $106) | 0;
 $110 = _get_ch() | 0;
 HEAP32[5584] = 22344;
 _scan_token($110, 22336, $1) | 0;
 $_0 = 71;
 STACKTOP = sp;
 return $_0 | 0;
}
function _putout() {
 var $wp_i = 0, $1 = 0, $4 = 0, $8 = 0, $9 = 0, $12 = 0, $13 = 0, $21 = 0, $32 = 0, $42 = 0, $43 = 0, $save_0_i = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $72 = 0, $73 = 0, $out_p_0_i_i = 0, $92 = 0, $98 = 0, $99 = 0, $out_p_0_i2_i = 0, $122 = 0, $123 = 0, $out_p_0_i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $wp_i = sp | 0;
 $1 = HEAP32[89540] | 0;
 HEAP32[89540] = $1 + 1;
 HEAP8[$1] = 10;
 HEAP8[HEAP32[89540] | 0] = 0;
 $4 = _strlen(96016) | 0;
 if ($4 >>> 0 <= 65535 >>> 0) {
  if ((HEAP32[89566] | 0) != 0) {
   STACKTOP = sp;
   return;
  }
  $122 = 96016 + ($4 - 2) | 0;
  $123 = HEAP32[91636] | 0;
  $out_p_0_i = $122;
  while (1) {
   if ((HEAP16[$123 + (HEAPU8[$out_p_0_i] << 1) >> 1] & 32) == 0) {
    break;
   } else {
    $out_p_0_i = $out_p_0_i - 1 | 0;
   }
  }
  if ($out_p_0_i >>> 0 < $122 >>> 0) {
   HEAP8[$out_p_0_i + 1 | 0] = 10;
   HEAP8[$out_p_0_i + 2 | 0] = 0;
  }
  if ((FUNCTION_TABLE_iii[HEAP32[686] & 15](96016, 0) | 0) != -1) {
   STACKTOP = sp;
   return;
  }
  _cfatal(20256, 0, 0, 0);
  STACKTOP = sp;
  return;
 }
 $8 = _unget_string(96016, 0) | 0;
 HEAP32[89540] = 96016;
 HEAP32[$wp_i >> 2] = 96016;
 $9 = _get_ch() | 0;
 if (($8 | 0) == (HEAP32[89668] | 0)) {
  $12 = $9;
  do {
   $13 = HEAP32[91636] | 0;
   L20 : do {
    if ((HEAP16[$13 + ($12 << 1) >> 1] & 64) == 0) {
     _scan_token($12, $wp_i, 358158) | 0;
     $42 = HEAP32[$wp_i >> 2] | 0;
     $43 = HEAP32[89540] | 0;
     if (($42 - $43 | 0) > 65534) {
      _cfatal(19856, $43, 0, 0);
      break;
     }
     if ($42 >>> 0 < 161550 >>> 0) {
      HEAP32[89540] = $42;
      break;
     }
     L28 : do {
      if ((HEAP32[89594] & 8 | 0) == 0) {
       $63 = $43;
      } else {
       $save_0_i = $43;
       do {
        $save_0_i = _strrchr($save_0_i | 0, 47) | 0;
        if (($save_0_i | 0) == 0) {
         $63 = $43;
         break L28;
        }
       } while ((HEAP8[$save_0_i - 1 | 0] | 0) != 42);
       $62 = $save_0_i + 1 | 0;
       HEAP32[89540] = $62;
       $63 = $62;
      }
     } while (0);
     $64 = _save_string($63) | 0;
     $65 = HEAP32[89540] | 0;
     HEAP32[89540] = $65 + 1;
     HEAP8[$65] = 10;
     HEAP8[HEAP32[89540] | 0] = 0;
     do {
      if ((HEAP32[89566] | 0) == 0) {
       $72 = 96016 + ((_strlen(96016) | 0) - 2) | 0;
       $73 = HEAP32[91636] | 0;
       $out_p_0_i_i = $72;
       while (1) {
        if ((HEAP16[$73 + (HEAPU8[$out_p_0_i_i] << 1) >> 1] & 32) == 0) {
         break;
        } else {
         $out_p_0_i_i = $out_p_0_i_i - 1 | 0;
        }
       }
       if ($out_p_0_i_i >>> 0 < $72 >>> 0) {
        HEAP8[$out_p_0_i_i + 1 | 0] = 10;
        HEAP8[$out_p_0_i_i + 2 | 0] = 0;
       }
       if ((FUNCTION_TABLE_iii[HEAP32[686] & 15](96016, 0) | 0) != -1) {
        break;
       }
       _cfatal(20256, 0, 0, 0);
      }
     } while (0);
     $92 = _stpcpy(96016, $64 | 0) | 0;
     HEAP32[89540] = $92;
     HEAP32[$wp_i >> 2] = $92;
     _free($64);
    } else {
     $21 = HEAP32[89540] | 0;
     do {
      if ((HEAP32[89622] | 0) == 0) {
       if (($21 | 0) == 96016) {
        $32 = 96016;
        break;
       }
       if ((HEAP16[$13 + (HEAPU8[$21 - 1 | 0] << 1) >> 1] & 64) == 0) {
        break L20;
       } else {
        $32 = $21;
       }
      } else {
       $32 = $21;
      }
     } while (0);
     HEAP32[89540] = $32 + 1;
     HEAP8[$32] = $12;
     HEAP32[$wp_i >> 2] = (HEAP32[$wp_i >> 2] | 0) + 1;
    }
   } while (0);
   $12 = _get_ch() | 0;
  } while (($8 | 0) == (HEAP32[89668] | 0));
 }
 _unget_ch();
 do {
  if ((HEAP32[89566] | 0) == 0) {
   $98 = 96016 + ((_strlen(96016) | 0) - 2) | 0;
   $99 = HEAP32[91636] | 0;
   $out_p_0_i2_i = $98;
   while (1) {
    if ((HEAP16[$99 + (HEAPU8[$out_p_0_i2_i] << 1) >> 1] & 32) == 0) {
     break;
    } else {
     $out_p_0_i2_i = $out_p_0_i2_i - 1 | 0;
    }
   }
   if ($out_p_0_i2_i >>> 0 < $98 >>> 0) {
    HEAP8[$out_p_0_i2_i + 1 | 0] = 10;
    HEAP8[$out_p_0_i2_i + 2 | 0] = 0;
   }
   if ((FUNCTION_TABLE_iii[HEAP32[686] & 15](96016, 0) | 0) != -1) {
    break;
   }
   _cfatal(20256, 0, 0, 0);
  }
 } while (0);
 _sharp(0, 0);
 STACKTOP = sp;
 return;
}
function _mb_read_utf8($c1, $in_pp, $out_pp) {
 $c1 = $c1 | 0;
 $in_pp = $in_pp | 0;
 $out_pp = $out_pp | 0;
 var $2 = 0, $12 = 0, $_043 = 0, $len_0 = 0, $in_p_0 = 0, $out_p_0 = 0, $bytes_0 = 0, $16 = 0, $bytes_1_ph = 0, $bytes_0_ = 0, $32 = 0, $i_050 = 0, $i_05067 = 0, $34 = 0, $bytes_165 = 0, $i_056 = 0, $codepoint_055 = 0, $out_p_154 = 0, $in_p_153 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $_lobit = 0, $i_0 = 0, $bytes_166 = 0, $codepoint_0_lcssa = 0, $out_p_1_lcssa = 0, $in_p_1_lcssa = 0, $error_1_lcssa = 0, $error_3 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $_lcssa62 = 0, $len_1 = 0, $in_p_2 = 0, $out_p_2 = 0, $78 = 0, $_0 = 0, label = 0;
 $2 = HEAP32[91636] | 0;
 if ((HEAP16[$2 + (($c1 & 255) << 1) >> 1] & HEAP32[89596] | 0) == 0) {
  $_0 = 32768;
  return $_0 | 0;
 }
 $bytes_0 = 0;
 $out_p_0 = HEAP32[$out_pp >> 2] | 0;
 $in_p_0 = HEAP32[$in_pp >> 2] | 0;
 $len_0 = 0;
 $_043 = $c1;
 $12 = $2;
 while (1) {
  $16 = HEAP16[$12 + (($_043 & 255) << 1) >> 1] | 0;
  do {
   if (($16 & 1024 | 0) == 0) {
    if (($16 & 512 | 0) != 0) {
     $bytes_1_ph = 3;
     label = 5;
     break;
    }
    $bytes_0_ = ($16 & 256 | 0) == 0 ? $bytes_0 : 2;
    $32 = (2 << 6 - $bytes_0_) - 1 & $_043;
    $i_050 = $bytes_0_ - 1 | 0;
    if (($i_050 | 0) == 0) {
     $error_1_lcssa = 0;
     $in_p_1_lcssa = $in_p_0;
     $out_p_1_lcssa = $out_p_0;
     $codepoint_0_lcssa = $32;
     $bytes_166 = $bytes_0_;
    } else {
     $bytes_165 = $bytes_0_;
     $34 = $32;
     $i_05067 = $i_050;
     label = 7;
    }
   } else {
    $bytes_1_ph = 4;
    label = 5;
   }
  } while (0);
  if ((label | 0) == 5) {
   label = 0;
   $bytes_165 = $bytes_1_ph;
   $34 = (2 << 6 - $bytes_1_ph) - 1 & $_043;
   $i_05067 = $bytes_1_ph - 1 | 0;
   label = 7;
  }
  if ((label | 0) == 7) {
   label = 0;
   $in_p_153 = $in_p_0;
   $out_p_154 = $out_p_0;
   $codepoint_055 = $34;
   $i_056 = $i_05067;
   while (1) {
    $37 = HEAP8[$in_p_153] | 0;
    $38 = $37 << 24 >> 24;
    $40 = $38 & 63 | $codepoint_055 << 6;
    $41 = $in_p_153 + 1 | 0;
    $42 = $out_p_154 + 1 | 0;
    HEAP8[$out_p_154] = $37;
    $_lobit = (HEAPU16[(HEAP32[91636] | 0) + (($38 & 255) << 1) >> 1] | 0) >>> 11 & 1;
    $i_0 = $i_056 - 1 | 0;
    if (($i_0 | 0) != 0 & $_lobit << 16 >> 16 != 0) {
     $in_p_153 = $41;
     $out_p_154 = $42;
     $codepoint_055 = $40;
     $i_056 = $i_0;
    } else {
     break;
    }
   }
   $error_1_lcssa = ($_lobit ^ 1) & 65535;
   $in_p_1_lcssa = $41;
   $out_p_1_lcssa = $42;
   $codepoint_0_lcssa = $40;
   $bytes_166 = $bytes_165;
  }
  if (($bytes_166 | 0) == 4) {
   if (($codepoint_0_lcssa - 65536 | 0) >>> 0 > 1048575 >>> 0) {
    label = 14;
   } else {
    $error_3 = $error_1_lcssa;
   }
  } else if (($bytes_166 | 0) == 3) {
   if (($codepoint_0_lcssa - 2048 | 0) >>> 0 > 63487 >>> 0) {
    label = 14;
   } else {
    $error_3 = $error_1_lcssa;
   }
  } else if (($bytes_166 | 0) == 2) {
   if (($codepoint_0_lcssa - 128 | 0) >>> 0 > 1919 >>> 0) {
    label = 14;
   } else {
    $error_3 = $error_1_lcssa;
   }
  } else {
   $error_3 = $error_1_lcssa;
  }
  if ((label | 0) == 14) {
   label = 0;
   $error_3 = 1;
  }
  if (($codepoint_0_lcssa - 55296 | 0) >>> 0 < 2048 >>> 0 | ($codepoint_0_lcssa - 65534 | 0) >>> 0 < 2 >>> 0 | ($error_3 | 0) != 0) {
   $out_p_2 = $out_p_1_lcssa;
   $in_p_2 = $in_p_1_lcssa;
   $len_1 = $len_0;
   $_lcssa62 = 1;
   break;
  }
  $63 = $len_0 + 1 | 0;
  $64 = $in_p_1_lcssa + 1 | 0;
  $65 = HEAP8[$in_p_1_lcssa] | 0;
  $67 = $out_p_1_lcssa + 1 | 0;
  HEAP8[$out_p_1_lcssa] = $65;
  $69 = HEAP32[91636] | 0;
  if ((HEAP16[$69 + (($65 & 255) << 1) >> 1] & HEAP32[89596] | 0) == 0) {
   $out_p_2 = $67;
   $in_p_2 = $64;
   $len_1 = $63;
   $_lcssa62 = 0;
   break;
  } else {
   $bytes_0 = $bytes_166;
   $out_p_0 = $67;
   $in_p_0 = $64;
   $len_0 = $63;
   $_043 = $65 << 24 >> 24;
   $12 = $69;
  }
 }
 HEAP32[$in_pp >> 2] = $in_p_2 - 1;
 $78 = $out_p_2 - 1 | 0;
 HEAP8[$78] = 0;
 HEAP32[$out_pp >> 2] = $78;
 $_0 = $_lcssa62 ? $len_1 | 32768 : $len_1;
 return $_0 | 0;
}
function _is_formal($name, $conv) {
 $name = $name | 0;
 $conv = $conv | 0;
 var $1 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0, $10 = 0, $i_016_us_us = 0, $parm_sroa_0_0_copyload_us_us = 0, $16 = 0, $i_016_us = 0, $parm_sroa_0_0_copyload_us = 0, $23 = 0, $i_016_us17 = 0, $parm_sroa_0_0_copyload_us19 = 0, $30 = 0, $i_016_us23 = 0, $parm_sroa_0_0_copyload_us25 = 0, $37 = 0, $i_016 = 0, $parm_sroa_0_0_copyload = 0, $parm_sroa_0_0_copyload_lcssa = 0, $i_0_lcssa15 = 0, $49 = 0, $55 = 0, $_0 = 0;
 $1 = _strlen($name | 0) | 0;
 $2 = HEAP32[89570] | 0;
 $3 = $2 & -769;
 if (($3 | 0) <= 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $8 = ($2 & 256 | 0) == 0;
 $9 = $3 - 1 | 0;
 $10 = ($conv | 0) == 0;
 L4 : do {
  if ((HEAP32[592] | 0) == 0) {
   if ($8) {
    $i_016_us_us = 0;
    while (1) {
     $parm_sroa_0_0_copyload_us_us = HEAP32[93976 + ($i_016_us_us << 3) >> 2] | 0;
     if (($1 | 0) == (HEAP32[93980 + ($i_016_us_us << 3) >> 2] | 0)) {
      if ((_memcmp($name | 0, $parm_sroa_0_0_copyload_us_us | 0, $1 | 0) | 0) == 0) {
       $i_0_lcssa15 = $i_016_us_us;
       $parm_sroa_0_0_copyload_lcssa = $parm_sroa_0_0_copyload_us_us;
       break L4;
      }
     }
     $16 = $i_016_us_us + 1 | 0;
     if (($16 | 0) < ($3 | 0)) {
      $i_016_us_us = $16;
     } else {
      $_0 = 0;
      break;
     }
    }
    return $_0 | 0;
   } else {
    $i_016_us = 0;
    while (1) {
     $parm_sroa_0_0_copyload_us = HEAP32[93976 + ($i_016_us << 3) >> 2] | 0;
     if (($1 | 0) == (HEAP32[93980 + ($i_016_us << 3) >> 2] | 0)) {
      if ((_memcmp($name | 0, $parm_sroa_0_0_copyload_us | 0, $1 | 0) | 0) == 0) {
       $i_0_lcssa15 = $i_016_us;
       $parm_sroa_0_0_copyload_lcssa = $parm_sroa_0_0_copyload_us;
       break L4;
      }
     }
     $23 = $i_016_us + 1 | 0;
     if (($23 | 0) < ($3 | 0)) {
      $i_016_us = $23;
     } else {
      $_0 = 0;
      break;
     }
    }
    return $_0 | 0;
   }
  } else {
   if ($8) {
    $i_016_us17 = 0;
    while (1) {
     $parm_sroa_0_0_copyload_us19 = HEAP32[93976 + ($i_016_us17 << 3) >> 2] | 0;
     if (($1 | 0) == (HEAP32[93980 + ($i_016_us17 << 3) >> 2] | 0)) {
      if ((_memcmp($name | 0, $parm_sroa_0_0_copyload_us19 | 0, $1 | 0) | 0) == 0) {
       $i_0_lcssa15 = $i_016_us17;
       $parm_sroa_0_0_copyload_lcssa = $parm_sroa_0_0_copyload_us19;
       break L4;
      }
     }
     $30 = $i_016_us17 + 1 | 0;
     if (($30 | 0) < ($3 | 0)) {
      $i_016_us17 = $30;
     } else {
      $_0 = 0;
      break;
     }
    }
    return $_0 | 0;
   }
   if ($10) {
    $i_016_us23 = 0;
    while (1) {
     $parm_sroa_0_0_copyload_us25 = HEAP32[93976 + ($i_016_us23 << 3) >> 2] | 0;
     if (($1 | 0) == (HEAP32[93980 + ($i_016_us23 << 3) >> 2] | 0)) {
      if ((_memcmp($name | 0, $parm_sroa_0_0_copyload_us25 | 0, $1 | 0) | 0) == 0) {
       $i_0_lcssa15 = $i_016_us23;
       $parm_sroa_0_0_copyload_lcssa = $parm_sroa_0_0_copyload_us25;
       break L4;
      }
     }
     $37 = $i_016_us23 + 1 | 0;
     if (($37 | 0) < ($3 | 0)) {
      $i_016_us23 = $37;
     } else {
      $_0 = 0;
      break;
     }
    }
    return $_0 | 0;
   } else {
    $i_016 = 0;
   }
   while (1) {
    $parm_sroa_0_0_copyload = HEAP32[93976 + ($i_016 << 3) >> 2] | 0;
    if (($1 | 0) == (HEAP32[93980 + ($i_016 << 3) >> 2] | 0)) {
     if ((_memcmp($name | 0, $parm_sroa_0_0_copyload | 0, $1 | 0) | 0) == 0) {
      $i_0_lcssa15 = $i_016;
      $parm_sroa_0_0_copyload_lcssa = $parm_sroa_0_0_copyload;
      break L4;
     }
    }
    if (($i_016 | 0) == ($9 | 0)) {
     if ((_strcmp($name | 0, 14304) | 0) == 0) {
      $i_0_lcssa15 = $i_016;
      $parm_sroa_0_0_copyload_lcssa = $parm_sroa_0_0_copyload;
      break L4;
     }
    }
    $55 = $i_016 + 1 | 0;
    if (($55 | 0) < ($3 | 0)) {
     $i_016 = $55;
    } else {
     $_0 = 0;
     break;
    }
   }
   return $_0 | 0;
  }
 } while (0);
 if ($10) {
  $_0 = $parm_sroa_0_0_copyload_lcssa;
  return $_0 | 0;
 }
 $49 = HEAP32[22294] | 0;
 HEAP8[$49] = 127;
 HEAP8[$49 + 1 | 0] = $i_0_lcssa15 + 1;
 $_0 = $49 + 2 | 0;
 return $_0 | 0;
}
function _do_debug($set) {
 $set = $set | 0;
 var $1 = 0, $3 = 0, $argp_0_us = 0, $8 = 0, $16 = 0, $20 = 0, $argp_0 = 0, $32 = 0, $44 = 0, $50 = 0, $incptr_07_i = 0, $53 = 0, $i_06_i = 0, $78 = 0, $split = 0, $split9_in = 0, $c_0_lcssa = 0, $num_0_lcssa = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = _skip_ws() | 0;
 if (($1 | 0) == 10) {
  _unget_ch();
  if (($set | 0) == 0) {
   HEAP32[89594] = 0;
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[4] & 1 | 0) == 0) {
   STACKTOP = sp;
   return;
  }
  _cwarn(7680, 0, 0, 0);
  STACKTOP = sp;
  return;
 }
 HEAP32[5584] = 22344;
 $3 = HEAP32[2] | 0;
 do {
  if ((_scan_token($1, 22336, $3) | 0) == 65) {
   L14 : do {
    if (($set | 0) == 0) {
     $argp_0_us = 6360;
     while (1) {
      $8 = HEAP32[$argp_0_us >> 2] | 0;
      if (($8 | 0) == 0) {
       break L14;
      }
      if ((_strcmp($8 | 0, 22344) | 0) != 0) {
       $argp_0_us = $argp_0_us + 8 | 0;
       continue;
      }
      $16 = HEAP32[$argp_0_us + 4 >> 2] | 0;
      HEAP32[89594] = HEAP32[89594] & ~$16;
      $20 = _skip_ws() | 0;
      HEAP32[5584] = 22344;
      if ((_scan_token($20, 22336, $3) | 0) == 65) {
       $argp_0_us = 6360;
      } else {
       $split9_in = $16;
       $split = $20;
       label = 23;
       break;
      }
     }
    } else {
     $argp_0 = 6360;
     while (1) {
      $32 = HEAP32[$argp_0 >> 2] | 0;
      if (($32 | 0) == 0) {
       break L14;
      }
      if ((_strcmp($32 | 0, 22344) | 0) != 0) {
       $argp_0 = $argp_0 + 8 | 0;
       continue;
      }
      $44 = HEAP32[$argp_0 + 4 >> 2] | 0;
      HEAP32[89594] = HEAP32[89594] | $44;
      if (($44 | 0) == 1) {
       FUNCTION_TABLE_iii[HEAP32[686] & 15](8888, 2) | 0;
       $50 = HEAP32[89674] | 0;
       if ($50 >>> 0 < (HEAP32[89672] | 0) >>> 0) {
        $incptr_07_i = $50;
        do {
         $53 = HEAP32[$incptr_07_i >> 2] | 0;
         FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 8728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = (HEAP8[$53] | 0) == 0 ? 9032 : $53, tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $incptr_07_i = $incptr_07_i + 4 | 0;
        } while ($incptr_07_i >>> 0 < (HEAP32[89672] | 0) >>> 0);
       }
       FUNCTION_TABLE_iii[HEAP32[686] & 15](8624, 2) | 0;
       FUNCTION_TABLE_iii[HEAP32[686] & 15](8520, 2) | 0;
       if ((HEAP32[89564] | 0) > 0) {
        $i_06_i = 0;
        do {
         FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 8728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[359928 + ($i_06_i << 2) >> 2], tempVarArgs) | 0) | 0;
         STACKTOP = tempVarArgs;
         $i_06_i = $i_06_i + 1 | 0;
        } while (($i_06_i | 0) < (HEAP32[89564] | 0));
       }
       FUNCTION_TABLE_iii[HEAP32[686] & 15](8448, 2) | 0;
      } else if (($44 | 0) == 8) {
       HEAP32[89543] = 1;
      }
      $78 = _skip_ws() | 0;
      HEAP32[5584] = 22344;
      if ((_scan_token($78, 22336, $3) | 0) == 65) {
       $argp_0 = 6360;
      } else {
       $split9_in = $44;
       $split = $78;
       label = 23;
       break;
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $num_0_lcssa = ~$split9_in;
    $c_0_lcssa = $split;
    break;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _cwarn(21792, 22344, 0, 0);
   STACKTOP = sp;
   return;
  } else {
   $num_0_lcssa = 0;
   $c_0_lcssa = $1;
  }
 } while (0);
 if ((HEAP32[682] | 0) == 3) {
  if (($c_0_lcssa | 0) == 10) {
   label = 32;
  }
 } else {
  if ((HEAP32[89594] & 8 | 0) == 0 & ($c_0_lcssa | 0) == 10) {
   label = 32;
  }
 }
 if ((label | 0) == 32) {
  _unget_ch();
  STACKTOP = sp;
  return;
 }
 do {
  if ((HEAP32[4] & 1 | 0) != 0) {
   if (($c_0_lcssa | 0) == 10) {
    _cwarn(21792, 22344, 0, 0);
    HEAP32[89594] = HEAP32[89594] & $num_0_lcssa;
    break;
   } else {
    _cwarn(21760, 22344, 0, 0);
    break;
   }
  }
 } while (0);
 _skip_nl();
 _unget_ch();
 STACKTOP = sp;
 return;
}
function _do_old() {
 var $4 = 0, $_pre = 0, $12 = 0, $26$0 = 0, $39 = 0, $60 = 0, $83 = 0, $115 = 0, label = 0;
 if ((_strcmp(358776, 9616) | 0) == 0) {
  $4 = HEAP32[730] | 0;
  $_pre = HEAP32[4] | 0;
  do {
   if (($4 | 0) == 0) {
    if (($_pre & 8 | 0) != 0) {
     $12 = 0;
     label = 5;
     break;
    }
    return;
   } else {
    if (($_pre & 2 | 0) != 0) {
     $12 = $4;
     label = 5;
    }
   }
  } while (0);
  do {
   if ((label | 0) == 5) {
    _cwarn(9720, 9544, 0, ($12 | 0) != 0 ? 0 : 9480);
    if ((HEAP32[730] | 0) != 0) {
     break;
    }
    return;
   }
  } while (0);
  HEAP32[89682] = 1;
  HEAP8[2912] = 1;
  _do_include(0) | 0;
  HEAP32[89682] = 0;
  HEAP8[2912] = 0;
  return;
 }
 do {
  if ((HEAP32[592] | 0) == 0) {
   if ((_strcmp(358776, 6960) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    $26$0 = _eval_if() | 0;
    if (!(($26$0 | 0) == 0 & (tempRet0 | 0) == 0)) {
     return;
    }
    _cerror(6872, 0, 0, 0);
    _skip_nl();
    _unget_ch();
    return;
   }
   if ((_strcmp(358776, 11776) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    do {
     if ((HEAP32[682] | 0) != 1) {
      $39 = _skip_ws() | 0;
      _unget_ch();
      if (($39 | 0) == 10) {
       _dump_def(1, 0);
       break;
      }
      if ((HEAP32[4] & 1 | 0) == 0) {
       break;
      }
      _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
     }
    } while (0);
    _skip_nl();
    _unget_ch();
    return;
   }
   if ((_strcmp(358776, 11568) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    do {
     if ((HEAP32[682] | 0) != 1) {
      $60 = _skip_ws() | 0;
      _unget_ch();
      if (($60 | 0) == 10) {
       FUNCTION_TABLE_iii[HEAP32[686] & 15](6832, 0) | 0;
       break;
      }
      if ((HEAP32[4] & 1 | 0) == 0) {
       break;
      }
      _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
     }
    } while (0);
    _skip_nl();
    _unget_ch();
    return;
   }
   if ((_strcmp(358776, 11272) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    do {
     if ((HEAP32[682] | 0) != 1) {
      $83 = _skip_ws() | 0;
      _unget_ch();
      if (($83 | 0) == 10) {
       _skip_nl();
       _do_preprocessed();
       return;
      } else {
       if ((HEAP32[4] & 1 | 0) == 0) {
        break;
       }
       _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
       break;
      }
     }
    } while (0);
    _skip_nl();
    _unget_ch();
    return;
   }
   if ((_strcmp(358776, 10656) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    _do_debug(1);
    return;
   }
   if ((_strcmp(358776, 10448) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    _do_debug(0);
    return;
   }
   if ((_strcmp(358776, 6792) | 0) == 0) {
    if ((HEAP32[730] | 0) == 0) {
     return;
    }
    $115 = HEAP32[89692] | 0;
    if (($115 | 0) == 0) {
     HEAP32[89692] = HEAP32[23332];
     return;
    } else {
     _cerror(6576, 0, $115, 0);
     _skip_nl();
     _unget_ch();
     return;
    }
   } else {
    if ((_strcmp(358776, 6712) | 0) != 0) {
     break;
    }
    do {
     if ((HEAP32[730] | 0) != 0) {
      if ((HEAP32[89692] | 0) == 0) {
       _cerror(22264, 0, 0, 0);
       _skip_nl();
       _unget_ch();
       break;
      } else {
       HEAP32[89692] = 0;
       break;
      }
     }
    } while (0);
    _skip_nl();
    _unget_ch();
    return;
   }
  }
 } while (0);
 do {
  if ((HEAP32[730] | 0) == 0) {
   if ((HEAP32[4] & 8 | 0) == 0) {
    break;
   }
   _cwarn(9904, 358776, 0, 9480);
  } else {
   if ((HEAP32[89550] | 0) == 0) {
    _cerror(9904, 358776, 0, 0);
    break;
   }
   if ((HEAP32[4] & 1 | 0) != 0) {
    _cwarn(9904, 358776, 0, 0);
   }
   FUNCTION_TABLE_iii[HEAP32[686] & 15](HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0, 0) | 0;
  }
 } while (0);
 _skip_nl();
 _unget_ch();
 return;
}
function _mb_read_iso2022_jp($c1, $in_pp, $out_pp) {
 $c1 = $c1 | 0;
 $in_pp = $in_pp | 0;
 $out_pp = $out_pp | 0;
 var $len_0 = 0, $in_p_0 = 0, $out_p_0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $38 = 0, $42 = 0, $43 = 0, $45 = 0, $_lobit = 0, $len_1 = 0, $in_p_2 = 0, $out_p_2 = 0, $52 = 0, $53 = 0, $54 = 0, $58 = 0, $62 = 0, $63 = 0, $64 = 0, $73 = 0, $len_2 = 0, $in_p_4 = 0, $out_p_4 = 0, $len_3 = 0, $in_p_5 = 0, $out_p_5 = 0, $error_4 = 0, $77 = 0, $_0 = 0, label = 0;
 if ((HEAP16[(HEAP32[91636] | 0) + (($c1 & 255) << 1) >> 1] & HEAP32[89596] | 0) == 0) {
  $_0 = 32768;
  return $_0 | 0;
 }
 $out_p_0 = HEAP32[$out_pp >> 2] | 0;
 $in_p_0 = HEAP32[$in_pp >> 2] | 0;
 $len_0 = 0;
 L4 : while (1) {
  $12 = $in_p_0 + 1 | 0;
  $13 = HEAP8[$in_p_0] | 0;
  $14 = $13 << 24 >> 24;
  $15 = $out_p_0 + 1 | 0;
  HEAP8[$out_p_0] = $13;
  if ((HEAP16[(HEAP32[91636] | 0) + (($14 & 255) << 1) >> 1] & 512) == 0) {
   $error_4 = 1;
   $out_p_5 = $15;
   $in_p_5 = $12;
   $len_3 = $len_0;
   break;
  }
  $23 = $in_p_0 + 2 | 0;
  $24 = HEAP8[$12] | 0;
  $25 = $24 << 24 >> 24;
  $26 = $out_p_0 + 2 | 0;
  HEAP8[$15] = $24;
  if ((HEAP16[(HEAP32[91636] | 0) + (($25 & 255) << 1) >> 1] & 1024) == 0) {
   $error_4 = 1;
   $out_p_5 = $26;
   $in_p_5 = $23;
   $len_3 = $len_0;
   break;
  }
  do {
   if (($14 | 0) == 36) {
    if (($25 | 0) == 66) {
     $out_p_2 = $26;
     $in_p_2 = $23;
     $len_1 = $len_0;
     label = 10;
     break;
    } else if (($25 | 0) != 40) {
     $error_4 = 1;
     $out_p_5 = $26;
     $in_p_5 = $23;
     $len_3 = $len_0;
     break L4;
    }
    $42 = $in_p_0 + 3 | 0;
    $43 = HEAP8[$23] | 0;
    $45 = $out_p_0 + 3 | 0;
    HEAP8[$26] = $43;
    $_lobit = (HEAPU16[(HEAP32[91636] | 0) + (($43 & 255) << 1) >> 1] | 0) >>> 11 & 1;
    if ($_lobit << 16 >> 16 == 0) {
     $error_4 = ($_lobit ^ 1) & 65535;
     $out_p_5 = $45;
     $in_p_5 = $42;
     $len_3 = $len_0;
     break L4;
    } else {
     $out_p_2 = $45;
     $in_p_2 = $42;
     $len_1 = $len_0;
     label = 10;
    }
   } else if (($14 | 0) == 40) {
    if ($24 << 24 >> 24 != 66) {
     $error_4 = 1;
     $out_p_5 = $26;
     $in_p_5 = $23;
     $len_3 = $len_0;
     break L4;
    }
    $38 = HEAP8[$23] | 0;
    HEAP8[$26] = $38;
    $out_p_4 = $out_p_0 + 3 | 0;
    $in_p_4 = $in_p_0 + 3 | 0;
    $len_2 = $len_0;
    $73 = HEAP16[(HEAP32[91636] | 0) + ($38 << 24 >> 24 << 1) >> 1] | 0;
   } else {
    $out_p_2 = $26;
    $in_p_2 = $23;
    $len_1 = $len_0;
    label = 10;
   }
  } while (0);
  L13 : do {
   if ((label | 0) == 10) {
    while (1) {
     label = 0;
     $52 = $in_p_2 + 1 | 0;
     $53 = HEAP8[$in_p_2] | 0;
     $54 = $out_p_2 + 1 | 0;
     HEAP8[$out_p_2] = $53;
     $58 = HEAP16[(HEAP32[91636] | 0) + ($53 << 24 >> 24 << 1) >> 1] | 0;
     if (($58 & 4096) == 0) {
      $out_p_4 = $54;
      $in_p_4 = $52;
      $len_2 = $len_1;
      $73 = $58;
      break L13;
     }
     $62 = $in_p_2 + 2 | 0;
     $63 = HEAP8[$52] | 0;
     $64 = $out_p_2 + 2 | 0;
     HEAP8[$54] = $63;
     if ((HEAP16[(HEAP32[91636] | 0) + ($63 << 24 >> 24 << 1) >> 1] & 4096) == 0) {
      $error_4 = 1;
      $out_p_5 = $64;
      $in_p_5 = $62;
      $len_3 = $len_1;
      break L4;
     } else {
      $out_p_2 = $64;
      $in_p_2 = $62;
      $len_1 = $len_1 + 1 | 0;
      label = 10;
     }
    }
   }
  } while (0);
  if (($73 & 256) == 0) {
   $error_4 = 0;
   $out_p_5 = $out_p_4;
   $in_p_5 = $in_p_4;
   $len_3 = $len_2;
   break;
  } else {
   $out_p_0 = $out_p_4;
   $in_p_0 = $in_p_4;
   $len_0 = $len_2;
  }
 }
 HEAP32[$in_pp >> 2] = $in_p_5 - 1;
 $77 = $out_p_5 - 1 | 0;
 HEAP8[$77] = 0;
 HEAP32[$out_pp >> 2] = $77;
 $_0 = ($error_4 | 0) != 0 ? $len_3 | 32768 : $len_3;
 return $_0 | 0;
}
function _do_preprocessed() {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $23 = 0, $colon_0_ph35 = 0, $comment_0_ph34 = 0, $38 = 0, $42 = 0, $45 = 0, $49 = 0, $comment_1 = 0, $colon_1 = 0, $comment_2 = 0, $colon_2 = 0, $55 = 0, $57 = 0, $incptr_0 = 0, $61 = 0, $67 = 0, $73 = 0, $81 = 0, $82 = 0, $83 = 0, label = 0;
 $1 = HEAP32[89668] | 0;
 $2 = $1 + 52 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 | 0;
 HEAP32[$4 >> 2] = $3;
 $5 = $1 + 8 | 0;
 L1 : do {
  if ((_fgets($3 | 0, 65536, HEAP32[$5 >> 2] | 0) | 0) != 0) {
   do {
    if ((_memcmp($3 | 0, 7496, 2) | 0) == 0) {
     break L1;
    }
    FUNCTION_TABLE_iii[HEAP32[686] & 15]($3, 0) | 0;
   } while ((_fgets($3 | 0, 65536, HEAP32[$5 >> 2] | 0) | 0) != 0);
  }
 } while (0);
 if ((_strcmp($3 | 0, 7440) | 0) != 0) {
  _cfatal(7368, 0, 0, 0);
 }
 if ((_fgets($3 | 0, 65536, HEAP32[$5 >> 2] | 0) | 0) == 0) {
  $81 = HEAP32[$2 >> 2] | 0;
  $82 = _strlen($81 | 0) | 0;
  $83 = $81 + $82 | 0;
  HEAP32[$4 >> 2] = $83;
  return;
 }
 $23 = $3 + 8 | 0;
 $comment_0_ph34 = 0;
 $colon_0_ph35 = 0;
 L12 : while (1) {
  while (1) {
   if ((_memcmp($3 | 0, 7496, 2) | 0) != 0) {
    if ((_memcmp($3 | 0, 7248, 8) | 0) == 0) {
     break;
    }
    if ((_memcmp($3 | 0, 7184, 5) | 0) != 0) {
     label = 13;
     break;
    }
   }
   if ((_fgets($3 | 0, 65536, HEAP32[$5 >> 2] | 0) | 0) == 0) {
    label = 27;
    break L12;
   }
  }
  if ((label | 0) == 13) {
   label = 0;
   _cfatal(7576, 0, 0, 0);
  }
  $38 = $3 + ((_strlen($3 | 0) | 0) - 4) | 0;
  do {
   if ((_memcmp($38 | 0, 7152, 4) | 0) == 0) {
    HEAP8[$38] = 0;
    $42 = _strrchr($3 | 0, 42) | 0;
    if (($42 | 0) == 0) {
     $colon_1 = $colon_0_ph35;
     $comment_1 = 0;
     label = 18;
     break;
    }
    $45 = $42 - 1 | 0;
    if ((_memcmp($45 | 0, 7088, 3) | 0) != 0) {
     $colon_1 = $colon_0_ph35;
     $comment_1 = $45;
     label = 18;
     break;
    }
    $49 = _strrchr($45 | 0, 58) | 0;
    if (($49 | 0) == 0) {
     $colon_1 = 0;
     $comment_1 = $45;
     label = 18;
    } else {
     $colon_2 = $49;
     $comment_2 = $45;
    }
   } else {
    $colon_1 = $colon_0_ph35;
    $comment_1 = $comment_0_ph34;
    label = 18;
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   _cfatal(7576, 0, 0, 0);
   $colon_2 = $colon_1;
   $comment_2 = $comment_1;
  }
  HEAP32[23332] = _atoi($colon_2 + 1 | 0) | 0;
  HEAP8[$colon_2] = 0;
  $55 = $comment_2 + 3 | 0;
  HEAP32[89676] = 2704;
  $57 = HEAP32[89672] | 0;
  $incptr_0 = HEAP32[89674] | 0;
  while (1) {
   if ($incptr_0 >>> 0 >= $57 >>> 0) {
    $67 = 2704;
    break;
   }
   $61 = HEAP32[$incptr_0 >> 2] | 0;
   if ((_memcmp($61 | 0, $55 | 0, _strlen($61 | 0) | 0) | 0) == 0) {
    label = 22;
    break;
   } else {
    $incptr_0 = $incptr_0 + 4 | 0;
   }
  }
  if ((label | 0) == 22) {
   label = 0;
   HEAP32[89676] = $incptr_0;
   $67 = $incptr_0;
  }
  HEAP32[91370] = _set_fname($comment_2 + ((_strlen(HEAP32[$67 >> 2] | 0) | 0) + 3) | 0) | 0;
  $73 = $comment_2 - 2 | 0;
  tempBigInt = 10;
  HEAP8[$73] = tempBigInt;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$73 + 1 | 0] = tempBigInt;
  _unget_string($23, 0) | 0;
  _do_define(0, 0) | 0;
  _get_ch() | 0;
  _get_ch() | 0;
  _unget_ch();
  if ((_fgets($3 | 0, 65536, HEAP32[$5 >> 2] | 0) | 0) == 0) {
   label = 25;
   break;
  } else {
   $comment_0_ph34 = $comment_2;
   $colon_0_ph35 = $colon_2;
  }
 }
 if ((label | 0) == 25) {
  $81 = HEAP32[$2 >> 2] | 0;
  $82 = _strlen($81 | 0) | 0;
  $83 = $81 + $82 | 0;
  HEAP32[$4 >> 2] = $83;
  return;
 } else if ((label | 0) == 27) {
  $81 = HEAP32[$2 >> 2] | 0;
  $82 = _strlen($81 | 0) | 0;
  $83 = $81 + $82 | 0;
  HEAP32[$4 >> 2] = $83;
  return;
 }
}
function _push_or_pop($direction) {
 $direction = $direction | 0;
 var $tp = 0, $cmp = 0, $4 = 0, $12 = 0, $23 = 0, $24 = 0, $_sum = 0, $26 = 0, $30 = 0, $34 = 0, $46 = 0, $50 = 0, $s_def_0 = 0, $59 = 0, $63 = 0, $67 = 0, $prevp_0_ph = 0, $80 = 0, $82 = 0, $84 = 0, $87 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tp = sp | 0;
 $cmp = sp + 8 | 0;
 do {
  if ((_skip_ws() | 0) == 40) {
   $4 = _skip_ws() | 0;
   HEAP32[$tp >> 2] = 22344;
   if ((_scan_token($4, $tp, HEAP32[2] | 0) | 0) != 67) {
    break;
   }
   if ((_skip_ws() | 0) != 41) {
    break;
   }
   $12 = _skip_ws() | 0;
   _unget_ch();
   if (($12 | 0) != 10) {
    if ((HEAP32[4] & 1 | 0) == 0) {
     STACKTOP = sp;
     return;
    }
    _cwarn(21792, HEAP32[HEAP32[89668] >> 2] | 0, 0, 0);
    STACKTOP = sp;
    return;
   }
   $23 = _strlen(22344) | 0;
   $24 = $23 - 2 | 0;
   $_sum = $23 - 1 | 0;
   HEAP8[22344 + $_sum | 0] = 0;
   _memcpy(358776, 22345, $_sum) | 0;
   $26 = _look_prev(358776, $cmp) | 0;
   if ((HEAP32[$cmp >> 2] | 0) != 0) {
    if ((HEAP32[4] & 1 | 0) == 0) {
     STACKTOP = sp;
     return;
    }
    _cwarn(21968, 358776, 0, 0);
    STACKTOP = sp;
    return;
   }
   $30 = HEAP32[$26 >> 2] | 0;
   $34 = (HEAP8[$30 + 24 | 0] | 0) == 0;
   L19 : do {
    if (($direction | 0) == 1) {
     if ($34) {
      $46 = $23 + 29 + (_strlen(HEAP32[$30 + 12 >> 2] | 0) | 0) | 0;
      $50 = $46 + (_strlen(HEAP32[$30 + 16 >> 2] | 0) | 0) | 0;
      if ((HEAP32[682] | 0) == 3) {
       $s_def_0 = (_strlen(HEAP32[$30 + 8 >> 2] | 0) | 0) + $50 | 0;
      } else {
       $s_def_0 = $50;
      }
      $59 = _xmalloc($s_def_0) | 0;
      _memcpy($59 | 0, $30 | 0, $s_def_0) | 0;
      $63 = $59;
      HEAP32[$63 >> 2] = HEAP32[$26 >> 2];
      HEAP32[$26 >> 2] = $59;
      $prevp_0_ph = $63;
      break;
     }
     if ((HEAP32[4] & 1 | 0) == 0) {
      STACKTOP = sp;
      return;
     }
     _cwarn(22224, 358776, 0, 0);
     STACKTOP = sp;
     return;
    } else {
     if (!$34) {
      $prevp_0_ph = $26;
      break;
     }
     $67 = HEAP32[$30 >> 2] | 0;
     do {
      if (($67 | 0) != 0) {
       if ((_strcmp(358776, $67 + 25 | 0) | 0) != 0) {
        break;
       }
       HEAP32[$26 >> 2] = $67;
       _free($30);
       $prevp_0_ph = $26;
       break L19;
      }
     } while (0);
     if ((HEAP32[4] & 1 | 0) == 0) {
      STACKTOP = sp;
      return;
     }
     _cwarn(22104, 358776, 0, 0);
     STACKTOP = sp;
     return;
    }
   } while (0);
   $80 = HEAP32[$prevp_0_ph >> 2] | 0;
   if (($80 | 0) == 0) {
    STACKTOP = sp;
    return;
   } else {
    $82 = $80;
   }
   while (1) {
    $84 = _memcmp($82 + 25 | 0, 358776, $24 | 0) | 0;
    HEAP32[$cmp >> 2] = $84;
    if (($84 | 0) > 0) {
     label = 37;
     break;
    }
    $87 = $82 + 24 | 0;
    HEAP8[$87] = (HEAPU8[$87] | 0) + $direction;
    $93 = HEAP32[$82 >> 2] | 0;
    if (($93 | 0) == 0) {
     label = 38;
     break;
    } else {
     $82 = $93;
    }
   }
   if ((label | 0) == 37) {
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 38) {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((HEAP32[4] & 1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _cwarn(21888, ($direction | 0) == 1 ? 11e3 : 10864, 0, 0);
 STACKTOP = sp;
 return;
}
function _mb_init() {
 var $1 = 0, $storemerge7 = 0, $storemerge6 = 0, $storemerge = 0, $storemerge5 = 0, $27 = 0, $_off0 = 0, label = 0;
 $1 = HEAP32[692] | 0;
 switch ($1 | 0) {
 case 0:
 case 16:
 case 32:
 case 48:
  {
   $storemerge6 = 0;
   $storemerge7 = 1296;
   label = 6;
   break;
  }
 case 4096:
  {
   HEAP32[91636] = 272;
   HEAP32[91640] = 0;
   HEAP32[89600] = 6;
   $storemerge = 1792;
   label = 14;
   break;
  }
 case 128:
 case 144:
  {
   $storemerge6 = 1;
   $storemerge7 = 1808;
   label = 6;
   break;
  }
 case 256:
  {
   HEAP32[91636] = 784;
   HEAP32[91640] = 1;
   HEAP32[89600] = 16;
   label = 13;
   break;
  }
 default:
  {
   label = 19;
  }
 }
 L6 : do {
  if ((label | 0) == 6) {
   HEAP32[91636] = $storemerge7;
   HEAP32[91640] = $storemerge6;
   HEAP32[89600] = 4;
   switch ($1 | 0) {
   case 0:
    {
     HEAP32[89596] = 0;
     label = 15;
     break L6;
     break;
    }
   case 4096:
    {
     label = 16;
     break L6;
     break;
    }
   case 256:
    {
     label = 13;
     break L6;
     break;
    }
   case 144:
    {
     HEAP32[89596] = 1024;
     HEAP32[89602] = 2048;
     label = 16;
     break L6;
     break;
    }
   case 16:
    {
     HEAP32[89596] = 256;
     HEAP32[89602] = 512;
     label = 16;
     break L6;
     break;
    }
   case 32:
    {
     HEAP32[89596] = 1024;
     HEAP32[89602] = 2048;
     label = 16;
     break L6;
     break;
    }
   case 48:
    {
     HEAP32[89596] = 4096;
     HEAP32[89602] = 8192;
     label = 16;
     break L6;
     break;
    }
   case 128:
    {
     HEAP32[89596] = 256;
     HEAP32[89602] = 512;
     label = 16;
     break L6;
     break;
    }
   default:
    {
     label = 19;
     break L6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 13) {
  $storemerge = 256;
  label = 14;
 }
 L17 : do {
  if ((label | 0) == 14) {
   HEAP32[89596] = $storemerge;
   switch ($1 | 0) {
   case 16:
   case 32:
   case 48:
   case 128:
   case 144:
   case 4096:
    {
     label = 16;
     break L17;
     break;
    }
   case 0:
    {
     label = 15;
     break L17;
     break;
    }
   case 256:
    {
     break;
    }
   default:
    {
     label = 19;
     break L17;
    }
   }
   HEAP32[89598] = 16640;
  }
 } while (0);
 if ((label | 0) == 16) {
  $storemerge5 = 16384;
  label = 18;
 } else if ((label | 0) == 15) {
  $storemerge5 = 0;
  label = 18;
 }
 if ((label | 0) == 18) {
  HEAP32[89598] = $storemerge5;
  if (!(($1 | 0) == 128 | ($1 | 0) == 144 | ($1 | 0) == 256)) {
   label = 19;
  }
 }
 if ((label | 0) == 19) {
  HEAP32[91638] = 0;
 }
 if ((HEAP32[682] | 0) == 0) {
  return;
 }
 HEAP16[(HEAP32[91636] | 0) + 50 >> 1] = (HEAP32[592] | 0) != 0 | 0;
 HEAP16[(HEAP32[91636] | 0) + 52 >> 1] = (HEAP32[682] | 0) == 3 | 0;
 $27 = HEAP32[682] | 0;
 if (($27 | 0) == 3) {
  $_off0 = 96;
 } else {
  $_off0 = ($27 | 0) == 1 ? 96 : 0;
 }
 HEAP16[(HEAP32[91636] | 0) + 62 >> 1] = $_off0;
 return;
}
function _sharp($sharp_file, $flag) {
 $sharp_file = $sharp_file | 0;
 $flag = $flag | 0;
 var $1 = 0, $3 = 0, $file_017 = 0, $9 = 0, $file_0_lcssa = 0, $14 = 0, $34 = 0, $51 = 0, $61 = 0, $name_0_i = 0, $64 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($sharp_file | 0) != 0;
 $3 = $1 ? $sharp_file : HEAP32[89668] | 0;
 if (($3 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$3 + 8 >> 2] | 0) == 0) {
  $file_017 = $3;
  while (1) {
   $9 = HEAP32[$file_017 + 16 >> 2] | 0;
   if ((HEAP32[$9 + 8 >> 2] | 0) == 0) {
    $file_017 = $9;
   } else {
    $file_0_lcssa = $9;
    break;
   }
  }
 } else {
  $file_0_lcssa = $3;
 }
 $14 = HEAP32[($1 ? $sharp_file + 4 | 0 : 93328) >> 2] | 0;
 do {
  if (!((HEAP32[89545] | HEAP32[89566] | 0) != 0 | ($file_0_lcssa | 0) == 0)) {
   if (($file_0_lcssa | 0) == (HEAP32[23340] | 0) & ($14 | 0) == (HEAP32[23338] | 0)) {
    break;
   }
   HEAP32[23340] = $file_0_lcssa;
   HEAP32[23338] = $14;
   if ((HEAP32[89624] | 0) != 0) {
    FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
   }
   $34 = HEAP32[690] | 0;
   if ((HEAP32[582] | 0) == 0) {
    FUNCTION_TABLE_iiii[$34 & 31](0, 12216, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 12128, HEAP32[tempVarArgs + 8 >> 2] = $14, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
   } else {
    FUNCTION_TABLE_iiii[$34 & 31](0, 12288, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $14, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
   }
   do {
    if ((HEAP32[89594] & 8 | 0) == 0) {
     $51 = HEAP32[$file_0_lcssa + 48 >> 2] | 0;
     if ($1) {
      $name_0_i = $51;
      break;
     }
     if ((_strcmp($51 | 0, HEAP32[$file_0_lcssa + 40 >> 2] | 0) | 0) != 0) {
      $name_0_i = $51;
      break;
     }
     $61 = HEAP32[91370] | 0;
     _sprintf(22344, 21696, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[HEAP32[$file_0_lcssa + 32 >> 2] >> 2], HEAP32[tempVarArgs + 8 >> 2] = $61, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $name_0_i = 22344;
    } else {
     if ($1) {
      $name_0_i = HEAP32[$file_0_lcssa + 48 >> 2] | 0;
      break;
     } else {
      $name_0_i = HEAP32[91368] | 0;
      break;
     }
    }
   } while (0);
   $64 = HEAP32[23342] | 0;
   do {
    if (($64 | 0) == 0) {
     label = 21;
    } else {
     if ((_strcmp($name_0_i | 0, $64 | 0) | 0) == 0) {
      break;
     }
     _free($64);
     label = 21;
    }
   } while (0);
   if ((label | 0) == 21) {
    HEAP32[23342] = _save_string($name_0_i) | 0;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 21656, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $name_0_i, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 0) | 0;
  }
 } while (0);
 HEAP32[5582] = 0;
 STACKTOP = sp;
 return;
}
function _install_macro($name, $numargs, $parmnames, $repl, $prevp, $cmp, $predefine) {
 $name = $name | 0;
 $numargs = $numargs | 0;
 $parmnames = $parmnames | 0;
 $repl = $repl | 0;
 $prevp = $prevp | 0;
 $cmp = $cmp | 0;
 $predefine = $predefine | 0;
 var $1 = 0, $16 = 0, $s_parmnames_0 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $56 = 0, $59 = 0, $61 = 0, $66 = 0, $70 = 0, $83 = 0, $84 = 0, $_0 = 0, label = 0;
 $1 = HEAP32[$prevp >> 2] | 0;
 do {
  if (($cmp | 0) == 0) {
   if ((HEAP16[$1 + 4 >> 1] | 0) < -771) {
    $_0 = 0;
   } else {
    break;
   }
   return $_0 | 0;
  }
 } while (0);
 do {
  if (($parmnames | 0) == 0 | ($repl | 0) == 0) {
   label = 6;
  } else {
   if (($predefine | 0) != 0 & ($numargs | 0) > 0) {
    label = 6;
    break;
   }
   if (!(($predefine | 0) == (-771 | 0) | ($predefine | 0) == (-772 | 0) | ($predefine | 0) == 0)) {
    label = 6;
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  _cfatal(13608, $name, 0, 0);
 }
 $16 = _strlen($name | 0) | 0;
 if ((HEAP32[682] | 0) == 3) {
  $s_parmnames_0 = (_strlen($parmnames | 0) | 0) + 1 | 0;
 } else {
  $s_parmnames_0 = 0;
 }
 $24 = (_strlen($repl | 0) | 0) + 1 | 0;
 $25 = $16 + 28 | 0;
 $26 = $s_parmnames_0 + $25 | 0;
 $28 = _xmalloc($24 + $26 | 0) | 0;
 $29 = $28;
 $30 = ($cmp | 0) != 0;
 do {
  if ($30) {
   label = 12;
  } else {
   if ((HEAP32[592] | 0) != 0) {
    if ((HEAP8[(HEAP32[$prevp >> 2] | 0) + 24 | 0] | 0) != 0) {
     label = 12;
     break;
    }
   }
   HEAP32[$28 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$prevp >> 2] = $29;
   _free($1);
  }
 } while (0);
 if ((label | 0) == 12) {
  HEAP32[$28 >> 2] = $1;
  HEAP32[$prevp >> 2] = $29;
 }
 HEAP16[$28 + 4 >> 1] = ($predefine | 0) != 0 ? $predefine : $numargs;
 do {
  if ((HEAP32[592] | 0) == 0) {
   $66 = $28 + $25 | 0;
   HEAP32[$28 + 12 >> 2] = $66;
   $70 = $66;
  } else {
   HEAP8[$28 + 24 | 0] = 0;
   $56 = $28 + $25 | 0;
   HEAP32[$28 + 8 >> 2] = $56;
   $59 = $28 + $26 | 0;
   $61 = $28 + 12 | 0;
   HEAP32[$61 >> 2] = $59;
   if ((HEAP32[682] | 0) != 3) {
    $70 = $59;
    break;
   }
   _memcpy($56 | 0, $parmnames | 0, $s_parmnames_0) | 0;
   $70 = HEAP32[$61 >> 2] | 0;
  }
 } while (0);
 _memcpy($28 + 25 | 0, $name | 0, $16 + 1 | 0) | 0;
 _memcpy($70 | 0, $repl | 0, $24) | 0;
 HEAP32[$28 + 16 >> 2] = HEAP32[91368];
 HEAP32[$28 + 20 >> 2] = HEAP32[23332];
 if ((HEAP32[592] | 0) == 0 | $30 ^ 1) {
  $_0 = $29;
  return $_0 | 0;
 }
 $83 = (HEAP32[89562] | 0) + 1 | 0;
 HEAP32[89562] = $83;
 $84 = HEAP32[590] | 0;
 if (!(($83 | 0) == ($84 + 1 | 0) & ($84 | 0) != 0)) {
  $_0 = $29;
  return $_0 | 0;
 }
 if ((HEAP32[4] & 4 | 0) == 0) {
  $_0 = $29;
  return $_0 | 0;
 }
 _cwarn(13504, 0, $84, 0);
 $_0 = $29;
 return $_0 | 0;
}
function _scan_ucn($cnt, $out) {
 $cnt = $cnt | 0;
 $out = $out | 0;
 var $i_035 = 0, $value_034$0 = 0, $value_034$1 = 0, $_033 = 0, $2 = 0, $15 = 0, $17 = 0, $19 = 0, $22$0 = 0, $22$1 = 0, $23 = 0, $value_0_lcssa$0 = 0, $value_0_lcssa$1 = 0, $_0_lcssa = 0, $$etemp$0$1 = 0, $$etemp$5$1 = 0, $_028 = 0, $value_0_off$0 = 0, $value_0_off$1 = 0, label = 0;
 L1 : do {
  if (($cnt | 0) > 0) {
   $_033 = $out;
   $value_034$1 = 0;
   $value_034$0 = 0;
   $i_035 = 0;
   while (1) {
    $2 = _get_ch() | 0;
    if ((_isxdigit($2 | 0) | 0) == 0) {
     break;
    }
    $15 = _tolower($2 | 0) | 0;
    $17 = $_033 + 1 | 0;
    HEAP8[$_033] = $15;
    $19 = (($15 - 48 | 0) >>> 0 > 9 >>> 0 ? -87 : -48) + $15 | 0;
    $22$0 = $19 | ($value_034$0 << 4 | 0 >>> 28);
    $22$1 = (($19 | 0) < 0 | 0 ? -1 : 0) | ($value_034$1 << 4 | $value_034$0 >>> 28);
    $23 = $i_035 + 1 | 0;
    if (($23 | 0) < ($cnt | 0)) {
     $_033 = $17;
     $value_034$1 = $22$1;
     $value_034$0 = $22$0;
     $i_035 = $23;
    } else {
     $_0_lcssa = $17;
     $value_0_lcssa$1 = $22$1;
     $value_0_lcssa$0 = $22$0;
     break L1;
    }
   }
   if ((HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) != 0) {
    _do_msg(12624, 21664, 0, 0, 0);
    HEAP32[90042] = (HEAP32[90042] | 0) + 1;
   }
   HEAP8[$_033] = 0;
   _unget_ch();
   $_028 = 0;
   return $_028 | 0;
  } else {
   $_0_lcssa = $out;
   $value_0_lcssa$1 = 0;
   $value_0_lcssa$0 = 0;
  }
 } while (0);
 if ((HEAP32[(HEAP32[89668] | 0) + 8 >> 2] | 0) == 0) {
  $_028 = $_0_lcssa;
  return $_028 | 0;
 }
 $$etemp$0$1 = 0;
 if ($value_0_lcssa$1 >>> 0 < $$etemp$0$1 >>> 0 | $value_0_lcssa$1 >>> 0 == $$etemp$0$1 >>> 0 & $value_0_lcssa$0 >>> 0 < 160 >>> 0) {
  if (($value_0_lcssa$0 | 0) == 96 & ($value_0_lcssa$1 | 0) == 0 | ($value_0_lcssa$0 | 0) == 64 & ($value_0_lcssa$1 | 0) == 0 | ($value_0_lcssa$0 | 0) == 36 & ($value_0_lcssa$1 | 0) == 0) {
   label = 10;
  }
 } else {
  label = 10;
 }
 do {
  if ((label | 0) == 10) {
   if ((HEAP32[23328] | 0) == 0) {
    $_028 = $_0_lcssa;
    return $_028 | 0;
   }
   $value_0_off$0 = _i64Add($value_0_lcssa$0, $value_0_lcssa$1, -55296, -1) | 0;
   $value_0_off$1 = tempRet0;
   $$etemp$5$1 = 0;
   if ($value_0_off$1 >>> 0 < $$etemp$5$1 >>> 0 | $value_0_off$1 >>> 0 == $$etemp$5$1 >>> 0 & $value_0_off$0 >>> 0 < 2048 >>> 0) {
    break;
   } else {
    $_028 = $_0_lcssa;
   }
   return $_028 | 0;
  }
 } while (0);
 _do_msg(12624, 21544, 0, $value_0_lcssa$0, 0);
 HEAP32[90042] = (HEAP32[90042] | 0) + 1;
 $_028 = $_0_lcssa;
 return $_028 | 0;
}
function _cnv_digraph($in) {
 $in = $in | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $_0_ph51 = 0, $count_0_ph50 = 0, $9 = 0, $10 = 0, $11 = 0, $_046 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $count_0_ph49 = 0, $count_0_ph4989 = 0, label = 0;
 $1 = _strcspn($in | 0, 13456) | 0;
 $2 = $in + $1 | 0;
 $3 = HEAP8[$2] | 0;
 if ($3 << 24 >> 24 == 0) {
  $count_0_ph4989 = 0;
  return $count_0_ph4989 | 0;
 } else {
  $count_0_ph50 = 0;
  $_0_ph51 = $in;
  $7 = $1;
  $6 = $2;
  $5 = $3;
 }
 L3 : while (1) {
  $_046 = $_0_ph51;
  $11 = $7;
  $10 = $6;
  $9 = $5;
  while (1) {
   $12 = $9 << 24 >> 24;
   $13 = $11 + 1 | 0;
   $14 = $_046 + $13 | 0;
   $15 = HEAP8[$14] | 0;
   $16 = $15 << 24 >> 24;
   if (($12 | 0) == 60) {
    if (($16 | 0) == 58) {
     label = 12;
     break;
    } else if (($16 | 0) == 37) {
     label = 11;
     break;
    }
   } else if (($12 | 0) == 58) {
    if ($15 << 24 >> 24 == 62) {
     label = 9;
     break;
    }
   } else if (($12 | 0) == 37) {
    if (($16 | 0) == 58) {
     label = 6;
     break;
    } else if (($16 | 0) == 62) {
     label = 7;
     break;
    }
   } else {
    break;
   }
   $18 = _strcspn($14 | 0, 13456) | 0;
   $19 = $_046 + ($13 + $18) | 0;
   $20 = HEAP8[$19] | 0;
   if ($20 << 24 >> 24 == 0) {
    $count_0_ph49 = $count_0_ph50;
    break L3;
   } else {
    $_046 = $14;
    $11 = $18;
    $10 = $19;
    $9 = $20;
   }
  }
  if ((label | 0) == 12) {
   label = 0;
   HEAP8[$10] = 91;
  } else if ((label | 0) == 6) {
   label = 0;
   HEAP8[$10] = 35;
  } else if ((label | 0) == 7) {
   label = 0;
   HEAP8[$10] = 125;
  } else if ((label | 0) == 9) {
   label = 0;
   HEAP8[$10] = 93;
  } else if ((label | 0) == 11) {
   label = 0;
   HEAP8[$10] = 123;
  }
  _memmove($14 | 0, $_046 + ($11 + 2) | 0, _strlen($14 | 0) | 0) | 0;
  $31 = $count_0_ph50 + 1 | 0;
  $32 = _strcspn($14 | 0, 13456) | 0;
  $33 = $_046 + ($13 + $32) | 0;
  $34 = HEAP8[$33] | 0;
  if ($34 << 24 >> 24 == 0) {
   $count_0_ph49 = $31;
   break;
  } else {
   $count_0_ph50 = $31;
   $_0_ph51 = $14;
   $7 = $32;
   $6 = $33;
   $5 = $34;
  }
 }
 if (($count_0_ph49 | 0) == 0) {
  $count_0_ph4989 = 0;
  return $count_0_ph4989 | 0;
 }
 if ((HEAP32[4] & 16 | 0) == 0) {
  $count_0_ph4989 = $count_0_ph49;
  return $count_0_ph4989 | 0;
 }
 _do_msg(12448, 13320, 0, $count_0_ph49, 0);
 $count_0_ph4989 = $count_0_ph49;
 return $count_0_ph4989 | 0;
}
function _mb_eval($seq_pp) {
 $seq_pp = $seq_pp | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $_ = 0, $seq_1 = 0, $c_0 = 0, $60 = 0, $64$0 = 0, $64$1 = 0, $81$0 = 0, $seq_2 = 0, $val_0$0 = 0, $val_0$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $1 = HEAP32[$seq_pp >> 2] | 0;
 $2 = $1 + 1 | 0;
 $3 = HEAP8[$1] | 0;
 $4 = $3 & 255;
 $5 = HEAP32[91636] | 0;
 $8 = HEAP16[$5 + ($4 << 1) >> 1] | 0;
 if (($8 & HEAP32[89596] | 0) == 0) {
  HEAP32[$seq_pp >> 2] = $2;
  $_0$1 = 0;
  $_0$0 = $3 & 255;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 }
 L5 : do {
  switch (HEAP32[692] | 0) {
  case 4096:
   {
    $60 = $1 + 2 | 0;
    $64$0 = HEAPU8[$2] | $4 << 8;
    $64$1 = 0;
    if (($8 & 512 | 0) != 0) {
     $val_0$1 = $64$1 << 8 | $64$0 >>> 24 | 0;
     $val_0$0 = HEAPU8[$60] | ($64$0 << 8 | 0 >>> 24);
     $seq_2 = $1 + 3 | 0;
     break L5;
    }
    if (($8 & 1024 | 0) == 0) {
     $val_0$1 = $64$1;
     $val_0$0 = $64$0;
     $seq_2 = $60;
     break L5;
    }
    $81$0 = HEAPU8[$60] | ($64$0 << 8 | 0 >>> 24);
    $val_0$1 = ($64$1 << 8 | $64$0 >>> 24) << 8 | $81$0 >>> 24 | 0;
    $val_0$0 = $81$0 << 8 | 0 >>> 24 | HEAPU8[$1 + 3 | 0];
    $seq_2 = $1 + 4 | 0;
    break;
   }
  case 16:
  case 32:
  case 48:
  case 128:
  case 144:
   {
    $val_0$1 = 0;
    $val_0$0 = HEAPU8[$2] | $4 << 8;
    $seq_2 = $1 + 2 | 0;
    break;
   }
  case 256:
   {
    do {
     if (($8 & 256 | 0) == 0) {
      $c_0 = $4;
      $seq_1 = $2;
     } else {
      $27 = $1 + 2 | 0;
      $28 = HEAP8[$2] | 0;
      $29 = $28 & 255;
      if ((HEAP16[$5 + ($29 << 1) >> 1] & 512) == 0) {
       $c_0 = $29;
       $seq_1 = $27;
       break;
      }
      $35 = $1 + 3 | 0;
      $36 = HEAP8[$27] | 0;
      if ((HEAP16[$5 + (($36 & 255) << 1) >> 1] & 1024) == 0) {
       $c_0 = $29;
       $seq_1 = $35;
       break;
      }
      $_ = $36 << 24 >> 24 == 40 ? $1 + 4 | 0 : $35;
      if ($28 << 24 >> 24 == 40 & $36 << 24 >> 24 == 66) {
       $val_0$1 = 0;
       $val_0$0 = 0;
       $seq_2 = $_;
       break L5;
      }
      $c_0 = HEAPU8[$_] | 0;
      $seq_1 = $_ + 1 | 0;
     }
    } while (0);
    $val_0$1 = 0;
    $val_0$0 = HEAPU8[$seq_1] | $c_0 << 8;
    $seq_2 = $seq_1 + 1 | 0;
    break;
   }
  default:
   {
    $val_0$1 = 0;
    $val_0$0 = 0;
    $seq_2 = $2;
   }
  }
 } while (0);
 HEAP32[$seq_pp >> 2] = $seq_2;
 $_0$1 = $val_0$1;
 $_0$0 = $val_0$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _dump_stack($opstack, $opp, $value, $valp) {
 $opstack = $opstack | 0;
 $opp = $opp | 0;
 $value = $value | 0;
 $valp = $valp | 0;
 var $7 = 0, $8 = 0, $10 = 0, $_01620 = 0, $18 = 0, $21 = 0, $24 = 0, $26 = 0, $31 = 0, $_018 = 0, $_idx = 0, $_idx_val$0 = 0, $_idx_val$1 = 0, $39 = 0, $43 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if ($opstack >>> 0 < $opp >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14944, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[HEAP32[89668] >> 2], tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  $7 = $opstack;
  $_01620 = $opp;
  do {
   $18 = HEAP8[$_01620 | 0] | 0;
   $21 = HEAP8[$_01620 + 1 | 0] | 0;
   $24 = HEAP8[$_01620 + 2 | 0] | 0;
   $26 = HEAP32[2552 + ($18 << 2) >> 2] | 0;
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14856, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 40 | 0, HEAP32[tempVarArgs >> 2] = ($_01620 - $7 | 0) / 3 | 0, HEAP32[tempVarArgs + 8 >> 2] = $18, HEAP32[tempVarArgs + 16 >> 2] = $21, HEAP32[tempVarArgs + 24 >> 2] = $24, HEAP32[tempVarArgs + 32 >> 2] = $26, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $_01620 = $_01620 - 3 | 0;
  } while ($_01620 >>> 0 > $opstack >>> 0);
 }
 $8 = $valp - 16 | 0;
 if ($8 >>> 0 < $value >>> 0) {
  STACKTOP = sp;
  return;
 }
 $10 = $value;
 $_018 = $valp;
 $31 = $8;
 while (1) {
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $31 - $10 >> 4, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  $_idx = $31 | 0;
  $_idx_val$0 = HEAP32[$_idx >> 2] | 0;
  $_idx_val$1 = HEAP32[$_idx + 4 >> 2] | 0;
  $39 = (HEAP32[$_018 - 16 + 8 >> 2] | 0) != 0 ? 368672 : 14376;
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](2, 14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = 368672, HEAP32[tempVarArgs + 8 >> 2] = $39, HEAP32[tempVarArgs + 16 >> 2] = $_idx_val$0, HEAP32[tempVarArgs + 24 >> 2] = $_idx_val$1, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
  $43 = $31 - 16 | 0;
  if ($43 >>> 0 < $value >>> 0) {
   break;
  } else {
   $_018 = $31;
   $31 = $43;
  }
 }
 STACKTOP = sp;
 return;
}
function _undefine($name) {
 $name = $name | 0;
 var $1 = 0, $3 = 0, $hash_012_i = 0, $np_011_i = 0, $5 = 0, $6 = 0, $7 = 0, $hash_0_lcssa_i = 0, $np_0_lcssa_i = 0, $11 = 0, $13 = 0, $prevp_0_i = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$name] | 0;
 if ($1 << 24 >> 24 == 0) {
  $np_0_lcssa_i = $name;
  $hash_0_lcssa_i = 0;
 } else {
  $np_011_i = $name;
  $hash_012_i = 0;
  $3 = $1;
  while (1) {
   $5 = $np_011_i + 1 | 0;
   $6 = ($3 << 24 >> 24) + $hash_012_i | 0;
   $7 = HEAP8[$5] | 0;
   if ($7 << 24 >> 24 == 0) {
    $np_0_lcssa_i = $5;
    $hash_0_lcssa_i = $6;
    break;
   } else {
    $np_011_i = $5;
    $hash_012_i = $6;
    $3 = $7;
   }
  }
 }
 $11 = $np_0_lcssa_i - $name | 0;
 $13 = $11 + 1 | 0;
 $prevp_0_i = 89200 + (($11 + $hash_0_lcssa_i & 1023) << 2) | 0;
 while (1) {
  $17 = HEAP32[$prevp_0_i >> 2] | 0;
  if (($17 | 0) == 0) {
   $_0 = 0;
   label = 17;
   break;
  }
  $20 = $17 + 25 | 0;
  $21 = _memcmp($20 | 0, $name | 0, $13 | 0) | 0;
  $23 = $17 | 0;
  if (($21 | 0) > -1) {
   break;
  } else {
   $prevp_0_i = $23;
  }
 }
 if ((label | 0) == 17) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 if (($21 | 0) != 0) {
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 if ((HEAP16[$17 + 4 >> 1] | 0) < -772) {
  $_0 = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 do {
  if ((HEAP32[592] | 0) != 0) {
   if ((HEAP8[$17 + 24 | 0] | 0) == 0) {
    break;
   } else {
    $_0 = 0;
   }
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 HEAP32[$prevp_0_i >> 2] = HEAP32[$23 >> 2];
 do {
  if ((HEAP32[89594] & 8 | 0) != 0) {
   if ((HEAP32[$17 + 20 >> 2] | 0) == 0) {
    break;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 13424, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[23332], HEAP32[tempVarArgs + 8 >> 2] = $20, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   HEAP32[5582] = 1;
  }
 } while (0);
 _free($17);
 if ((HEAP32[592] | 0) == 0) {
  $_0 = 1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 HEAP32[89562] = (HEAP32[89562] | 0) - 1;
 $_0 = 1;
 STACKTOP = sp;
 return $_0 | 0;
}
function _get_file($name, $src_dir, $fullname, $bufsize, $include_opt) {
 $name = $name | 0;
 $src_dir = $src_dir | 0;
 $fullname = $fullname | 0;
 $bufsize = $bufsize | 0;
 $include_opt = $include_opt | 0;
 var $1 = 0, $9 = 0, $10 = 0, $44 = 0, $45 = 0, $63 = 0, $64 = 0, $79 = 0;
 $1 = _malloc(56) | 0;
 if (($1 | 0) == 0) {
  if ((HEAP32[89594] & 128 | 0) == 0) {
   _cfatal(7968, 0, 56, 0);
   return 0;
  }
  _print_heap();
  _cfatal(7968, 0, 56, 0);
  return 0;
 }
 $9 = $1;
 $10 = _malloc($bufsize) | 0;
 if (($10 | 0) == 0) {
  if ((HEAP32[89594] & 128 | 0) == 0) {
   _cfatal(7968, 0, $bufsize, 0);
   return 0;
  }
  _print_heap();
  _cfatal(7968, 0, $bufsize, 0);
  return 0;
 }
 HEAP32[$1 + 52 >> 2] = $10;
 HEAP32[$1 >> 2] = $10;
 HEAP8[$10] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = HEAP32[89668];
 HEAP32[$1 + 20 >> 2] = HEAP32[1502];
 HEAP32[$1 + 28 >> 2] = $include_opt;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = $name;
 HEAP32[$1 + 44 >> 2] = $fullname;
 do {
  if (($name | 0) == 0) {
   HEAP32[$1 + 48 >> 2] = 0;
  } else {
   $44 = (_strlen($name | 0) | 0) + 1 | 0;
   $45 = _malloc($44) | 0;
   if (($45 | 0) != 0) {
    HEAP32[$1 + 48 >> 2] = $45;
    _strcpy($45 | 0, $name | 0) | 0;
    break;
   }
   if ((HEAP32[89594] & 128 | 0) == 0) {
    _cfatal(7968, 0, $44, 0);
    return 0;
   }
   _print_heap();
   _cfatal(7968, 0, $44, 0);
   return 0;
  }
 } while (0);
 do {
  if (($src_dir | 0) == 0) {
   HEAP32[$1 + 36 >> 2] = 0;
  } else {
   $63 = (_strlen($src_dir | 0) | 0) + 1 | 0;
   $64 = _malloc($63) | 0;
   if (($64 | 0) != 0) {
    HEAP32[$1 + 36 >> 2] = $64;
    _strcpy($64 | 0, $src_dir | 0) | 0;
    break;
   }
   if ((HEAP32[89594] & 128 | 0) == 0) {
    _cfatal(7968, 0, $63, 0);
    return 0;
   }
   _print_heap();
   _cfatal(7968, 0, $63, 0);
   return 0;
  }
 } while (0);
 $79 = HEAP32[89668] | 0;
 if (($79 | 0) == 0) {
  HEAP32[89668] = $9;
  return $9 | 0;
 }
 HEAP32[$79 + 4 >> 2] = HEAP32[23332];
 HEAP32[89668] = $9;
 return $9 | 0;
}
function _set_a_dir($dirname) {
 $dirname = $dirname | 0;
 var $1 = 0, $5 = 0, $9 = 0, $12 = 0, $18 = 0, $22 = 0, $23 = 0, $30 = 0, $31 = 0, $43 = 0, $ip_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[89674] | 0;
 do {
  if (($1 | 0) == 0) {
   HEAP32[89608] = 32;
   $5 = _xmalloc(128) | 0;
   HEAP32[89674] = $5;
   HEAP32[89672] = $5;
  } else {
   $9 = $1;
   $12 = HEAP32[89608] | 0;
   if (((HEAP32[89672] | 0) - $9 >> 2 | 0) < ($12 | 0)) {
    break;
   }
   $18 = (HEAP32[22296] | 0) - $9 >> 2;
   $22 = _xrealloc($1, $12 << 3) | 0;
   HEAP32[89674] = $22;
   $23 = HEAP32[89608] | 0;
   HEAP32[89672] = $22 + ($23 << 2);
   HEAP32[22296] = $22 + ($18 << 2);
   HEAP32[89608] = $23 << 1;
  }
 } while (0);
 if (($dirname | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $30 = _norm_path($dirname, 0, 0) | 0;
 $31 = ($30 | 0) == 0;
 do {
  if ($31 & (HEAP32[89547] | 0) != 0) {
   if ((HEAP32[89594] & 8 | 0) != 0) {
    break;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 21224, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $dirname, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
 } while (0);
 if ($31) {
  STACKTOP = sp;
  return;
 }
 $43 = HEAP32[89672] | 0;
 $ip_0 = HEAP32[89674] | 0;
 while (1) {
  if ($ip_0 >>> 0 >= $43 >>> 0) {
   label = 17;
   break;
  }
  if ((_strcasecmp(HEAP32[$ip_0 >> 2] | 0, $30 | 0) | 0) == 0) {
   break;
  } else {
   $ip_0 = $ip_0 + 4 | 0;
  }
 }
 if ((label | 0) == 17) {
  HEAP32[89672] = $43 + 4;
  HEAP32[$43 >> 2] = $30;
  STACKTOP = sp;
  return;
 }
 do {
  if ((HEAP32[89547] | 0) != 0) {
   if ((HEAP32[89594] & 8 | 0) != 0) {
    break;
   }
   FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 19928, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $30, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
  }
 } while (0);
 _free($30);
 STACKTOP = sp;
 return;
}
function _saveSetjmp(env, label, table) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[env >> 2] = setjmpId;
 while ((i | 0) < 40) {
  if ((HEAP32[table + (i << 2) >> 2] | 0) == 0) {
   HEAP32[table + (i << 2) >> 2] = setjmpId;
   HEAP32[table + ((i << 2) + 4) >> 2] = label;
   HEAP32[table + ((i << 2) + 8) >> 2] = 0;
   return 0;
  }
  i = i + 2 | 0;
 }
 _putchar(116);
 _putchar(111);
 _putchar(111);
 _putchar(32);
 _putchar(109);
 _putchar(97);
 _putchar(110);
 _putchar(121);
 _putchar(32);
 _putchar(115);
 _putchar(101);
 _putchar(116);
 _putchar(106);
 _putchar(109);
 _putchar(112);
 _putchar(115);
 _putchar(32);
 _putchar(105);
 _putchar(110);
 _putchar(32);
 _putchar(97);
 _putchar(32);
 _putchar(102);
 _putchar(117);
 _putchar(110);
 _putchar(99);
 _putchar(116);
 _putchar(105);
 _putchar(111);
 _putchar(110);
 _putchar(32);
 _putchar(99);
 _putchar(97);
 _putchar(108);
 _putchar(108);
 _putchar(44);
 _putchar(32);
 _putchar(98);
 _putchar(117);
 _putchar(105);
 _putchar(108);
 _putchar(100);
 _putchar(32);
 _putchar(119);
 _putchar(105);
 _putchar(116);
 _putchar(104);
 _putchar(32);
 _putchar(97);
 _putchar(32);
 _putchar(104);
 _putchar(105);
 _putchar(103);
 _putchar(104);
 _putchar(101);
 _putchar(114);
 _putchar(32);
 _putchar(118);
 _putchar(97);
 _putchar(108);
 _putchar(117);
 _putchar(101);
 _putchar(32);
 _putchar(102);
 _putchar(111);
 _putchar(114);
 _putchar(32);
 _putchar(77);
 _putchar(65);
 _putchar(88);
 _putchar(95);
 _putchar(83);
 _putchar(69);
 _putchar(84);
 _putchar(74);
 _putchar(77);
 _putchar(80);
 _putchar(83);
 _putchar(10);
 abort(0);
 return 0;
}
function _cat_line($del_bsl) {
 $del_bsl = $del_bsl | 0;
 var $1 = 0, $3 = 0, $4 = 0, $7 = 0, $11 = 0, $18 = 0, $21 = 0, $len_0 = 0, $23 = 0, $24 = 0, $38 = 0, $40 = 0, $41 = 0, $55 = 0, $_0 = 0;
 $1 = ($del_bsl | 0) != 0;
 $3 = HEAP32[89668] | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if ($1) {
  HEAP32[$3 >> 2] = $4 - 2;
  $7 = HEAP32[89668] | 0;
  $11 = HEAP32[$7 + 52 >> 2] | 0;
  $len_0 = (HEAP32[$7 >> 2] | 0) - $11 | 0;
  $21 = $11;
 } else {
  HEAP8[$4] = HEAP8[21048] | 0;
  HEAP8[$4 + 1 | 0] = HEAP8[21049] | 0;
  HEAP8[$4 + 2 | 0] = HEAP8[21050] | 0;
  $18 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
  $len_0 = _strlen($18 | 0) | 0;
  $21 = $18;
 }
 $23 = (_strlen($21 | 0) | 0) + 1 | 0;
 $24 = _malloc($23) | 0;
 if (($24 | 0) == 0) {
  if ((HEAP32[89594] & 128 | 0) == 0) {
   _cfatal(7968, 0, $23, 0);
   return 0;
  }
  _print_heap();
  _cfatal(7968, 0, $23, 0);
  return 0;
 }
 _memcpy($24 | 0, $21 | 0, $23) | 0;
 if ((_get_line(0) | 0) == 0) {
  _free($24);
  $_0 = 0;
  return $_0 | 0;
 }
 $38 = HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0;
 $40 = (_strlen($38 | 0) | 0) + 1 | 0;
 $41 = _malloc($40) | 0;
 if (($41 | 0) != 0) {
  _memcpy($41 | 0, $38 | 0, $40) | 0;
  _memcpy($38 | 0, $24 | 0, $len_0) | 0;
  _strcpy((HEAP32[(HEAP32[89668] | 0) + 52 >> 2] | 0) + $len_0 | 0, $41 | 0) | 0;
  _free($24);
  _free($41);
  $55 = HEAP32[89668] | 0;
  HEAP32[$55 >> 2] = (HEAP32[$55 + 52 >> 2] | 0) + ($1 ? $len_0 : $len_0 - 2 | 0);
  $_0 = HEAP32[HEAP32[89668] >> 2] | 0;
  return $_0 | 0;
 }
 if ((HEAP32[89594] & 128 | 0) == 0) {
  _cfatal(7968, 0, $40, 0);
  return 0;
 }
 _print_heap();
 _cfatal(7968, 0, $40, 0);
 return 0;
}
function _look_and_install($name, $numargs, $parmnames, $repl) {
 $name = $name | 0;
 $numargs = $numargs | 0;
 $parmnames = $parmnames | 0;
 $repl = $repl | 0;
 var $1 = 0, $3 = 0, $hash_012_i = 0, $np_011_i = 0, $5 = 0, $6 = 0, $7 = 0, $hash_0_lcssa_i = 0, $np_0_lcssa_i = 0, $11 = 0, $13 = 0, $cmp_0_load5 = 0, $prevp_0_i = 0, $17 = 0, $21 = 0, $cmp_0_load6 = 0, $24 = 0, label = 0;
 $1 = HEAP8[$name] | 0;
 if ($1 << 24 >> 24 == 0) {
  $np_0_lcssa_i = $name;
  $hash_0_lcssa_i = 0;
 } else {
  $np_011_i = $name;
  $hash_012_i = 0;
  $3 = $1;
  while (1) {
   $5 = $np_011_i + 1 | 0;
   $6 = ($3 << 24 >> 24) + $hash_012_i | 0;
   $7 = HEAP8[$5] | 0;
   if ($7 << 24 >> 24 == 0) {
    $np_0_lcssa_i = $5;
    $hash_0_lcssa_i = $6;
    break;
   } else {
    $np_011_i = $5;
    $hash_012_i = $6;
    $3 = $7;
   }
  }
 }
 $11 = $np_0_lcssa_i - $name | 0;
 $13 = $11 + 1 | 0;
 $prevp_0_i = 89200 + (($11 + $hash_0_lcssa_i & 1023) << 2) | 0;
 $cmp_0_load5 = -1;
 while (1) {
  $17 = HEAP32[$prevp_0_i >> 2] | 0;
  if (($17 | 0) == 0) {
   $cmp_0_load6 = $cmp_0_load5;
   label = 7;
   break;
  }
  $21 = _memcmp($17 + 25 | 0, $name | 0, $13 | 0) | 0;
  if (($21 | 0) > -1) {
   $cmp_0_load6 = $21;
   label = 8;
   break;
  } else {
   $prevp_0_i = $17 | 0;
   $cmp_0_load5 = $21;
  }
 }
 if ((label | 0) == 7) {
  $24 = _install_macro($name, $numargs, $parmnames, $repl, $prevp_0_i, $cmp_0_load6, 0) | 0;
  return $24 | 0;
 } else if ((label | 0) == 8) {
  $24 = _install_macro($name, $numargs, $parmnames, $repl, $prevp_0_i, $cmp_0_load6, 0) | 0;
  return $24 | 0;
 }
 return 0;
}
function _cnv_trigraph($in) {
 $in = $in | 0;
 var $1 = 0, $3 = 0, $count_0_ph15 = 0, $5 = 0, $6 = 0, $_1 = 0, $9 = 0, $10 = 0, $memchr = 0, $_0_be = 0, $15 = 0, $22 = 0, $23 = 0, $count_0_ph14 = 0, $count_0_ph1419 = 0;
 $1 = _strchr($in | 0, 63) | 0;
 if (($1 | 0) == 0) {
  $count_0_ph1419 = 0;
  return $count_0_ph1419 | 0;
 } else {
  $count_0_ph15 = 0;
  $3 = $1;
 }
 L3 : while (1) {
  $5 = $3;
  while (1) {
   $6 = $5 + 1 | 0;
   if ((HEAP8[$6] | 0) == 63) {
    $_1 = $6;
    while (1) {
     $9 = $_1 + 1 | 0;
     $10 = HEAP8[$9] | 0;
     if ($10 << 24 >> 24 == 63) {
      $_1 = $9;
     } else {
      break;
     }
    }
    $memchr = _memchr(13672, $10 << 24 >> 24 | 0, 10) | 0;
    if (($memchr | 0) == 0) {
     $_0_be = $9;
    } else {
     break;
    }
   } else {
    $_0_be = $6;
   }
   $15 = _strchr($_0_be | 0, 63) | 0;
   if (($15 | 0) == 0) {
    $count_0_ph14 = $count_0_ph15;
    break L3;
   } else {
    $5 = $15;
   }
  }
  HEAP8[$_1 - 1 | 0] = HEAP8[$memchr + 10 | 0] | 0;
  _memmove($_1 | 0, $_1 + 2 | 0, _strlen($9 | 0) | 0) | 0;
  $22 = $count_0_ph15 + 1 | 0;
  $23 = _strchr($_1 | 0, 63) | 0;
  if (($23 | 0) == 0) {
   $count_0_ph14 = $22;
   break;
  } else {
   $count_0_ph15 = $22;
   $3 = $23;
  }
 }
 if (($count_0_ph14 | 0) == 0) {
  $count_0_ph1419 = 0;
  return $count_0_ph1419 | 0;
 }
 if ((HEAP32[4] & 16 | 0) == 0) {
  $count_0_ph1419 = $count_0_ph14;
  return $count_0_ph1419 | 0;
 }
 _do_msg(12448, 13552, 0, $count_0_ph14, 0);
 $count_0_ph1419 = $count_0_ph14;
 return $count_0_ph1419 | 0;
}
function _set_fname($filename) {
 $filename = $filename | 0;
 var $1 = 0, $4 = 0, $7 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $fnamep_011 = 0, $36 = 0, $38 = 0, $40 = 0, $46 = 0, $_0 = 0;
 $1 = HEAP32[89998] | 0;
 L1 : do {
  if (($1 | 0) == 0) {
   HEAP32[89612] = 256;
   $4 = _xmalloc(2048) | 0;
   HEAP32[89998] = $4;
   HEAP32[9e4] = $4;
   $38 = _strlen($filename | 0) | 0;
  } else {
   $7 = HEAP32[9e4] | 0;
   $12 = HEAP32[89612] | 0;
   if (($7 - $1 >> 3 | 0) < ($12 | 0)) {
    $24 = $1;
    $23 = $7;
   } else {
    $18 = _xrealloc($1, $12 << 4) | 0;
    HEAP32[89998] = $18;
    $19 = HEAP32[89612] | 0;
    $20 = $18 + ($19 << 3) | 0;
    HEAP32[9e4] = $20;
    HEAP32[89612] = $19 << 1;
    $24 = $18;
    $23 = $20;
   }
   $25 = _strlen($filename | 0) | 0;
   if ($24 >>> 0 < $23 >>> 0) {
    $fnamep_011 = $24;
   } else {
    $38 = $25;
    break;
   }
   while (1) {
    if ((HEAP32[$fnamep_011 + 4 >> 2] | 0) == ($25 | 0)) {
     if ((_strcasecmp(HEAP32[$fnamep_011 >> 2] | 0, $filename | 0) | 0) == 0) {
      $_0 = $filename;
      break;
     }
    }
    $36 = $fnamep_011 + 8 | 0;
    if ($36 >>> 0 < $23 >>> 0) {
     $fnamep_011 = $36;
    } else {
     $38 = $25;
     break L1;
    }
   }
   return $_0 | 0;
  }
 } while (0);
 $40 = _xmalloc($38 + 1 | 0) | 0;
 HEAP32[HEAP32[9e4] >> 2] = $40;
 $46 = _strcpy(HEAP32[HEAP32[9e4] >> 2] | 0, $filename | 0) | 0;
 HEAP32[(HEAP32[9e4] | 0) + 4 >> 2] = $38;
 HEAP32[9e4] = (HEAP32[9e4] | 0) + 8;
 $_0 = $46;
 return $_0 | 0;
}
function _unget_ch() {
 var $1 = 0, $3 = 0, $16 = 0, $20 = 0, $23 = 0, $file_07_i = 0, $file_08_i = 0, $45 = 0, $49 = 0, $52 = 0;
 $1 = HEAP32[89668] | 0;
 if (HEAP8[2896] | 0) {
  $3 = $1 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
  return;
 }
 do {
  if (($1 | 0) != 0) {
   do {
    if ((HEAP32[682] | 0) == 9) {
     if ((HEAP32[$1 + 8 >> 2] | 0) == 0) {
      break;
     }
     $16 = HEAP32[89666] | 0;
     if (($16 | 0) == 1) {
      _cfatal(13160, 0, 0, 0);
     } else if (($16 | 0) != 2) {
      break;
     }
     HEAP32[89666] = 1;
     return;
    }
   } while (0);
   $20 = $1 | 0;
   HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) - 1;
   $23 = HEAP32[89668] | 0;
   if ((HEAP32[$23 >> 2] | 0) >>> 0 >= (HEAP32[$23 + 52 >> 2] | 0) >>> 0) {
    break;
   }
   _cfatal(13024, 0, 0, 0);
  }
 } while (0);
 if ((HEAP32[89594] & 64 | 0) == 0) {
  return;
 }
 FUNCTION_TABLE_iii[HEAP32[686] & 15](9944, 2) | 0;
 FUNCTION_TABLE_iii[HEAP32[686] & 15](9760, 2) | 0;
 FUNCTION_TABLE_iii[HEAP32[686] & 15](12920, 2) | 0;
 FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
 $file_07_i = HEAP32[89668] | 0;
 if (($file_07_i | 0) == 0) {
  return;
 } else {
  $file_08_i = $file_07_i;
 }
 do {
  $45 = HEAP32[$file_08_i + 40 >> 2] | 0;
  if (($45 | 0) == 0) {
   $49 = HEAP32[$file_08_i + 48 >> 2] | 0;
   $52 = ($49 | 0) == 0 ? 14e3 : $49;
  } else {
   $52 = $45;
  }
  _dump_string($52, HEAP32[$file_08_i >> 2] | 0);
  $file_08_i = HEAP32[$file_08_i + 16 >> 2] | 0;
 } while (($file_08_i | 0) != 0);
 return;
}
function _close_macro_inf($out_p, $m_num, $in_src_n) {
 $out_p = $out_p | 0;
 $m_num = $m_num | 0;
 $in_src_n = $in_src_n | 0;
 var $e_line_col = 0, $1 = 0, $3 = 0, $_0 = 0, $17 = 0, $20 = 0, $35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $e_line_col = sp | 0;
 $1 = HEAP32[89620] | 0;
 HEAP8[$out_p] = 24;
 $3 = $out_p + 2 | 0;
 HEAP8[$out_p + 1 | 0] = 2;
 if ((HEAP32[89547] | 0) == 0) {
  $_0 = $3;
 } else {
  HEAP8[$3] = (($m_num | 0) / 255 | 0) + 1;
  HEAP8[$out_p + 3 | 0] = (($m_num | 0) % 255 | 0) + 1;
  $_0 = $out_p + 4 | 0;
 }
 HEAP8[$_0] = 0;
 _get_ch() | 0;
 _unget_ch();
 $17 = HEAP32[89668] | 0;
 $20 = (HEAP32[$17 + 8 >> 2] | 0) == 0;
 if ($20 & ($in_src_n | 0) == 0) {
  HEAP32[$1 + ($m_num * 36 | 0) + 24 >> 2] = 0;
  HEAP32[$1 + ($m_num * 36 | 0) + 28 >> 2] = 0;
  STACKTOP = sp;
  return $_0 | 0;
 }
 if ($20) {
  $35 = HEAP32[89680] | 0;
  HEAP32[$e_line_col >> 2] = HEAP32[$35 + ($in_src_n << 4) + 8 >> 2];
  HEAP32[$e_line_col + 4 >> 2] = HEAP32[$35 + ($in_src_n << 4) + 12 >> 2];
 } else {
  HEAP32[$e_line_col >> 2] = HEAP32[23332];
  HEAP32[$e_line_col + 4 >> 2] = (HEAP32[$17 >> 2] | 0) - (HEAP32[$17 + 52 >> 2] | 0);
 }
 _get_src_location($e_line_col) | 0;
 HEAP32[$1 + ($m_num * 36 | 0) + 24 >> 2] = HEAP32[$e_line_col >> 2];
 HEAP32[$1 + ($m_num * 36 | 0) + 28 >> 2] = HEAP32[$e_line_col + 4 >> 2];
 STACKTOP = sp;
 return $_0 | 0;
}
function _look_id($name) {
 $name = $name | 0;
 var $1 = 0, $3 = 0, $hash_012_i = 0, $np_011_i = 0, $5 = 0, $6 = 0, $7 = 0, $hash_0_lcssa_i = 0, $np_0_lcssa_i = 0, $11 = 0, $13 = 0, $cmp_0_load4 = 0, $prevp_0_i = 0, $17 = 0, $21 = 0, $cmp_0_load5 = 0, $26 = 0;
 $1 = HEAP8[$name] | 0;
 if ($1 << 24 >> 24 == 0) {
  $np_0_lcssa_i = $name;
  $hash_0_lcssa_i = 0;
 } else {
  $np_011_i = $name;
  $hash_012_i = 0;
  $3 = $1;
  while (1) {
   $5 = $np_011_i + 1 | 0;
   $6 = ($3 << 24 >> 24) + $hash_012_i | 0;
   $7 = HEAP8[$5] | 0;
   if ($7 << 24 >> 24 == 0) {
    $np_0_lcssa_i = $5;
    $hash_0_lcssa_i = $6;
    break;
   } else {
    $np_011_i = $5;
    $hash_012_i = $6;
    $3 = $7;
   }
  }
 }
 $11 = $np_0_lcssa_i - $name | 0;
 $13 = $11 + 1 | 0;
 $prevp_0_i = 89200 + (($11 + $hash_0_lcssa_i & 1023) << 2) | 0;
 $cmp_0_load4 = -1;
 while (1) {
  $17 = HEAP32[$prevp_0_i >> 2] | 0;
  if (($17 | 0) == 0) {
   $cmp_0_load5 = $cmp_0_load4;
   break;
  }
  $21 = _memcmp($17 + 25 | 0, $name | 0, $13 | 0) | 0;
  if (($21 | 0) > -1) {
   $cmp_0_load5 = $21;
   break;
  } else {
   $prevp_0_i = $17 | 0;
   $cmp_0_load4 = $21;
  }
 }
 $26 = ($cmp_0_load5 | 0) == 0;
 if ((HEAP32[592] | 0) == 0) {
  return ($26 ? $17 : 0) | 0;
 }
 if ($26) {
  return ((HEAP8[$17 + 24 | 0] | 0) == 0 ? $17 : 0) | 0;
 } else {
  return 0;
 }
 return 0;
}
function _mb_read_2byte($c1, $in_pp, $out_pp) {
 $c1 = $c1 | 0;
 $in_pp = $in_pp | 0;
 $out_pp = $out_pp | 0;
 var $len_0 = 0, $in_p_0 = 0, $out_p_0 = 0, $12 = 0, $13 = 0, $14 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $error_0 = 0, $len_1 = 0, $in_p_1 = 0, $out_p_1 = 0, $38 = 0, $_0 = 0;
 if ((HEAP16[(HEAP32[91636] | 0) + (($c1 & 255) << 1) >> 1] & HEAP32[89596] | 0) == 0) {
  $_0 = 32768;
  return $_0 | 0;
 }
 $out_p_0 = HEAP32[$out_pp >> 2] | 0;
 $in_p_0 = HEAP32[$in_pp >> 2] | 0;
 $len_0 = 0;
 while (1) {
  $12 = $in_p_0 + 1 | 0;
  $13 = HEAP8[$in_p_0] | 0;
  $14 = $out_p_0 + 1 | 0;
  HEAP8[$out_p_0] = $13;
  if ((HEAP16[(HEAP32[91636] | 0) + (($13 & 255) << 1) >> 1] & HEAP32[89602] | 0) == 0) {
   $out_p_1 = $14;
   $in_p_1 = $12;
   $len_1 = $len_0;
   $error_0 = 1;
   break;
  }
  $24 = $len_0 + 1 | 0;
  $25 = $in_p_0 + 2 | 0;
  $26 = HEAP8[$12] | 0;
  $27 = $out_p_0 + 2 | 0;
  HEAP8[$14] = $26;
  if ((HEAP16[(HEAP32[91636] | 0) + (($26 & 255) << 1) >> 1] & HEAP32[89596] | 0) == 0) {
   $out_p_1 = $27;
   $in_p_1 = $25;
   $len_1 = $24;
   $error_0 = 0;
   break;
  } else {
   $out_p_0 = $27;
   $in_p_0 = $25;
   $len_0 = $24;
  }
 }
 HEAP32[$in_pp >> 2] = $in_p_1 - 1;
 $38 = $out_p_1 - 1 | 0;
 HEAP8[$38] = 0;
 HEAP32[$out_pp >> 2] = $38;
 $_0 = $error_0 ? $len_1 | 32768 : $len_1;
 return $_0 | 0;
}
function _get_src_location($p_line_col) {
 $p_line_col = $p_line_col | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cols_0 = 0, $12 = 0, $col_2 = 0, $line_1 = 0, $cols_0_1 = 0, $28 = 0, $col_2_1 = 0, $line_1_1 = 0, $37 = 0;
 $1 = $p_line_col | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $p_line_col + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if ((HEAP32[91377] | 0) == ($2 | 0)) {
  $cols_0 = 365516;
  while (1) {
   if ((HEAP32[$cols_0 >> 2] | 0) >>> 0 < $4 >>> 0) {
    $cols_0 = $cols_0 + 4 | 0;
   } else {
    break;
   }
  }
  $12 = $cols_0 - 4 | 0;
  $line_1 = (HEAP32[91376] | 0) + ($12 - 365512 >> 2) | 0;
  $col_2 = $4 - (HEAP32[$12 >> 2] | 0) | 0;
 } else {
  $line_1 = $2;
  $col_2 = $4;
 }
 if ((HEAP32[91643] | 0) == ($line_1 | 0)) {
  $cols_0_1 = 366580;
 } else {
  $line_1_1 = $line_1;
  $col_2_1 = $col_2;
  HEAP32[$1 >> 2] = $line_1_1;
  $37 = $col_2_1 + 1 | 0;
  HEAP32[$3 >> 2] = $37;
  return $p_line_col | 0;
 }
 while (1) {
  if ((HEAP32[$cols_0_1 >> 2] | 0) >>> 0 < $col_2 >>> 0) {
   $cols_0_1 = $cols_0_1 + 4 | 0;
  } else {
   break;
  }
 }
 $28 = $cols_0_1 - 4 | 0;
 $line_1_1 = (HEAP32[91642] | 0) + ($28 - 366576 >> 2) | 0;
 $col_2_1 = $col_2 - (HEAP32[$28 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = $line_1_1;
 $37 = $col_2_1 + 1 | 0;
 HEAP32[$3 >> 2] = $37;
 return $p_line_col | 0;
}
function _look_prev($name, $cmp) {
 $name = $name | 0;
 $cmp = $cmp | 0;
 var $1 = 0, $3 = 0, $hash_012 = 0, $np_011 = 0, $5 = 0, $6 = 0, $7 = 0, $hash_0_lcssa = 0, $np_0_lcssa = 0, $11 = 0, $13 = 0, $prevp_0 = 0, $17 = 0, $21 = 0, label = 0;
 $1 = HEAP8[$name] | 0;
 if ($1 << 24 >> 24 == 0) {
  $np_0_lcssa = $name;
  $hash_0_lcssa = 0;
 } else {
  $np_011 = $name;
  $hash_012 = 0;
  $3 = $1;
  while (1) {
   $5 = $np_011 + 1 | 0;
   $6 = ($3 << 24 >> 24) + $hash_012 | 0;
   $7 = HEAP8[$5] | 0;
   if ($7 << 24 >> 24 == 0) {
    $np_0_lcssa = $5;
    $hash_0_lcssa = $6;
    break;
   } else {
    $np_011 = $5;
    $hash_012 = $6;
    $3 = $7;
   }
  }
 }
 $11 = $np_0_lcssa - $name | 0;
 $13 = $11 + 1 | 0;
 HEAP32[$cmp >> 2] = -1;
 $prevp_0 = 89200 + (($11 + $hash_0_lcssa & 1023) << 2) | 0;
 while (1) {
  $17 = HEAP32[$prevp_0 >> 2] | 0;
  if (($17 | 0) == 0) {
   label = 7;
   break;
  }
  $21 = _memcmp($17 + 25 | 0, $name | 0, $13 | 0) | 0;
  HEAP32[$cmp >> 2] = $21;
  if (($21 | 0) > -1) {
   label = 8;
   break;
  } else {
   $prevp_0 = $17 | 0;
  }
 }
 if ((label | 0) == 7) {
  return $prevp_0 | 0;
 } else if ((label | 0) == 8) {
  return $prevp_0 | 0;
 }
 return 0;
}
function _usage($opt) {
 $opt = $opt | 0;
 var $mes_i = 0, $mes = 0, $2 = 0, $6 = 0, $9 = 0, $15 = 0, $mpp_02_i = 0, $17 = 0, $19 = 0, $21 = 0, $mpp_03 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 248 | 0;
 $mes_i = sp | 0;
 $mes = sp + 56 | 0;
 _memcpy($mes | 0, 80, 192) | 0;
 $2 = $mes | 0;
 if (($opt | 0) != 63) {
  $6 = HEAP32[89592] | 0;
  $9 = ($6 | 0) != 0 ? $6 : HEAP32[676] | 0;
  FUNCTION_TABLE_iiii[HEAP32[690] & 31](1, 15360, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $opt, HEAP32[tempVarArgs + 8 >> 2] = $9, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 _memcpy($mes_i | 0, 24, 56) | 0;
 $mpp_02_i = $mes_i | 0;
 $15 = 15352;
 while (1) {
  $17 = $mpp_02_i + 4 | 0;
  FUNCTION_TABLE_iii[HEAP32[686] & 15]($15, 1) | 0;
  $19 = HEAP32[$17 >> 2] | 0;
  if (($19 | 0) == 0) {
   $mpp_03 = $2;
   $21 = 18840;
   break;
  } else {
   $mpp_02_i = $17;
   $15 = $19;
  }
 }
 do {
  $mpp_03 = $mpp_03 + 4 | 0;
  FUNCTION_TABLE_iii[HEAP32[686] & 15]($21, 1) | 0;
  $21 = HEAP32[$mpp_03 >> 2] | 0;
 } while (($21 | 0) != 0);
 _longjmp(360176, -1 | 0);
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}
function _overflow($op_name, $valpp, $ll_overflow) {
 $op_name = $op_name | 0;
 $valpp = $valpp | 0;
 $ll_overflow = $ll_overflow | 0;
 var $1 = 0, $5 = 0, $7 = 0;
 $1 = HEAP32[592] | 0;
 $5 = (HEAP32[23336] | 0) == 0;
 if (($1 | 0) != 0 & ($ll_overflow | 0) == 0) {
  $7 = HEAP32[4] | 0;
  do {
   if ($5) {
    if (($7 & 1 | 0) != 0) {
     break;
    }
    return;
   } else {
    if (($7 & 8 | 0) != 0) {
     break;
    }
    return;
   }
  } while (0);
  _cwarn(13056, $op_name, 0, 12976);
  return;
 }
 if (!$5) {
  if ((HEAP32[4] & 8 | 0) == 0) {
   return;
  }
  _cwarn(13056, $op_name, 0, 12504);
  return;
 }
 do {
  if (($1 | 0) != 0) {
   if ((HEAP32[(HEAP32[$valpp >> 2] | 0) + 8 >> 2] | 0) != 0) {
    break;
   }
   if ((HEAP32[4] & 1 | 0) == 0) {
    return;
   }
   _cwarn(13056, $op_name, 0, 0);
   return;
  }
 } while (0);
 _cerror(13056, $op_name, 0, 0);
 HEAP32[(HEAP32[$valpp >> 2] | 0) + 8 >> 2] = -1;
 return;
}
function _deref_syml($slbuf1, $slbuf2, $chk_start) {
 $slbuf1 = $slbuf1 | 0;
 $slbuf2 = $slbuf2 | 0;
 $chk_start = $chk_start | 0;
 var $1 = 0, $3 = 0, $4 = 0, $7 = 0, $_0_be = 0, $_1 = 0;
 $1 = _strchr($chk_start | 0, 47) | 0;
 if (($1 | 0) == 0) {
  return;
 } else {
  $3 = $1;
 }
 do {
  HEAP8[$3] = 0;
  $4 = _readlink($slbuf1 | 0, $slbuf2 | 0, 4096) | 0;
  do {
   if (($4 | 0) > 0) {
    $7 = _strrchr($slbuf1 | 0, 47) | 0;
    HEAP8[$3] = 47;
    _strcpy($slbuf2 + $4 | 0, $3 | 0) | 0;
    if ((HEAP8[$slbuf2] | 0) == 47) {
     _strcpy($slbuf1 | 0, $slbuf2 | 0) | 0;
     $_0_be = $slbuf1 + ($4 + 1) | 0;
     break;
    } else {
     $_1 = ($7 | 0) == 0 ? $slbuf1 : $7 + 1 | 0;
     _strcpy($_1 | 0, $slbuf2 | 0) | 0;
     $_0_be = $_1 + $4 | 0;
     break;
    }
   } else {
    HEAP8[$3] = 47;
    $_0_be = $3 + 1 | 0;
   }
  } while (0);
  $3 = _strchr($_0_be | 0, 47) | 0;
 } while (($3 | 0) != 0);
 return;
}
function _un_predefine($clearall) {
 $clearall = $clearall | 0;
 var $2 = 0, $3 = 0, $17 = 0, $26 = 0, $35 = 0;
 $2 = _look_id(18296) | 0;
 $3 = ($2 | 0) == 0;
 if (($clearall | 0) == 0) {
  if ($3) {
   return;
  }
  if ((HEAP16[$2 + 4 >> 1] | 0) <= -773) {
   return;
  }
  _undefine(18296) | 0;
  return;
 }
 do {
  if (!$3) {
   if ((HEAP16[$2 + 4 >> 1] | 0) <= -773) {
    break;
   }
   _undefine(18296) | 0;
  }
 } while (0);
 $17 = _look_id(16768) | 0;
 do {
  if (($17 | 0) != 0) {
   if ((HEAP16[$17 + 4 >> 1] | 0) <= -773) {
    break;
   }
   _undefine(16768) | 0;
  }
 } while (0);
 $26 = _look_id(16e3) | 0;
 do {
  if (($26 | 0) != 0) {
   if ((HEAP16[$26 + 4 >> 1] | 0) <= -773) {
    break;
   }
   _undefine(16e3) | 0;
  }
 } while (0);
 $35 = _look_id(15336) | 0;
 if (($35 | 0) == 0) {
  return;
 }
 if ((HEAP16[$35 + 4 >> 1] | 0) <= -773) {
  return;
 }
 _undefine(15336) | 0;
 return;
}
function _dump_def($comment, $K_opt) {
 $comment = $comment | 0;
 $K_opt = $K_opt | 0;
 var $5 = 0, $symp_08 = 0, $7 = 0, $dp_0 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 _sharp(0, 0);
 if (($comment | 0) != 0) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](12176, 0) | 0;
 }
 $5 = ($K_opt | 0) == 0;
 $symp_08 = 89200;
 do {
  $7 = HEAP32[$symp_08 >> 2] | 0;
  if (($7 | 0) != 0) {
   $dp_0 = $7;
   do {
    if ($5) {
     _dump_a_def(0, $dp_0, 0, $comment, HEAP32[89990] | 0);
    } else {
     FUNCTION_TABLE_iiii[HEAP32[690] & 31](0, 12112, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $dp_0 + 25, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
    }
    $dp_0 = HEAP32[$dp_0 >> 2] | 0;
   } while (($dp_0 | 0) != 0);
  }
  $symp_08 = $symp_08 + 4 | 0;
 } while ($symp_08 >>> 0 < 93296 >>> 0);
 HEAP32[5582] = 1;
 STACKTOP = sp;
 return;
}
function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $14 = 0, $17 = 0, $23 = 0, $28 = 0, $33 = 0, $mem_0 = 0;
 if (($oldmem | 0) == 0) {
  $mem_0 = _malloc($bytes) | 0;
  return $mem_0 | 0;
 }
 if ($bytes >>> 0 > 4294967231 >>> 0) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem_0 = 0;
  return $mem_0 | 0;
 }
 if ($bytes >>> 0 < 11 >>> 0) {
  $14 = 16;
 } else {
  $14 = $bytes + 11 & -8;
 }
 $17 = _try_realloc_chunk($oldmem - 8 | 0, $14) | 0;
 if (($17 | 0) != 0) {
  $mem_0 = $17 + 8 | 0;
  return $mem_0 | 0;
 }
 $23 = _malloc($bytes) | 0;
 if (($23 | 0) == 0) {
  $mem_0 = 0;
  return $mem_0 | 0;
 }
 $28 = HEAP32[$oldmem - 4 >> 2] | 0;
 $33 = ($28 & -8) - (($28 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($23 | 0, $oldmem | 0, $33 >>> 0 < $bytes >>> 0 ? $33 : $bytes) | 0;
 _free($oldmem);
 $mem_0 = $23;
 return $mem_0 | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return (tempRet0 = tempRet0, $10$0) | 0;
}
function _dump_unget($why) {
 $why = $why | 0;
 var $file_07 = 0, $file_08 = 0, $14 = 0, $18 = 0, $21 = 0;
 FUNCTION_TABLE_iii[HEAP32[686] & 15](9944, 2) | 0;
 if (($why | 0) != 0) {
  FUNCTION_TABLE_iii[HEAP32[686] & 15](9760, 2) | 0;
  FUNCTION_TABLE_iii[HEAP32[686] & 15]($why, 2) | 0;
 }
 FUNCTION_TABLE_iii[HEAP32[688] & 15](10, 2) | 0;
 $file_07 = HEAP32[89668] | 0;
 if (($file_07 | 0) == 0) {
  return;
 } else {
  $file_08 = $file_07;
 }
 do {
  $14 = HEAP32[$file_08 + 40 >> 2] | 0;
  if (($14 | 0) == 0) {
   $18 = HEAP32[$file_08 + 48 >> 2] | 0;
   $21 = ($18 | 0) == 0 ? 14e3 : $18;
  } else {
   $21 = $14;
  }
  _dump_string($21, HEAP32[$file_08 >> 2] | 0);
  $file_08 = HEAP32[$file_08 + 16 >> 2] | 0;
 } while (($file_08 | 0) != 0);
 return;
}
function _is_macro($cp) {
 $cp = $cp | 0;
 var $1 = 0, $5 = 0, $9 = 0, $_0 = 0;
 $1 = _look_id(358776) | 0;
 if (($1 | 0) == 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $5 = HEAP16[$1 + 4 >> 1] | 0;
 if (!($5 << 16 >> 16 > -1 | $5 << 16 >> 16 == -769)) {
  $_0 = $1;
  return $_0 | 0;
 }
 $9 = _squeeze_ws($cp, 0, 0) | 0;
 do {
  if (($9 | 0) == 0) {
   _unget_string(9640, 0) | 0;
  } else {
   if (!((HEAP32[592] | 0) != 0 & ($9 | 0) == 28)) {
    _unget_ch();
   }
   if (($9 | 0) == 40) {
    $_0 = $1;
   } else {
    break;
   }
   return $_0 | 0;
  }
 } while (0);
 if ((HEAP32[592] | 0) != 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 if ((HEAP32[4] & 8 | 0) == 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 _cwarn(14584, $1 + 25 | 0, 0, 0);
 $_0 = 0;
 return $_0 | 0;
}
function _add_file($fp, $src_dir, $filename, $fullname, $include_opt) {
 $fp = $fp | 0;
 $src_dir = $src_dir | 0;
 $filename = $filename | 0;
 $fullname = $fullname | 0;
 $include_opt = $include_opt | 0;
 var $1 = 0, $17 = 0;
 $1 = _set_fname($filename) | 0;
 HEAP32[(_get_file($1, $src_dir, _set_fname($fullname) | 0, 65536, $include_opt) | 0) + 8 >> 2] = $fp;
 HEAP32[91370] = $1;
 if ((HEAP32[89670] | 0) > 255) {
  _cfatal(12344, 0, 256, 0);
 }
 do {
  if ((HEAP32[592] | 0) != 0) {
   if ((HEAP32[4] & 4 | 0) == 0) {
    break;
   }
   $17 = HEAP32[589] | 0;
   if ((HEAP32[89670] | 0) != ($17 + 1 | 0)) {
    break;
   }
   _cwarn(12344, 0, $17, 0);
  }
 } while (0);
 HEAP32[89670] = (HEAP32[89670] | 0) + 1;
 return;
}
function _expanding($name, $to_be_freed) {
 $name = $name | 0;
 $to_be_freed = $to_be_freed | 0;
 var $1 = 0, $i_05_i = 0, $3 = 0, $storemerge_in = 0, $storemerge = 0;
 $1 = HEAP32[90036] | 0;
 if (($1 | 0) < 15) {
  $storemerge_in = $1;
 } else {
  $i_05_i = 1;
  do {
   $3 = 360012 + ($i_05_i << 3) | 0;
   if ((HEAP32[$3 >> 2] | 0) != 0) {
    _free(HEAP32[360008 + ($i_05_i << 3) >> 2] | 0);
    HEAP32[$3 >> 2] = 0;
   }
   $i_05_i = $i_05_i + 1 | 0;
  } while (($i_05_i | 0) < 16);
  HEAP32[90036] = 0;
  $storemerge_in = 0;
 }
 $storemerge = $storemerge_in + 1 | 0;
 HEAP32[90036] = $storemerge;
 HEAP32[360008 + ($storemerge << 3) >> 2] = $name;
 HEAP32[360012 + ($storemerge << 3) >> 2] = $to_be_freed;
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}
function _at_start() {
 var $1 = 0, $3 = 0, $8 = 0, $13 = 0, $23 = 0;
 $1 = HEAP32[89668] | 0;
 do {
  if (!(HEAP8[2776] | 0)) {
   $3 = _getenv(13760) | 0;
   if (($3 | 0) != 0) {
    _set_encoding($3, 13760, 0) | 0;
    break;
   }
   $8 = _getenv(13648) | 0;
   if (($8 | 0) != 0) {
    _set_encoding($8, 13648, 0) | 0;
    break;
   }
   $13 = _getenv(13544) | 0;
   if (($13 | 0) == 0) {
    break;
   }
   _set_encoding($13, 13544, 0) | 0;
  }
 } while (0);
 if ((HEAP32[89545] | HEAP32[89566] | 0) != 0) {
  return;
 }
 $23 = $1 + 4 | 0;
 HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
 _sharp($1, 0);
 HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) - 1;
 return;
}
function _mcpp_lib_fprintf($od, $format, varrp) {
 $od = $od | 0;
 $format = $format | 0;
 varrp = varrp | 0;
 var $ap = 0, $10 = 0, $14 = 0, $_0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp | 0;
 if (($od | 0) == 0) {
  $10 = HEAP32[89990] | 0;
 } else if (($od | 0) == 1) {
  $10 = HEAP32[89994] | 0;
 } else {
  $10 = ($od | 0) == 2 ? HEAP32[89996] | 0 : 0;
 }
 if (($10 | 0) == 0) {
  $_0 = -1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $14 = $ap;
 HEAP32[$14 >> 2] = varrp;
 HEAP32[$14 + 4 >> 2] = 0;
 $_0 = _vfprintf($10 | 0, $format | 0, $ap | 0) | 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest] = HEAP8[src] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest] = HEAP8[src] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}
function _id_operator($name) {
 $name = $name | 0;
 var $id_ops = 0, $id_p_0 = 0, $5 = 0, $_0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $id_ops = sp | 0;
 _memcpy($id_ops | 0, 6016, 96) | 0;
 $id_p_0 = $id_ops | 0;
 while (1) {
  $5 = HEAP32[$id_p_0 >> 2] | 0;
  if (($5 | 0) == 0) {
   $_0 = 0;
   label = 6;
   break;
  }
  if ((_strcmp($name | 0, $5 | 0) | 0) == 0) {
   break;
  } else {
   $id_p_0 = $id_p_0 + 8 | 0;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 $_0 = HEAP32[$id_p_0 + 4 >> 2] | 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _skip_nl() {
 var $1 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $13 = 0, label = 0;
 HEAP32[89666] = 0;
 $1 = HEAP32[89668] | 0;
 if (($1 | 0) == 0) {
  return;
 } else {
  $3 = $1;
 }
 while (1) {
  $6 = (HEAP32[$3 + 8 >> 2] | 0) == 0;
  $7 = $3 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $8 + (_strlen($8 | 0) | 0);
  if (!$6) {
   label = 5;
   break;
  }
  _get_ch() | 0;
  $13 = HEAP32[89668] | 0;
  if (($13 | 0) == 0) {
   label = 6;
   break;
  } else {
   $3 = $13;
  }
 }
 if ((label | 0) == 5) {
  return;
 } else if ((label | 0) == 6) {
  return;
 }
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}
function _last_is_mbchar($in, $len) {
 $in = $in | 0;
 $len = $len | 0;
 var $1 = 0, $5 = 0, $6 = 0, $cp_0 = 0, $_0 = 0;
 $1 = $in + $len | 0;
 if ((HEAP32[692] & 144 | 0) == 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $5 = HEAP32[91636] | 0;
 $6 = HEAP32[89596] | 0;
 $cp_0 = $1;
 do {
  $cp_0 = $cp_0 - 1 | 0;
  if ($cp_0 >>> 0 < $in >>> 0) {
   break;
  }
 } while ((HEAP16[$5 + (HEAPU8[$cp_0] << 1) >> 1] & $6 | 0) != 0);
 $_0 = $1 - $cp_0 << 1 & 2 ^ 2;
 return $_0 | 0;
}
function _strncasecmp(px, py, n) {
 px = px | 0;
 py = py | 0;
 n = n | 0;
 var i = 0, x = 0, y = 0;
 while (i >>> 0 < n >>> 0) {
  x = _tolower(HEAP8[px + i | 0] | 0) | 0;
  y = _tolower(HEAP8[py + i | 0] | 0) | 0;
  if ((x | 0) == (y | 0) & (x | 0) == 0) return 0;
  if ((x | 0) == 0) return -1;
  if ((y | 0) == 0) return 1;
  if ((x | 0) == (y | 0)) {
   i = i + 1 | 0;
   continue;
  } else {
   return (x >>> 0 > y >>> 0 ? 1 : -1) | 0;
  }
 }
 return 0;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[ptr + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[ptr + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[ptr + 3 | 0];
 HEAP8[tempDoublePtr + 4 | 0] = HEAP8[ptr + 4 | 0];
 HEAP8[tempDoublePtr + 5 | 0] = HEAP8[ptr + 5 | 0];
 HEAP8[tempDoublePtr + 6 | 0] = HEAP8[ptr + 6 | 0];
 HEAP8[tempDoublePtr + 7 | 0] = HEAP8[ptr + 7 | 0];
}
function _unget_string($text, $name) {
 $text = $text | 0;
 $name = $name | 0;
 var $4 = 0, $5 = 0, $9 = 0, $13 = 0;
 if (($text | 0) == 0) {
  $9 = _get_file($name, 0, 0, 1, 0) | 0;
  HEAP8[HEAP32[$9 + 52 >> 2] | 0] = 0;
  $13 = $9;
  return $13 | 0;
 } else {
  $4 = (_strlen($text | 0) | 0) + 1 | 0;
  $5 = _get_file($name, 0, 0, $4, 0) | 0;
  _memcpy(HEAP32[$5 + 52 >> 2] | 0, $text | 0, $4) | 0;
  $13 = $5;
  return $13 | 0;
 }
 return 0;
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest] = HEAP8[src] | 0;
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) | 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) | 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[ctlz_i8 + (x >> 16 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[ctlz_i8 + (x >> 8 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[ctlz_i8 + (x & 255) | 0] | 0) + 24 | 0;
}
function _mcpp_lib_fputs($s, $od) {
 $s = $s | 0;
 $od = $od | 0;
 var $10 = 0, $15 = 0;
 if (($od | 0) == 0) {
  $10 = HEAP32[89990] | 0;
 } else if (($od | 0) == 1) {
  $10 = HEAP32[89994] | 0;
 } else {
  $10 = ($od | 0) == 2 ? HEAP32[89996] | 0 : 0;
 }
 if (($10 | 0) == 0) {
  $15 = -1;
  return $15 | 0;
 }
 $15 = _fputs($s | 0, $10 | 0) | 0;
 return $15 | 0;
}
function _mcpp_lib_fputc($c, $od) {
 $c = $c | 0;
 $od = $od | 0;
 var $10 = 0, $15 = 0;
 if (($od | 0) == 0) {
  $10 = HEAP32[89990] | 0;
 } else if (($od | 0) == 1) {
  $10 = HEAP32[89994] | 0;
 } else {
  $10 = ($od | 0) == 2 ? HEAP32[89996] | 0 : 0;
 }
 if (($10 | 0) == 0) {
  $15 = -1;
  return $15 | 0;
 }
 $15 = _fputc($c | 0, $10 | 0) | 0;
 return $15 | 0;
}
function _save_string($text) {
 $text = $text | 0;
 var $2 = 0, $3 = 0;
 $2 = (_strlen($text | 0) | 0) + 1 | 0;
 $3 = _malloc($2) | 0;
 if (($3 | 0) != 0) {
  _memcpy($3 | 0, $text | 0, $2) | 0;
  return $3 | 0;
 }
 if ((HEAP32[89594] & 128 | 0) == 0) {
  _cfatal(7968, 0, $2, 0);
  return 0;
 }
 _print_heap();
 _cfatal(7968, 0, $2, 0);
 return 0;
}
function _llvm_uadd_with_overflow_i64(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0, overflow = 0;
 l = a + c >>> 0;
 h = b + d >>> 0;
 overflow = h >>> 0 < b >>> 0 | 0;
 if (l >>> 0 < a >>> 0) {
  h = h + 1 >>> 0;
  overflow = overflow | !h;
 }
 return (tempRet0 = h, tempRet1 = overflow, l | 0) | 0;
}
function _xrealloc($ptr, $size) {
 $ptr = $ptr | 0;
 $size = $size | 0;
 var $1 = 0;
 $1 = _realloc($ptr, $size) | 0;
 if (!(($1 | 0) == 0 & ($size | 0) != 0)) {
  return $1 | 0;
 }
 if ((HEAP32[89594] & 128 | 0) == 0) {
  _cfatal(7968, 0, $size, 0);
  return 0;
 }
 _print_heap();
 _cfatal(7968, 0, $size, 0);
 return 0;
}
function _testSetjmp(id, table) {
 id = id | 0;
 table = table | 0;
 var i = 0, curr = 0;
 while ((i | 0) < 20) {
  curr = HEAP32[table + (i << 2) >> 2] | 0;
  if ((curr | 0) == 0) break;
  if ((curr | 0) == (id | 0)) {
   return HEAP32[table + ((i << 2) + 4) >> 2] | 0;
  }
  i = i + 2 | 0;
 }
 return 0;
}
function _clear_exp_mac() {
 var $i_05 = 0, $2 = 0;
 $i_05 = 1;
 do {
  $2 = 360012 + ($i_05 << 3) | 0;
  if ((HEAP32[$2 >> 2] | 0) != 0) {
   _free(HEAP32[360008 + ($i_05 << 3) >> 2] | 0);
   HEAP32[$2 >> 2] = 0;
  }
  $i_05 = $i_05 + 1 | 0;
 } while (($i_05 | 0) < 16);
 HEAP32[90036] = 0;
 return;
}
function _memcmp(p1, p2, num) {
 p1 = p1 | 0;
 p2 = p2 | 0;
 num = num | 0;
 var i = 0, v1 = 0, v2 = 0;
 while ((i | 0) < (num | 0)) {
  v1 = HEAPU8[p1 + i | 0] | 0;
  v2 = HEAPU8[p2 + i | 0] | 0;
  if ((v1 | 0) != (v2 | 0)) return ((v1 | 0) > (v2 | 0) ? 1 : -1) | 0;
  i = i + 1 | 0;
 }
 return 0;
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}
function _strcat(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0, pdestEnd = 0;
 pdestEnd = pdest + (_strlen(pdest) | 0) | 0;
 do {
  HEAP8[pdestEnd + i | 0] = HEAP8[psrc + i | 0];
  i = i + 1 | 0;
 } while (HEAP8[psrc + (i - 1) | 0] | 0);
 return pdest | 0;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[ptr + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[ptr + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[ptr + 3 | 0];
}
function _cerror($format, $arg1, $arg2, $arg3) {
 $format = $format | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 _do_msg(12624, $format, $arg1, $arg2, $arg3);
 HEAP32[90042] = (HEAP32[90042] | 0) + 1;
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return (tempRet0 = tempRet0, $1$0) | 0;
}
function _xmalloc($size) {
 $size = $size | 0;
 var $1 = 0;
 $1 = _malloc($size) | 0;
 if (($1 | 0) != 0) {
  return $1 | 0;
 }
 if ((HEAP32[89594] & 128 | 0) != 0) {
  _print_heap();
 }
 _cfatal(7968, 0, $size, 0);
 return 0;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function _strcpy(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0;
 do {
  HEAP8[pdest + i | 0] = HEAP8[psrc + i | 0];
  i = i + 1 | 0;
 } while (HEAP8[psrc + (i - 1) | 0] | 0);
 return pdest | 0;
}
function _cfatal($format, $arg1, $arg2, $arg3) {
 $format = $format | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 _do_msg(12784, $format, $arg1, $arg2, $arg3);
 _longjmp(360176, -1 | 0);
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function _expand_init($compat, $strict_ansi) {
 $compat = $compat | 0;
 $strict_ansi = $strict_ansi | 0;
 HEAP32[90034] = (HEAP32[592] | 0) != 0 ? 4 : 2;
 HEAP32[91374] = $compat;
 return;
}
function _cwarn($format, $arg1, $arg2, $arg3) {
 $format = $format | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 _do_msg(12448, $format, $arg1, $arg2, $arg3);
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return ret | 0;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}
function _skip_ws() {
 var $2 = 0;
 do {
  $2 = _get_ch() | 0;
 } while ((HEAP16[(HEAP32[91636] | 0) + ($2 << 1) >> 1] & 64) != 0);
 return $2 | 0;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr] | 0) {
  curr = curr + 1 | 0;
 }
 return curr - ptr | 0;
}
function _tolower(chr) {
 chr = chr | 0;
 if ((chr | 0) < 65) return chr | 0;
 if ((chr | 0) > 90) return chr | 0;
 return chr - 65 + 97 | 0;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0);
}
function b9(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(9);
 return 0;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0;
}
function b0(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(0);
}
function b7(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(7);
 return 0;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 7](a1 | 0);
}
function iii__strcmp__wrapper(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return _strcmp(a1 | 0, a2 | 0) | 0;
}
function iii__stpcpy__wrapper(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return _stpcpy(a1 | 0, a2 | 0) | 0;
}
function iii__fopen__wrapper(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return _fopen(a1 | 0, a2 | 0) | 0;
}
function b10(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(10);
}
function _strcasecmp(px, py) {
 px = px | 0;
 py = py | 0;
 return _strncasecmp(px, py, -1) | 0;
}
function vii__longjmp__wrapper(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 _longjmp(a1 | 0, a2 | 0);
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0;
}
function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(5);
 return 0;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 31]();
}
function ii__fclose__wrapper(a1) {
 a1 = a1 | 0;
 return _fclose(a1 | 0) | 0;
}
function i____errno_location__wrapper() {
 return ___errno_location() | 0;
}
function b8(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(8);
 return 0;
}
function setTempRet9(value) {
 value = value | 0;
 tempRet9 = value;
}
function setTempRet8(value) {
 value = value | 0;
 tempRet8 = value;
}
function setTempRet7(value) {
 value = value | 0;
 tempRet7 = value;
}
function setTempRet6(value) {
 value = value | 0;
 tempRet6 = value;
}
function setTempRet5(value) {
 value = value | 0;
 tempRet5 = value;
}
function setTempRet4(value) {
 value = value | 0;
 tempRet4 = value;
}
function setTempRet3(value) {
 value = value | 0;
 tempRet3 = value;
}
function setTempRet2(value) {
 value = value | 0;
 tempRet2 = value;
}
function setTempRet1(value) {
 value = value | 0;
 tempRet1 = value;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}
function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(3);
}
function _eminit() {
 _emscripten_asm_const(10776);
 return;
}
function b4(p0) {
 p0 = p0 | 0;
 abort(4);
 return 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b2(p0) {
 p0 = p0 | 0;
 abort(2);
}
function b1() {
 abort(1);
 return 0;
}
function _print_heap() {
 return;
}
function _put_asm() {
 return;
}
function _at_end() {
 return;
}
function b6() {
 abort(6);
}
function runPostSets() {
}
// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_viiiii = [b0,b0,_add_file,b0,_dump_a_def,b0,b0,b0];
  var FUNCTION_TABLE_i = [b1,b1,i____errno_location__wrapper,b1,_get_ch,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,b2,_free,b2,_put_depend,b2,_dump_unget,b2];
  var FUNCTION_TABLE_vii = [b3,b3,_sharp,b3,_expanding,b3,vii__longjmp__wrapper,b3,_dump_string,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,_strlen,b4,_look_id,b4,_is_macro,b4,ii__fclose__wrapper,b4,_xmalloc,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiii = [b5,b5,_mcpp_lib_fprintf,b5,_mb_read_2byte,b5,_mb_read_utf8,b5,_scan_token,b5,_squeeze_ws,b5,_collect_args,b5,_memmove,b5,_mb_read_iso2022_jp,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5];
  var FUNCTION_TABLE_v = [b6,b6,_skip_nl,b6,_eminit,b6,_unget_ch,b6,_put_asm,b6,_putout,b6,_directive,b6,_mb_init,b6,_print_heap,b6,_init_sys_macro,b6,_at_start,b6,_clear_exp_mac,b6,_at_end,b6,_do_pragma,b6,b6
  ,b6,b6,b6];
  var FUNCTION_TABLE_iiiii = [b7,b7,_look_and_install,b7];
  var FUNCTION_TABLE_iii = [b8,b8,_unget_string,b8,_xrealloc,b8,_mcpp_lib_fputc,b8,_mcpp_lib_fputs,b8,iii__strcmp__wrapper,b8,iii__stpcpy__wrapper,b8,iii__fopen__wrapper,b8];
  var FUNCTION_TABLE_iiiiii = [b9,b9,_expand_prestd,b9,_expand_std,b9,_get_file,b9];
  var FUNCTION_TABLE_viiii = [b10,b10,_cwarn,b10,_do_options,b10,_cerror,b10];
  return { _testSetjmp: _testSetjmp, _strlen: _strlen, _strcat: _strcat, _free: _free, _main: _main, _memcmp: _memcmp, _memmove: _memmove, _tolower: _tolower, _strncasecmp: _strncasecmp, _memset: _memset, _malloc: _malloc, _saveSetjmp: _saveSetjmp, _memcpy: _memcpy, _strcasecmp: _strcasecmp, _realloc: _realloc, _llvm_uadd_with_overflow_i64: _llvm_uadd_with_overflow_i64, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_strncmp": _strncmp, "_llvm_lifetime_end": _llvm_lifetime_end, "_pread": _pread, "_tzset": _tzset, "_snprintf": _snprintf, "_lseek": _lseek, "_fgetc": _fgetc, "_fclose": _fclose, "_abort": _abort, "_fprintf": _fprintf, "_close": _close, "_fgets": _fgets, "_stpcpy": _stpcpy, "_fflush": _fflush, "_fopen": _fopen, "_strchr": _strchr, "_fputc": _fputc, "_emscripten_asm_const": _emscripten_asm_const, "___buildEnvironment": ___buildEnvironment, "_sysconf": _sysconf, "_mktime": _mktime, "___setErrNo": ___setErrNo, "_open": _open, "_fseek": _fseek, "_send": _send, "_isxdigit": _isxdigit, "_fputs": _fputs, "_ftell": _ftell, "_sprintf": _sprintf, "_strrchr": _strrchr, "_ferror": _ferror, "_localtime": _localtime, "_strtol": _strtol, "_stat": _stat, "_fread": _fread, "_longjmp": _longjmp, "_strcspn": _strcspn, "_read": _read, "_getcwd": _getcwd, "__reallyNegative": __reallyNegative, "_time": _time, "__formatString": __formatString, "_localtime_r": _localtime_r, "_getenv": _getenv, "_atoi": _atoi, "_readlink": _readlink, "_vfprintf": _vfprintf, "_asctime_r": _asctime_r, "_strstr": _strstr, "_llvm_va_end": _llvm_va_end, "_recv": _recv, "_pwrite": _pwrite, "_putchar": _putchar, "_ctime": _ctime, "_fsync": _fsync, "___errno_location": ___errno_location, "_asctime": _asctime, "_isspace": _isspace, "_iscntrl": _iscntrl, "_llvm_lifetime_start": _llvm_lifetime_start, "_write": _write, "_sbrk": _sbrk, "__parseInt": __parseInt, "_fwrite": _fwrite, "_isupper": _isupper, "_strcmp": _strcmp, "_memchr": _memchr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stdin": _stdin, "_stderr": _stderr, "_stdout": _stdout }, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _strncasecmp = Module["_strncasecmp"] = asm["_strncasecmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strcasecmp = Module["_strcasecmp"] = asm["_strcasecmp"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _llvm_uadd_with_overflow_i64 = Module["_llvm_uadd_with_overflow_i64"] = asm["_llvm_uadd_with_overflow_i64"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
